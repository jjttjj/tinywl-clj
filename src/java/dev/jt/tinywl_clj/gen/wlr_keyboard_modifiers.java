// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_keyboard_modifiers {
 *     xkb_mod_mask_t depressed;
 *     xkb_mod_mask_t latched;
 *     xkb_mod_mask_t locked;
 *     xkb_mod_mask_t group;
 * }
 * }
 */
public class wlr_keyboard_modifiers {

    wlr_keyboard_modifiers() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("depressed"),
        C.C_INT.withName("latched"),
        C.C_INT.withName("locked"),
        C.C_INT.withName("group")
    ).withName("wlr_keyboard_modifiers");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt depressed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t depressed
     * }
     */
    public static final OfInt depressed$layout() {
        return depressed$LAYOUT;
    }

    private static final long depressed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t depressed
     * }
     */
    public static final long depressed$offset() {
        return depressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t depressed
     * }
     */
    public static int depressed(MemorySegment struct) {
        return struct.get(depressed$LAYOUT, depressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t depressed
     * }
     */
    public static void depressed(MemorySegment struct, int fieldValue) {
        struct.set(depressed$LAYOUT, depressed$OFFSET, fieldValue);
    }

    private static final OfInt latched$LAYOUT = (OfInt)$LAYOUT.select(groupElement("latched"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t latched
     * }
     */
    public static final OfInt latched$layout() {
        return latched$LAYOUT;
    }

    private static final long latched$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t latched
     * }
     */
    public static final long latched$offset() {
        return latched$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t latched
     * }
     */
    public static int latched(MemorySegment struct) {
        return struct.get(latched$LAYOUT, latched$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t latched
     * }
     */
    public static void latched(MemorySegment struct, int fieldValue) {
        struct.set(latched$LAYOUT, latched$OFFSET, fieldValue);
    }

    private static final OfInt locked$LAYOUT = (OfInt)$LAYOUT.select(groupElement("locked"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t locked
     * }
     */
    public static final OfInt locked$layout() {
        return locked$LAYOUT;
    }

    private static final long locked$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t locked
     * }
     */
    public static final long locked$offset() {
        return locked$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t locked
     * }
     */
    public static int locked(MemorySegment struct) {
        return struct.get(locked$LAYOUT, locked$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t locked
     * }
     */
    public static void locked(MemorySegment struct, int fieldValue) {
        struct.set(locked$LAYOUT, locked$OFFSET, fieldValue);
    }

    private static final OfInt group$LAYOUT = (OfInt)$LAYOUT.select(groupElement("group"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t group
     * }
     */
    public static final OfInt group$layout() {
        return group$LAYOUT;
    }

    private static final long group$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t group
     * }
     */
    public static final long group$offset() {
        return group$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t group
     * }
     */
    public static int group(MemorySegment struct) {
        return struct.get(group$LAYOUT, group$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * xkb_mod_mask_t group
     * }
     */
    public static void group(MemorySegment struct, int fieldValue) {
        struct.set(group$LAYOUT, group$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


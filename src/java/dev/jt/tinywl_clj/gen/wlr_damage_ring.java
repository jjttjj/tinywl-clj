// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_damage_ring {
 *     int32_t width;
 *     int32_t height;
 *     pixman_region32_t current;
 *     pixman_region32_t previous[2];
 *     size_t previous_idx;
 * }
 * }
 */
public class wlr_damage_ring {

    wlr_damage_ring() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("width"),
        C.C_INT.withName("height"),
        pixman_region32.layout().withName("current"),
        MemoryLayout.sequenceLayout(2, pixman_region32.layout()).withName("previous"),
        C.C_LONG.withName("previous_idx")
    ).withName("wlr_damage_ring");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final GroupLayout current$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("current"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t current
     * }
     */
    public static final GroupLayout current$layout() {
        return current$LAYOUT;
    }

    private static final long current$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t current
     * }
     */
    public static final long current$offset() {
        return current$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t current
     * }
     */
    public static MemorySegment current(MemorySegment struct) {
        return struct.asSlice(current$OFFSET, current$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t current
     * }
     */
    public static void current(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, current$OFFSET, current$LAYOUT.byteSize());
    }

    private static final SequenceLayout previous$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("previous"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t previous[2]
     * }
     */
    public static final SequenceLayout previous$layout() {
        return previous$LAYOUT;
    }

    private static final long previous$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t previous[2]
     * }
     */
    public static final long previous$offset() {
        return previous$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t previous[2]
     * }
     */
    public static MemorySegment previous(MemorySegment struct) {
        return struct.asSlice(previous$OFFSET, previous$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t previous[2]
     * }
     */
    public static void previous(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, previous$OFFSET, previous$LAYOUT.byteSize());
    }

    private static long[] previous$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * pixman_region32_t previous[2]
     * }
     */
    public static long[] previous$dimensions() {
        return previous$DIMS;
    }
    private static final MethodHandle previous$ELEM_HANDLE = previous$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * pixman_region32_t previous[2]
     * }
     */
    public static MemorySegment previous(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)previous$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * pixman_region32_t previous[2]
     * }
     */
    public static void previous(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, previous(struct, index0), 0L, pixman_region32.layout().byteSize());
    }

    private static final OfLong previous_idx$LAYOUT = (OfLong)$LAYOUT.select(groupElement("previous_idx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t previous_idx
     * }
     */
    public static final OfLong previous_idx$layout() {
        return previous_idx$LAYOUT;
    }

    private static final long previous_idx$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t previous_idx
     * }
     */
    public static final long previous_idx$offset() {
        return previous_idx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t previous_idx
     * }
     */
    public static long previous_idx(MemorySegment struct) {
        return struct.get(previous_idx$LAYOUT, previous_idx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t previous_idx
     * }
     */
    public static void previous_idx(MemorySegment struct, long fieldValue) {
        struct.set(previous_idx$LAYOUT, previous_idx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


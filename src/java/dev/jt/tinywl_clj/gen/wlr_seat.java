// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_seat {
 *     struct wl_global *global;
 *     struct wl_display *display;
 *     struct wl_list clients;
 *     char *name;
 *     uint32_t capabilities;
 *     uint32_t accumulated_capabilities;
 *     struct timespec last_event;
 *     struct wlr_data_source *selection_source;
 *     uint32_t selection_serial;
 *     struct wl_list selection_offers;
 *     struct wlr_primary_selection_source *primary_selection_source;
 *     uint32_t primary_selection_serial;
 *     struct wlr_drag *drag;
 *     struct wlr_data_source *drag_source;
 *     uint32_t drag_serial;
 *     struct wl_list drag_offers;
 *     struct wlr_seat_pointer_state pointer_state;
 *     struct wlr_seat_keyboard_state keyboard_state;
 *     struct wlr_seat_touch_state touch_state;
 *     struct wl_listener display_destroy;
 *     struct wl_listener selection_source_destroy;
 *     struct wl_listener primary_selection_source_destroy;
 *     struct wl_listener drag_source_destroy;
 *     struct {
 *         struct wl_signal pointer_grab_begin;
 *         struct wl_signal pointer_grab_end;
 *         struct wl_signal keyboard_grab_begin;
 *         struct wl_signal keyboard_grab_end;
 *         struct wl_signal touch_grab_begin;
 *         struct wl_signal touch_grab_end;
 *         struct wl_signal request_set_cursor;
 *         struct wl_signal request_set_selection;
 *         struct wl_signal set_selection;
 *         struct wl_signal request_set_primary_selection;
 *         struct wl_signal set_primary_selection;
 *         struct wl_signal request_start_drag;
 *         struct wl_signal start_drag;
 *         struct wl_signal destroy;
 *     } events;
 *     void *data;
 * }
 * }
 */
public class wlr_seat {

    wlr_seat() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("global"),
        C.C_POINTER.withName("display"),
        wl_list.layout().withName("clients"),
        C.C_POINTER.withName("name"),
        C.C_INT.withName("capabilities"),
        C.C_INT.withName("accumulated_capabilities"),
        timespec.layout().withName("last_event"),
        C.C_POINTER.withName("selection_source"),
        C.C_INT.withName("selection_serial"),
        MemoryLayout.paddingLayout(4),
        wl_list.layout().withName("selection_offers"),
        C.C_POINTER.withName("primary_selection_source"),
        C.C_INT.withName("primary_selection_serial"),
        MemoryLayout.paddingLayout(4),
        C.C_POINTER.withName("drag"),
        C.C_POINTER.withName("drag_source"),
        C.C_INT.withName("drag_serial"),
        MemoryLayout.paddingLayout(4),
        wl_list.layout().withName("drag_offers"),
        wlr_seat_pointer_state.layout().withName("pointer_state"),
        wlr_seat_keyboard_state.layout().withName("keyboard_state"),
        wlr_seat_touch_state.layout().withName("touch_state"),
        wl_listener.layout().withName("display_destroy"),
        wl_listener.layout().withName("selection_source_destroy"),
        wl_listener.layout().withName("primary_selection_source_destroy"),
        wl_listener.layout().withName("drag_source_destroy"),
        wlr_seat.events.layout().withName("events"),
        C.C_POINTER.withName("data")
    ).withName("wlr_seat");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout global$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("global"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static final AddressLayout global$layout() {
        return global$LAYOUT;
    }

    private static final long global$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static final long global$offset() {
        return global$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static MemorySegment global(MemorySegment struct) {
        return struct.get(global$LAYOUT, global$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static void global(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(global$LAYOUT, global$OFFSET, fieldValue);
    }

    private static final AddressLayout display$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("display"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_display *display
     * }
     */
    public static final AddressLayout display$layout() {
        return display$LAYOUT;
    }

    private static final long display$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_display *display
     * }
     */
    public static final long display$offset() {
        return display$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_display *display
     * }
     */
    public static MemorySegment display(MemorySegment struct) {
        return struct.get(display$LAYOUT, display$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_display *display
     * }
     */
    public static void display(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(display$LAYOUT, display$OFFSET, fieldValue);
    }

    private static final GroupLayout clients$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("clients"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list clients
     * }
     */
    public static final GroupLayout clients$layout() {
        return clients$LAYOUT;
    }

    private static final long clients$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list clients
     * }
     */
    public static final long clients$offset() {
        return clients$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list clients
     * }
     */
    public static MemorySegment clients(MemorySegment struct) {
        return struct.asSlice(clients$OFFSET, clients$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list clients
     * }
     */
    public static void clients(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, clients$OFFSET, clients$LAYOUT.byteSize());
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt capabilities$LAYOUT = (OfInt)$LAYOUT.select(groupElement("capabilities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t capabilities
     * }
     */
    public static final OfInt capabilities$layout() {
        return capabilities$LAYOUT;
    }

    private static final long capabilities$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t capabilities
     * }
     */
    public static final long capabilities$offset() {
        return capabilities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t capabilities
     * }
     */
    public static int capabilities(MemorySegment struct) {
        return struct.get(capabilities$LAYOUT, capabilities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t capabilities
     * }
     */
    public static void capabilities(MemorySegment struct, int fieldValue) {
        struct.set(capabilities$LAYOUT, capabilities$OFFSET, fieldValue);
    }

    private static final OfInt accumulated_capabilities$LAYOUT = (OfInt)$LAYOUT.select(groupElement("accumulated_capabilities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t accumulated_capabilities
     * }
     */
    public static final OfInt accumulated_capabilities$layout() {
        return accumulated_capabilities$LAYOUT;
    }

    private static final long accumulated_capabilities$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t accumulated_capabilities
     * }
     */
    public static final long accumulated_capabilities$offset() {
        return accumulated_capabilities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t accumulated_capabilities
     * }
     */
    public static int accumulated_capabilities(MemorySegment struct) {
        return struct.get(accumulated_capabilities$LAYOUT, accumulated_capabilities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t accumulated_capabilities
     * }
     */
    public static void accumulated_capabilities(MemorySegment struct, int fieldValue) {
        struct.set(accumulated_capabilities$LAYOUT, accumulated_capabilities$OFFSET, fieldValue);
    }

    private static final GroupLayout last_event$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("last_event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct timespec last_event
     * }
     */
    public static final GroupLayout last_event$layout() {
        return last_event$LAYOUT;
    }

    private static final long last_event$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct timespec last_event
     * }
     */
    public static final long last_event$offset() {
        return last_event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct timespec last_event
     * }
     */
    public static MemorySegment last_event(MemorySegment struct) {
        return struct.asSlice(last_event$OFFSET, last_event$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct timespec last_event
     * }
     */
    public static void last_event(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, last_event$OFFSET, last_event$LAYOUT.byteSize());
    }

    private static final AddressLayout selection_source$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("selection_source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_data_source *selection_source
     * }
     */
    public static final AddressLayout selection_source$layout() {
        return selection_source$LAYOUT;
    }

    private static final long selection_source$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_data_source *selection_source
     * }
     */
    public static final long selection_source$offset() {
        return selection_source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_data_source *selection_source
     * }
     */
    public static MemorySegment selection_source(MemorySegment struct) {
        return struct.get(selection_source$LAYOUT, selection_source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_data_source *selection_source
     * }
     */
    public static void selection_source(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(selection_source$LAYOUT, selection_source$OFFSET, fieldValue);
    }

    private static final OfInt selection_serial$LAYOUT = (OfInt)$LAYOUT.select(groupElement("selection_serial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t selection_serial
     * }
     */
    public static final OfInt selection_serial$layout() {
        return selection_serial$LAYOUT;
    }

    private static final long selection_serial$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t selection_serial
     * }
     */
    public static final long selection_serial$offset() {
        return selection_serial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t selection_serial
     * }
     */
    public static int selection_serial(MemorySegment struct) {
        return struct.get(selection_serial$LAYOUT, selection_serial$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t selection_serial
     * }
     */
    public static void selection_serial(MemorySegment struct, int fieldValue) {
        struct.set(selection_serial$LAYOUT, selection_serial$OFFSET, fieldValue);
    }

    private static final GroupLayout selection_offers$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("selection_offers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list selection_offers
     * }
     */
    public static final GroupLayout selection_offers$layout() {
        return selection_offers$LAYOUT;
    }

    private static final long selection_offers$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list selection_offers
     * }
     */
    public static final long selection_offers$offset() {
        return selection_offers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list selection_offers
     * }
     */
    public static MemorySegment selection_offers(MemorySegment struct) {
        return struct.asSlice(selection_offers$OFFSET, selection_offers$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list selection_offers
     * }
     */
    public static void selection_offers(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, selection_offers$OFFSET, selection_offers$LAYOUT.byteSize());
    }

    private static final AddressLayout primary_selection_source$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("primary_selection_source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_primary_selection_source *primary_selection_source
     * }
     */
    public static final AddressLayout primary_selection_source$layout() {
        return primary_selection_source$LAYOUT;
    }

    private static final long primary_selection_source$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_primary_selection_source *primary_selection_source
     * }
     */
    public static final long primary_selection_source$offset() {
        return primary_selection_source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_primary_selection_source *primary_selection_source
     * }
     */
    public static MemorySegment primary_selection_source(MemorySegment struct) {
        return struct.get(primary_selection_source$LAYOUT, primary_selection_source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_primary_selection_source *primary_selection_source
     * }
     */
    public static void primary_selection_source(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(primary_selection_source$LAYOUT, primary_selection_source$OFFSET, fieldValue);
    }

    private static final OfInt primary_selection_serial$LAYOUT = (OfInt)$LAYOUT.select(groupElement("primary_selection_serial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t primary_selection_serial
     * }
     */
    public static final OfInt primary_selection_serial$layout() {
        return primary_selection_serial$LAYOUT;
    }

    private static final long primary_selection_serial$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t primary_selection_serial
     * }
     */
    public static final long primary_selection_serial$offset() {
        return primary_selection_serial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t primary_selection_serial
     * }
     */
    public static int primary_selection_serial(MemorySegment struct) {
        return struct.get(primary_selection_serial$LAYOUT, primary_selection_serial$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t primary_selection_serial
     * }
     */
    public static void primary_selection_serial(MemorySegment struct, int fieldValue) {
        struct.set(primary_selection_serial$LAYOUT, primary_selection_serial$OFFSET, fieldValue);
    }

    private static final AddressLayout drag$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("drag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_drag *drag
     * }
     */
    public static final AddressLayout drag$layout() {
        return drag$LAYOUT;
    }

    private static final long drag$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_drag *drag
     * }
     */
    public static final long drag$offset() {
        return drag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_drag *drag
     * }
     */
    public static MemorySegment drag(MemorySegment struct) {
        return struct.get(drag$LAYOUT, drag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_drag *drag
     * }
     */
    public static void drag(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(drag$LAYOUT, drag$OFFSET, fieldValue);
    }

    private static final AddressLayout drag_source$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("drag_source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_data_source *drag_source
     * }
     */
    public static final AddressLayout drag_source$layout() {
        return drag_source$LAYOUT;
    }

    private static final long drag_source$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_data_source *drag_source
     * }
     */
    public static final long drag_source$offset() {
        return drag_source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_data_source *drag_source
     * }
     */
    public static MemorySegment drag_source(MemorySegment struct) {
        return struct.get(drag_source$LAYOUT, drag_source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_data_source *drag_source
     * }
     */
    public static void drag_source(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(drag_source$LAYOUT, drag_source$OFFSET, fieldValue);
    }

    private static final OfInt drag_serial$LAYOUT = (OfInt)$LAYOUT.select(groupElement("drag_serial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t drag_serial
     * }
     */
    public static final OfInt drag_serial$layout() {
        return drag_serial$LAYOUT;
    }

    private static final long drag_serial$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t drag_serial
     * }
     */
    public static final long drag_serial$offset() {
        return drag_serial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t drag_serial
     * }
     */
    public static int drag_serial(MemorySegment struct) {
        return struct.get(drag_serial$LAYOUT, drag_serial$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t drag_serial
     * }
     */
    public static void drag_serial(MemorySegment struct, int fieldValue) {
        struct.set(drag_serial$LAYOUT, drag_serial$OFFSET, fieldValue);
    }

    private static final GroupLayout drag_offers$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("drag_offers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list drag_offers
     * }
     */
    public static final GroupLayout drag_offers$layout() {
        return drag_offers$LAYOUT;
    }

    private static final long drag_offers$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list drag_offers
     * }
     */
    public static final long drag_offers$offset() {
        return drag_offers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list drag_offers
     * }
     */
    public static MemorySegment drag_offers(MemorySegment struct) {
        return struct.asSlice(drag_offers$OFFSET, drag_offers$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list drag_offers
     * }
     */
    public static void drag_offers(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, drag_offers$OFFSET, drag_offers$LAYOUT.byteSize());
    }

    private static final GroupLayout pointer_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pointer_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_state pointer_state
     * }
     */
    public static final GroupLayout pointer_state$layout() {
        return pointer_state$LAYOUT;
    }

    private static final long pointer_state$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_state pointer_state
     * }
     */
    public static final long pointer_state$offset() {
        return pointer_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_state pointer_state
     * }
     */
    public static MemorySegment pointer_state(MemorySegment struct) {
        return struct.asSlice(pointer_state$OFFSET, pointer_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_state pointer_state
     * }
     */
    public static void pointer_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pointer_state$OFFSET, pointer_state$LAYOUT.byteSize());
    }

    private static final GroupLayout keyboard_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("keyboard_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_state keyboard_state
     * }
     */
    public static final GroupLayout keyboard_state$layout() {
        return keyboard_state$LAYOUT;
    }

    private static final long keyboard_state$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_state keyboard_state
     * }
     */
    public static final long keyboard_state$offset() {
        return keyboard_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_state keyboard_state
     * }
     */
    public static MemorySegment keyboard_state(MemorySegment struct) {
        return struct.asSlice(keyboard_state$OFFSET, keyboard_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_state keyboard_state
     * }
     */
    public static void keyboard_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, keyboard_state$OFFSET, keyboard_state$LAYOUT.byteSize());
    }

    private static final GroupLayout touch_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("touch_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_state touch_state
     * }
     */
    public static final GroupLayout touch_state$layout() {
        return touch_state$LAYOUT;
    }

    private static final long touch_state$OFFSET = 504;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_state touch_state
     * }
     */
    public static final long touch_state$offset() {
        return touch_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_state touch_state
     * }
     */
    public static MemorySegment touch_state(MemorySegment struct) {
        return struct.asSlice(touch_state$OFFSET, touch_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_state touch_state
     * }
     */
    public static void touch_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, touch_state$OFFSET, touch_state$LAYOUT.byteSize());
    }

    private static final GroupLayout display_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("display_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static final GroupLayout display_destroy$layout() {
        return display_destroy$LAYOUT;
    }

    private static final long display_destroy$OFFSET = 552;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static final long display_destroy$offset() {
        return display_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static MemorySegment display_destroy(MemorySegment struct) {
        return struct.asSlice(display_destroy$OFFSET, display_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static void display_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, display_destroy$OFFSET, display_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout selection_source_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("selection_source_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener selection_source_destroy
     * }
     */
    public static final GroupLayout selection_source_destroy$layout() {
        return selection_source_destroy$LAYOUT;
    }

    private static final long selection_source_destroy$OFFSET = 576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener selection_source_destroy
     * }
     */
    public static final long selection_source_destroy$offset() {
        return selection_source_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener selection_source_destroy
     * }
     */
    public static MemorySegment selection_source_destroy(MemorySegment struct) {
        return struct.asSlice(selection_source_destroy$OFFSET, selection_source_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener selection_source_destroy
     * }
     */
    public static void selection_source_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, selection_source_destroy$OFFSET, selection_source_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout primary_selection_source_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("primary_selection_source_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener primary_selection_source_destroy
     * }
     */
    public static final GroupLayout primary_selection_source_destroy$layout() {
        return primary_selection_source_destroy$LAYOUT;
    }

    private static final long primary_selection_source_destroy$OFFSET = 600;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener primary_selection_source_destroy
     * }
     */
    public static final long primary_selection_source_destroy$offset() {
        return primary_selection_source_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener primary_selection_source_destroy
     * }
     */
    public static MemorySegment primary_selection_source_destroy(MemorySegment struct) {
        return struct.asSlice(primary_selection_source_destroy$OFFSET, primary_selection_source_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener primary_selection_source_destroy
     * }
     */
    public static void primary_selection_source_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, primary_selection_source_destroy$OFFSET, primary_selection_source_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout drag_source_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("drag_source_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener drag_source_destroy
     * }
     */
    public static final GroupLayout drag_source_destroy$layout() {
        return drag_source_destroy$LAYOUT;
    }

    private static final long drag_source_destroy$OFFSET = 624;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener drag_source_destroy
     * }
     */
    public static final long drag_source_destroy$offset() {
        return drag_source_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener drag_source_destroy
     * }
     */
    public static MemorySegment drag_source_destroy(MemorySegment struct) {
        return struct.asSlice(drag_source_destroy$OFFSET, drag_source_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener drag_source_destroy
     * }
     */
    public static void drag_source_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, drag_source_destroy$OFFSET, drag_source_destroy$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal pointer_grab_begin;
     *     struct wl_signal pointer_grab_end;
     *     struct wl_signal keyboard_grab_begin;
     *     struct wl_signal keyboard_grab_end;
     *     struct wl_signal touch_grab_begin;
     *     struct wl_signal touch_grab_end;
     *     struct wl_signal request_set_cursor;
     *     struct wl_signal request_set_selection;
     *     struct wl_signal set_selection;
     *     struct wl_signal request_set_primary_selection;
     *     struct wl_signal set_primary_selection;
     *     struct wl_signal request_start_drag;
     *     struct wl_signal start_drag;
     *     struct wl_signal destroy;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("pointer_grab_begin"),
            wl_signal.layout().withName("pointer_grab_end"),
            wl_signal.layout().withName("keyboard_grab_begin"),
            wl_signal.layout().withName("keyboard_grab_end"),
            wl_signal.layout().withName("touch_grab_begin"),
            wl_signal.layout().withName("touch_grab_end"),
            wl_signal.layout().withName("request_set_cursor"),
            wl_signal.layout().withName("request_set_selection"),
            wl_signal.layout().withName("set_selection"),
            wl_signal.layout().withName("request_set_primary_selection"),
            wl_signal.layout().withName("set_primary_selection"),
            wl_signal.layout().withName("request_start_drag"),
            wl_signal.layout().withName("start_drag"),
            wl_signal.layout().withName("destroy")
        ).withName("$anon$265:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout pointer_grab_begin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pointer_grab_begin"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal pointer_grab_begin
         * }
         */
        public static final GroupLayout pointer_grab_begin$layout() {
            return pointer_grab_begin$LAYOUT;
        }

        private static final long pointer_grab_begin$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal pointer_grab_begin
         * }
         */
        public static final long pointer_grab_begin$offset() {
            return pointer_grab_begin$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal pointer_grab_begin
         * }
         */
        public static MemorySegment pointer_grab_begin(MemorySegment struct) {
            return struct.asSlice(pointer_grab_begin$OFFSET, pointer_grab_begin$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal pointer_grab_begin
         * }
         */
        public static void pointer_grab_begin(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, pointer_grab_begin$OFFSET, pointer_grab_begin$LAYOUT.byteSize());
        }

        private static final GroupLayout pointer_grab_end$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pointer_grab_end"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal pointer_grab_end
         * }
         */
        public static final GroupLayout pointer_grab_end$layout() {
            return pointer_grab_end$LAYOUT;
        }

        private static final long pointer_grab_end$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal pointer_grab_end
         * }
         */
        public static final long pointer_grab_end$offset() {
            return pointer_grab_end$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal pointer_grab_end
         * }
         */
        public static MemorySegment pointer_grab_end(MemorySegment struct) {
            return struct.asSlice(pointer_grab_end$OFFSET, pointer_grab_end$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal pointer_grab_end
         * }
         */
        public static void pointer_grab_end(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, pointer_grab_end$OFFSET, pointer_grab_end$LAYOUT.byteSize());
        }

        private static final GroupLayout keyboard_grab_begin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("keyboard_grab_begin"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal keyboard_grab_begin
         * }
         */
        public static final GroupLayout keyboard_grab_begin$layout() {
            return keyboard_grab_begin$LAYOUT;
        }

        private static final long keyboard_grab_begin$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal keyboard_grab_begin
         * }
         */
        public static final long keyboard_grab_begin$offset() {
            return keyboard_grab_begin$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal keyboard_grab_begin
         * }
         */
        public static MemorySegment keyboard_grab_begin(MemorySegment struct) {
            return struct.asSlice(keyboard_grab_begin$OFFSET, keyboard_grab_begin$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal keyboard_grab_begin
         * }
         */
        public static void keyboard_grab_begin(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, keyboard_grab_begin$OFFSET, keyboard_grab_begin$LAYOUT.byteSize());
        }

        private static final GroupLayout keyboard_grab_end$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("keyboard_grab_end"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal keyboard_grab_end
         * }
         */
        public static final GroupLayout keyboard_grab_end$layout() {
            return keyboard_grab_end$LAYOUT;
        }

        private static final long keyboard_grab_end$OFFSET = 48;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal keyboard_grab_end
         * }
         */
        public static final long keyboard_grab_end$offset() {
            return keyboard_grab_end$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal keyboard_grab_end
         * }
         */
        public static MemorySegment keyboard_grab_end(MemorySegment struct) {
            return struct.asSlice(keyboard_grab_end$OFFSET, keyboard_grab_end$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal keyboard_grab_end
         * }
         */
        public static void keyboard_grab_end(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, keyboard_grab_end$OFFSET, keyboard_grab_end$LAYOUT.byteSize());
        }

        private static final GroupLayout touch_grab_begin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("touch_grab_begin"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal touch_grab_begin
         * }
         */
        public static final GroupLayout touch_grab_begin$layout() {
            return touch_grab_begin$LAYOUT;
        }

        private static final long touch_grab_begin$OFFSET = 64;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal touch_grab_begin
         * }
         */
        public static final long touch_grab_begin$offset() {
            return touch_grab_begin$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal touch_grab_begin
         * }
         */
        public static MemorySegment touch_grab_begin(MemorySegment struct) {
            return struct.asSlice(touch_grab_begin$OFFSET, touch_grab_begin$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal touch_grab_begin
         * }
         */
        public static void touch_grab_begin(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, touch_grab_begin$OFFSET, touch_grab_begin$LAYOUT.byteSize());
        }

        private static final GroupLayout touch_grab_end$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("touch_grab_end"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal touch_grab_end
         * }
         */
        public static final GroupLayout touch_grab_end$layout() {
            return touch_grab_end$LAYOUT;
        }

        private static final long touch_grab_end$OFFSET = 80;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal touch_grab_end
         * }
         */
        public static final long touch_grab_end$offset() {
            return touch_grab_end$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal touch_grab_end
         * }
         */
        public static MemorySegment touch_grab_end(MemorySegment struct) {
            return struct.asSlice(touch_grab_end$OFFSET, touch_grab_end$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal touch_grab_end
         * }
         */
        public static void touch_grab_end(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, touch_grab_end$OFFSET, touch_grab_end$LAYOUT.byteSize());
        }

        private static final GroupLayout request_set_cursor$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("request_set_cursor"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_cursor
         * }
         */
        public static final GroupLayout request_set_cursor$layout() {
            return request_set_cursor$LAYOUT;
        }

        private static final long request_set_cursor$OFFSET = 96;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_cursor
         * }
         */
        public static final long request_set_cursor$offset() {
            return request_set_cursor$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_cursor
         * }
         */
        public static MemorySegment request_set_cursor(MemorySegment struct) {
            return struct.asSlice(request_set_cursor$OFFSET, request_set_cursor$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_cursor
         * }
         */
        public static void request_set_cursor(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, request_set_cursor$OFFSET, request_set_cursor$LAYOUT.byteSize());
        }

        private static final GroupLayout request_set_selection$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("request_set_selection"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_selection
         * }
         */
        public static final GroupLayout request_set_selection$layout() {
            return request_set_selection$LAYOUT;
        }

        private static final long request_set_selection$OFFSET = 112;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_selection
         * }
         */
        public static final long request_set_selection$offset() {
            return request_set_selection$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_selection
         * }
         */
        public static MemorySegment request_set_selection(MemorySegment struct) {
            return struct.asSlice(request_set_selection$OFFSET, request_set_selection$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_selection
         * }
         */
        public static void request_set_selection(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, request_set_selection$OFFSET, request_set_selection$LAYOUT.byteSize());
        }

        private static final GroupLayout set_selection$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("set_selection"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal set_selection
         * }
         */
        public static final GroupLayout set_selection$layout() {
            return set_selection$LAYOUT;
        }

        private static final long set_selection$OFFSET = 128;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal set_selection
         * }
         */
        public static final long set_selection$offset() {
            return set_selection$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal set_selection
         * }
         */
        public static MemorySegment set_selection(MemorySegment struct) {
            return struct.asSlice(set_selection$OFFSET, set_selection$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal set_selection
         * }
         */
        public static void set_selection(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, set_selection$OFFSET, set_selection$LAYOUT.byteSize());
        }

        private static final GroupLayout request_set_primary_selection$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("request_set_primary_selection"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_primary_selection
         * }
         */
        public static final GroupLayout request_set_primary_selection$layout() {
            return request_set_primary_selection$LAYOUT;
        }

        private static final long request_set_primary_selection$OFFSET = 144;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_primary_selection
         * }
         */
        public static final long request_set_primary_selection$offset() {
            return request_set_primary_selection$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_primary_selection
         * }
         */
        public static MemorySegment request_set_primary_selection(MemorySegment struct) {
            return struct.asSlice(request_set_primary_selection$OFFSET, request_set_primary_selection$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal request_set_primary_selection
         * }
         */
        public static void request_set_primary_selection(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, request_set_primary_selection$OFFSET, request_set_primary_selection$LAYOUT.byteSize());
        }

        private static final GroupLayout set_primary_selection$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("set_primary_selection"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal set_primary_selection
         * }
         */
        public static final GroupLayout set_primary_selection$layout() {
            return set_primary_selection$LAYOUT;
        }

        private static final long set_primary_selection$OFFSET = 160;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal set_primary_selection
         * }
         */
        public static final long set_primary_selection$offset() {
            return set_primary_selection$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal set_primary_selection
         * }
         */
        public static MemorySegment set_primary_selection(MemorySegment struct) {
            return struct.asSlice(set_primary_selection$OFFSET, set_primary_selection$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal set_primary_selection
         * }
         */
        public static void set_primary_selection(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, set_primary_selection$OFFSET, set_primary_selection$LAYOUT.byteSize());
        }

        private static final GroupLayout request_start_drag$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("request_start_drag"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal request_start_drag
         * }
         */
        public static final GroupLayout request_start_drag$layout() {
            return request_start_drag$LAYOUT;
        }

        private static final long request_start_drag$OFFSET = 176;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal request_start_drag
         * }
         */
        public static final long request_start_drag$offset() {
            return request_start_drag$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal request_start_drag
         * }
         */
        public static MemorySegment request_start_drag(MemorySegment struct) {
            return struct.asSlice(request_start_drag$OFFSET, request_start_drag$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal request_start_drag
         * }
         */
        public static void request_start_drag(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, request_start_drag$OFFSET, request_start_drag$LAYOUT.byteSize());
        }

        private static final GroupLayout start_drag$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("start_drag"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal start_drag
         * }
         */
        public static final GroupLayout start_drag$layout() {
            return start_drag$LAYOUT;
        }

        private static final long start_drag$OFFSET = 192;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal start_drag
         * }
         */
        public static final long start_drag$offset() {
            return start_drag$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal start_drag
         * }
         */
        public static MemorySegment start_drag(MemorySegment struct) {
            return struct.asSlice(start_drag$OFFSET, start_drag$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal start_drag
         * }
         */
        public static void start_drag(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, start_drag$OFFSET, start_drag$LAYOUT.byteSize());
        }

        private static final GroupLayout destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("destroy"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final GroupLayout destroy$layout() {
            return destroy$LAYOUT;
        }

        private static final long destroy$OFFSET = 208;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final long destroy$offset() {
            return destroy$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static MemorySegment destroy(MemorySegment struct) {
            return struct.asSlice(destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal pointer_grab_begin;
     *     struct wl_signal pointer_grab_end;
     *     struct wl_signal keyboard_grab_begin;
     *     struct wl_signal keyboard_grab_end;
     *     struct wl_signal touch_grab_begin;
     *     struct wl_signal touch_grab_end;
     *     struct wl_signal request_set_cursor;
     *     struct wl_signal request_set_selection;
     *     struct wl_signal set_selection;
     *     struct wl_signal request_set_primary_selection;
     *     struct wl_signal set_primary_selection;
     *     struct wl_signal request_start_drag;
     *     struct wl_signal start_drag;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 648;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal pointer_grab_begin;
     *     struct wl_signal pointer_grab_end;
     *     struct wl_signal keyboard_grab_begin;
     *     struct wl_signal keyboard_grab_end;
     *     struct wl_signal touch_grab_begin;
     *     struct wl_signal touch_grab_end;
     *     struct wl_signal request_set_cursor;
     *     struct wl_signal request_set_selection;
     *     struct wl_signal set_selection;
     *     struct wl_signal request_set_primary_selection;
     *     struct wl_signal set_primary_selection;
     *     struct wl_signal request_start_drag;
     *     struct wl_signal start_drag;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal pointer_grab_begin;
     *     struct wl_signal pointer_grab_end;
     *     struct wl_signal keyboard_grab_begin;
     *     struct wl_signal keyboard_grab_end;
     *     struct wl_signal touch_grab_begin;
     *     struct wl_signal touch_grab_end;
     *     struct wl_signal request_set_cursor;
     *     struct wl_signal request_set_selection;
     *     struct wl_signal set_selection;
     *     struct wl_signal request_set_primary_selection;
     *     struct wl_signal set_primary_selection;
     *     struct wl_signal request_start_drag;
     *     struct wl_signal start_drag;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal pointer_grab_begin;
     *     struct wl_signal pointer_grab_end;
     *     struct wl_signal keyboard_grab_begin;
     *     struct wl_signal keyboard_grab_end;
     *     struct wl_signal touch_grab_begin;
     *     struct wl_signal touch_grab_end;
     *     struct wl_signal request_set_cursor;
     *     struct wl_signal request_set_selection;
     *     struct wl_signal set_selection;
     *     struct wl_signal request_set_primary_selection;
     *     struct wl_signal set_primary_selection;
     *     struct wl_signal request_start_drag;
     *     struct wl_signal start_drag;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 872;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


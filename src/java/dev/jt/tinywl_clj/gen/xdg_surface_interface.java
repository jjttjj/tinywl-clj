// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct xdg_surface_interface {
 *     void (*destroy)(struct wl_client *, struct wl_resource *);
 *     void (*get_toplevel)(struct wl_client *, struct wl_resource *, uint32_t);
 *     void (*get_popup)(struct wl_client *, struct wl_resource *, uint32_t, struct wl_resource *, struct wl_resource *);
 *     void (*set_window_geometry)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t);
 *     void (*ack_configure)(struct wl_client *, struct wl_resource *, uint32_t);
 * }
 * }
 */
public class xdg_surface_interface {

    xdg_surface_interface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("destroy"),
        C.C_POINTER.withName("get_toplevel"),
        C.C_POINTER.withName("get_popup"),
        C.C_POINTER.withName("set_window_geometry"),
        C.C_POINTER.withName("ack_configure")
    ).withName("xdg_surface_interface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static class destroy {

        destroy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(destroy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(destroy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout destroy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final AddressLayout destroy$layout() {
        return destroy$LAYOUT;
    }

    private static final long destroy$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final long destroy$offset() {
        return destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static MemorySegment destroy(MemorySegment struct) {
        return struct.get(destroy$LAYOUT, destroy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(destroy$LAYOUT, destroy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_toplevel)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static class get_toplevel {

        get_toplevel() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(get_toplevel.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_toplevel.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_toplevel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_toplevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_toplevel)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final AddressLayout get_toplevel$layout() {
        return get_toplevel$LAYOUT;
    }

    private static final long get_toplevel$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_toplevel)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final long get_toplevel$offset() {
        return get_toplevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_toplevel)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static MemorySegment get_toplevel(MemorySegment struct) {
        return struct.get(get_toplevel$LAYOUT, get_toplevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_toplevel)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static void get_toplevel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_toplevel$LAYOUT, get_toplevel$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_popup)(struct wl_client *, struct wl_resource *, uint32_t, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static class get_popup {

        get_popup() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT,
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(get_popup.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_popup.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_popup$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_popup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_popup)(struct wl_client *, struct wl_resource *, uint32_t, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static final AddressLayout get_popup$layout() {
        return get_popup$LAYOUT;
    }

    private static final long get_popup$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_popup)(struct wl_client *, struct wl_resource *, uint32_t, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static final long get_popup$offset() {
        return get_popup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_popup)(struct wl_client *, struct wl_resource *, uint32_t, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static MemorySegment get_popup(MemorySegment struct) {
        return struct.get(get_popup$LAYOUT, get_popup$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_popup)(struct wl_client *, struct wl_resource *, uint32_t, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static void get_popup(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_popup$LAYOUT, get_popup$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_window_geometry)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)
     * }
     */
    public static class set_window_geometry {

        set_window_geometry() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, int _x4, int _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT,
            C.C_INT,
            C.C_INT,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_window_geometry.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_window_geometry.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, int _x4, int _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_window_geometry$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_window_geometry"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_window_geometry)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)
     * }
     */
    public static final AddressLayout set_window_geometry$layout() {
        return set_window_geometry$LAYOUT;
    }

    private static final long set_window_geometry$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_window_geometry)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)
     * }
     */
    public static final long set_window_geometry$offset() {
        return set_window_geometry$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_window_geometry)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)
     * }
     */
    public static MemorySegment set_window_geometry(MemorySegment struct) {
        return struct.get(set_window_geometry$LAYOUT, set_window_geometry$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_window_geometry)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)
     * }
     */
    public static void set_window_geometry(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_window_geometry$LAYOUT, set_window_geometry$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*ack_configure)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static class ack_configure {

        ack_configure() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(ack_configure.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ack_configure.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ack_configure$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ack_configure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*ack_configure)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final AddressLayout ack_configure$layout() {
        return ack_configure$LAYOUT;
    }

    private static final long ack_configure$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*ack_configure)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final long ack_configure$offset() {
        return ack_configure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*ack_configure)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static MemorySegment ack_configure(MemorySegment struct) {
        return struct.get(ack_configure$LAYOUT, ack_configure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*ack_configure)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static void ack_configure(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ack_configure$LAYOUT, ack_configure$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


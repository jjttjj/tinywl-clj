// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_output_cursor {
 *     struct wlr_output *output;
 *     double x;
 *     double y;
 *     bool enabled;
 *     bool visible;
 *     uint32_t width;
 *     uint32_t height;
 *     struct wlr_fbox src_box;
 *     enum wl_output_transform transform;
 *     int32_t hotspot_x;
 *     int32_t hotspot_y;
 *     struct wlr_texture *texture;
 *     bool own_texture;
 *     struct wl_list link;
 * }
 * }
 */
public class wlr_output_cursor {

    wlr_output_cursor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("output"),
        C.C_DOUBLE.withName("x"),
        C.C_DOUBLE.withName("y"),
        C.C_BOOL.withName("enabled"),
        C.C_BOOL.withName("visible"),
        MemoryLayout.paddingLayout(2),
        C.C_INT.withName("width"),
        C.C_INT.withName("height"),
        MemoryLayout.paddingLayout(4),
        wlr_fbox.layout().withName("src_box"),
        C.C_INT.withName("transform"),
        C.C_INT.withName("hotspot_x"),
        C.C_INT.withName("hotspot_y"),
        MemoryLayout.paddingLayout(4),
        C.C_POINTER.withName("texture"),
        C.C_BOOL.withName("own_texture"),
        MemoryLayout.paddingLayout(7),
        wl_list.layout().withName("link")
    ).withName("wlr_output_cursor");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout output$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("output"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_output *output
     * }
     */
    public static final AddressLayout output$layout() {
        return output$LAYOUT;
    }

    private static final long output$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_output *output
     * }
     */
    public static final long output$offset() {
        return output$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_output *output
     * }
     */
    public static MemorySegment output(MemorySegment struct) {
        return struct.get(output$LAYOUT, output$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_output *output
     * }
     */
    public static void output(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(output$LAYOUT, output$OFFSET, fieldValue);
    }

    private static final OfDouble x$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double x
     * }
     */
    public static final OfDouble x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double x
     * }
     */
    public static double x(MemorySegment struct) {
        return struct.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double x
     * }
     */
    public static void x(MemorySegment struct, double fieldValue) {
        struct.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final OfDouble y$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double y
     * }
     */
    public static final OfDouble y$layout() {
        return y$LAYOUT;
    }

    private static final long y$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double y
     * }
     */
    public static final long y$offset() {
        return y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double y
     * }
     */
    public static double y(MemorySegment struct) {
        return struct.get(y$LAYOUT, y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double y
     * }
     */
    public static void y(MemorySegment struct, double fieldValue) {
        struct.set(y$LAYOUT, y$OFFSET, fieldValue);
    }

    private static final OfBoolean enabled$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("enabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static final OfBoolean enabled$layout() {
        return enabled$LAYOUT;
    }

    private static final long enabled$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static final long enabled$offset() {
        return enabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static boolean enabled(MemorySegment struct) {
        return struct.get(enabled$LAYOUT, enabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static void enabled(MemorySegment struct, boolean fieldValue) {
        struct.set(enabled$LAYOUT, enabled$OFFSET, fieldValue);
    }

    private static final OfBoolean visible$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("visible"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool visible
     * }
     */
    public static final OfBoolean visible$layout() {
        return visible$LAYOUT;
    }

    private static final long visible$OFFSET = 25;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool visible
     * }
     */
    public static final long visible$offset() {
        return visible$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool visible
     * }
     */
    public static boolean visible(MemorySegment struct) {
        return struct.get(visible$LAYOUT, visible$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool visible
     * }
     */
    public static void visible(MemorySegment struct, boolean fieldValue) {
        struct.set(visible$LAYOUT, visible$OFFSET, fieldValue);
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final GroupLayout src_box$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("src_box"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_fbox src_box
     * }
     */
    public static final GroupLayout src_box$layout() {
        return src_box$LAYOUT;
    }

    private static final long src_box$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_fbox src_box
     * }
     */
    public static final long src_box$offset() {
        return src_box$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_fbox src_box
     * }
     */
    public static MemorySegment src_box(MemorySegment struct) {
        return struct.asSlice(src_box$OFFSET, src_box$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_fbox src_box
     * }
     */
    public static void src_box(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, src_box$OFFSET, src_box$LAYOUT.byteSize());
    }

    private static final OfInt transform$LAYOUT = (OfInt)$LAYOUT.select(groupElement("transform"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static final OfInt transform$layout() {
        return transform$LAYOUT;
    }

    private static final long transform$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static final long transform$offset() {
        return transform$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static int transform(MemorySegment struct) {
        return struct.get(transform$LAYOUT, transform$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static void transform(MemorySegment struct, int fieldValue) {
        struct.set(transform$LAYOUT, transform$OFFSET, fieldValue);
    }

    private static final OfInt hotspot_x$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hotspot_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t hotspot_x
     * }
     */
    public static final OfInt hotspot_x$layout() {
        return hotspot_x$LAYOUT;
    }

    private static final long hotspot_x$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t hotspot_x
     * }
     */
    public static final long hotspot_x$offset() {
        return hotspot_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t hotspot_x
     * }
     */
    public static int hotspot_x(MemorySegment struct) {
        return struct.get(hotspot_x$LAYOUT, hotspot_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t hotspot_x
     * }
     */
    public static void hotspot_x(MemorySegment struct, int fieldValue) {
        struct.set(hotspot_x$LAYOUT, hotspot_x$OFFSET, fieldValue);
    }

    private static final OfInt hotspot_y$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hotspot_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t hotspot_y
     * }
     */
    public static final OfInt hotspot_y$layout() {
        return hotspot_y$LAYOUT;
    }

    private static final long hotspot_y$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t hotspot_y
     * }
     */
    public static final long hotspot_y$offset() {
        return hotspot_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t hotspot_y
     * }
     */
    public static int hotspot_y(MemorySegment struct) {
        return struct.get(hotspot_y$LAYOUT, hotspot_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t hotspot_y
     * }
     */
    public static void hotspot_y(MemorySegment struct, int fieldValue) {
        struct.set(hotspot_y$LAYOUT, hotspot_y$OFFSET, fieldValue);
    }

    private static final AddressLayout texture$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("texture"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_texture *texture
     * }
     */
    public static final AddressLayout texture$layout() {
        return texture$LAYOUT;
    }

    private static final long texture$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_texture *texture
     * }
     */
    public static final long texture$offset() {
        return texture$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_texture *texture
     * }
     */
    public static MemorySegment texture(MemorySegment struct) {
        return struct.get(texture$LAYOUT, texture$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_texture *texture
     * }
     */
    public static void texture(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(texture$LAYOUT, texture$OFFSET, fieldValue);
    }

    private static final OfBoolean own_texture$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("own_texture"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool own_texture
     * }
     */
    public static final OfBoolean own_texture$layout() {
        return own_texture$LAYOUT;
    }

    private static final long own_texture$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool own_texture
     * }
     */
    public static final long own_texture$offset() {
        return own_texture$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool own_texture
     * }
     */
    public static boolean own_texture(MemorySegment struct) {
        return struct.get(own_texture$LAYOUT, own_texture$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool own_texture
     * }
     */
    public static void own_texture(MemorySegment struct, boolean fieldValue) {
        struct.set(own_texture$LAYOUT, own_texture$OFFSET, fieldValue);
    }

    private static final GroupLayout link$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final GroupLayout link$layout() {
        return link$LAYOUT;
    }

    private static final long link$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final long link$offset() {
        return link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static MemorySegment link(MemorySegment struct) {
        return struct.asSlice(link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static void link(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_drag_motion_event {
 *     struct wlr_drag *drag;
 *     uint32_t time;
 *     double sx;
 *     double sy;
 * }
 * }
 */
public class wlr_drag_motion_event {

    wlr_drag_motion_event() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("drag"),
        C.C_INT.withName("time"),
        MemoryLayout.paddingLayout(4),
        C.C_DOUBLE.withName("sx"),
        C.C_DOUBLE.withName("sy")
    ).withName("wlr_drag_motion_event");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout drag$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("drag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_drag *drag
     * }
     */
    public static final AddressLayout drag$layout() {
        return drag$LAYOUT;
    }

    private static final long drag$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_drag *drag
     * }
     */
    public static final long drag$offset() {
        return drag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_drag *drag
     * }
     */
    public static MemorySegment drag(MemorySegment struct) {
        return struct.get(drag$LAYOUT, drag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_drag *drag
     * }
     */
    public static void drag(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(drag$LAYOUT, drag$OFFSET, fieldValue);
    }

    private static final OfInt time$LAYOUT = (OfInt)$LAYOUT.select(groupElement("time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t time
     * }
     */
    public static final OfInt time$layout() {
        return time$LAYOUT;
    }

    private static final long time$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t time
     * }
     */
    public static final long time$offset() {
        return time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t time
     * }
     */
    public static int time(MemorySegment struct) {
        return struct.get(time$LAYOUT, time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t time
     * }
     */
    public static void time(MemorySegment struct, int fieldValue) {
        struct.set(time$LAYOUT, time$OFFSET, fieldValue);
    }

    private static final OfDouble sx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static final OfDouble sx$layout() {
        return sx$LAYOUT;
    }

    private static final long sx$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static final long sx$offset() {
        return sx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static double sx(MemorySegment struct) {
        return struct.get(sx$LAYOUT, sx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static void sx(MemorySegment struct, double fieldValue) {
        struct.set(sx$LAYOUT, sx$OFFSET, fieldValue);
    }

    private static final OfDouble sy$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static final OfDouble sy$layout() {
        return sy$LAYOUT;
    }

    private static final long sy$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static final long sy$offset() {
        return sy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static double sy(MemorySegment struct) {
        return struct.get(sy$LAYOUT, sy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static void sy(MemorySegment struct, double fieldValue) {
        struct.set(sy$LAYOUT, sy$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_surface {
 *     struct wl_resource *resource;
 *     struct wlr_renderer *renderer;
 *     struct wlr_client_buffer *buffer;
 *     pixman_region32_t buffer_damage;
 *     pixman_region32_t external_damage;
 *     pixman_region32_t opaque_region;
 *     pixman_region32_t input_region;
 *     struct wlr_surface_state current;
 *     struct wlr_surface_state pending;
 *     struct wl_list cached;
 *     bool mapped;
 *     const struct wlr_surface_role *role;
 *     struct wl_resource *role_resource;
 *     struct {
 *         struct wl_signal client_commit;
 *         struct wl_signal precommit;
 *         struct wl_signal commit;
 *         struct wl_signal map;
 *         struct wl_signal unmap;
 *         struct wl_signal new_subsurface;
 *         struct wl_signal destroy;
 *     } events;
 *     struct wl_list current_outputs;
 *     struct wlr_addon_set addons;
 *     void *data;
 *     struct wl_listener renderer_destroy;
 *     struct wl_listener role_resource_destroy;
 *     struct {
 *         int32_t scale;
 *         enum wl_output_transform transform;
 *         int width;
 *         int height;
 *         int buffer_width;
 *         int buffer_height;
 *     } previous;
 *     bool unmap_commit;
 *     bool opaque;
 *     bool has_buffer;
 *     int32_t preferred_buffer_scale;
 *     bool preferred_buffer_transform_sent;
 *     enum wl_output_transform preferred_buffer_transform;
 * }
 * }
 */
public class wlr_surface {

    wlr_surface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("resource"),
        C.C_POINTER.withName("renderer"),
        C.C_POINTER.withName("buffer"),
        pixman_region32.layout().withName("buffer_damage"),
        pixman_region32.layout().withName("external_damage"),
        pixman_region32.layout().withName("opaque_region"),
        pixman_region32.layout().withName("input_region"),
        wlr_surface_state.layout().withName("current"),
        wlr_surface_state.layout().withName("pending"),
        wl_list.layout().withName("cached"),
        C.C_BOOL.withName("mapped"),
        MemoryLayout.paddingLayout(7),
        C.C_POINTER.withName("role"),
        C.C_POINTER.withName("role_resource"),
        wlr_surface.events.layout().withName("events"),
        wl_list.layout().withName("current_outputs"),
        wlr_addon_set.layout().withName("addons"),
        C.C_POINTER.withName("data"),
        wl_listener.layout().withName("renderer_destroy"),
        wl_listener.layout().withName("role_resource_destroy"),
        wlr_surface.previous.layout().withName("previous"),
        C.C_BOOL.withName("unmap_commit"),
        C.C_BOOL.withName("opaque"),
        C.C_BOOL.withName("has_buffer"),
        MemoryLayout.paddingLayout(1),
        C.C_INT.withName("preferred_buffer_scale"),
        C.C_BOOL.withName("preferred_buffer_transform_sent"),
        MemoryLayout.paddingLayout(3),
        C.C_INT.withName("preferred_buffer_transform")
    ).withName("wlr_surface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout resource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("resource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static final AddressLayout resource$layout() {
        return resource$LAYOUT;
    }

    private static final long resource$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static final long resource$offset() {
        return resource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static MemorySegment resource(MemorySegment struct) {
        return struct.get(resource$LAYOUT, resource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static void resource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(resource$LAYOUT, resource$OFFSET, fieldValue);
    }

    private static final AddressLayout renderer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("renderer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_renderer *renderer
     * }
     */
    public static final AddressLayout renderer$layout() {
        return renderer$LAYOUT;
    }

    private static final long renderer$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_renderer *renderer
     * }
     */
    public static final long renderer$offset() {
        return renderer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_renderer *renderer
     * }
     */
    public static MemorySegment renderer(MemorySegment struct) {
        return struct.get(renderer$LAYOUT, renderer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_renderer *renderer
     * }
     */
    public static void renderer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(renderer$LAYOUT, renderer$OFFSET, fieldValue);
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_client_buffer *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_client_buffer *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_client_buffer *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_client_buffer *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final GroupLayout buffer_damage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("buffer_damage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t buffer_damage
     * }
     */
    public static final GroupLayout buffer_damage$layout() {
        return buffer_damage$LAYOUT;
    }

    private static final long buffer_damage$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t buffer_damage
     * }
     */
    public static final long buffer_damage$offset() {
        return buffer_damage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t buffer_damage
     * }
     */
    public static MemorySegment buffer_damage(MemorySegment struct) {
        return struct.asSlice(buffer_damage$OFFSET, buffer_damage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t buffer_damage
     * }
     */
    public static void buffer_damage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, buffer_damage$OFFSET, buffer_damage$LAYOUT.byteSize());
    }

    private static final GroupLayout external_damage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("external_damage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t external_damage
     * }
     */
    public static final GroupLayout external_damage$layout() {
        return external_damage$LAYOUT;
    }

    private static final long external_damage$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t external_damage
     * }
     */
    public static final long external_damage$offset() {
        return external_damage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t external_damage
     * }
     */
    public static MemorySegment external_damage(MemorySegment struct) {
        return struct.asSlice(external_damage$OFFSET, external_damage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t external_damage
     * }
     */
    public static void external_damage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, external_damage$OFFSET, external_damage$LAYOUT.byteSize());
    }

    private static final GroupLayout opaque_region$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("opaque_region"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t opaque_region
     * }
     */
    public static final GroupLayout opaque_region$layout() {
        return opaque_region$LAYOUT;
    }

    private static final long opaque_region$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t opaque_region
     * }
     */
    public static final long opaque_region$offset() {
        return opaque_region$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t opaque_region
     * }
     */
    public static MemorySegment opaque_region(MemorySegment struct) {
        return struct.asSlice(opaque_region$OFFSET, opaque_region$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t opaque_region
     * }
     */
    public static void opaque_region(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, opaque_region$OFFSET, opaque_region$LAYOUT.byteSize());
    }

    private static final GroupLayout input_region$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("input_region"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t input_region
     * }
     */
    public static final GroupLayout input_region$layout() {
        return input_region$LAYOUT;
    }

    private static final long input_region$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t input_region
     * }
     */
    public static final long input_region$offset() {
        return input_region$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t input_region
     * }
     */
    public static MemorySegment input_region(MemorySegment struct) {
        return struct.asSlice(input_region$OFFSET, input_region$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t input_region
     * }
     */
    public static void input_region(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, input_region$OFFSET, input_region$LAYOUT.byteSize());
    }

    private static final GroupLayout current$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("current"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface_state current
     * }
     */
    public static final GroupLayout current$layout() {
        return current$LAYOUT;
    }

    private static final long current$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface_state current
     * }
     */
    public static final long current$offset() {
        return current$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface_state current
     * }
     */
    public static MemorySegment current(MemorySegment struct) {
        return struct.asSlice(current$OFFSET, current$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface_state current
     * }
     */
    public static void current(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, current$OFFSET, current$LAYOUT.byteSize());
    }

    private static final GroupLayout pending$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pending"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface_state pending
     * }
     */
    public static final GroupLayout pending$layout() {
        return pending$LAYOUT;
    }

    private static final long pending$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface_state pending
     * }
     */
    public static final long pending$offset() {
        return pending$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface_state pending
     * }
     */
    public static MemorySegment pending(MemorySegment struct) {
        return struct.asSlice(pending$OFFSET, pending$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface_state pending
     * }
     */
    public static void pending(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pending$OFFSET, pending$LAYOUT.byteSize());
    }

    private static final GroupLayout cached$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cached"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list cached
     * }
     */
    public static final GroupLayout cached$layout() {
        return cached$LAYOUT;
    }

    private static final long cached$OFFSET = 648;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list cached
     * }
     */
    public static final long cached$offset() {
        return cached$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list cached
     * }
     */
    public static MemorySegment cached(MemorySegment struct) {
        return struct.asSlice(cached$OFFSET, cached$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list cached
     * }
     */
    public static void cached(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cached$OFFSET, cached$LAYOUT.byteSize());
    }

    private static final OfBoolean mapped$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("mapped"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool mapped
     * }
     */
    public static final OfBoolean mapped$layout() {
        return mapped$LAYOUT;
    }

    private static final long mapped$OFFSET = 664;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool mapped
     * }
     */
    public static final long mapped$offset() {
        return mapped$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool mapped
     * }
     */
    public static boolean mapped(MemorySegment struct) {
        return struct.get(mapped$LAYOUT, mapped$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool mapped
     * }
     */
    public static void mapped(MemorySegment struct, boolean fieldValue) {
        struct.set(mapped$LAYOUT, mapped$OFFSET, fieldValue);
    }

    private static final AddressLayout role$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("role"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct wlr_surface_role *role
     * }
     */
    public static final AddressLayout role$layout() {
        return role$LAYOUT;
    }

    private static final long role$OFFSET = 672;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct wlr_surface_role *role
     * }
     */
    public static final long role$offset() {
        return role$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct wlr_surface_role *role
     * }
     */
    public static MemorySegment role(MemorySegment struct) {
        return struct.get(role$LAYOUT, role$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct wlr_surface_role *role
     * }
     */
    public static void role(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(role$LAYOUT, role$OFFSET, fieldValue);
    }

    private static final AddressLayout role_resource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("role_resource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_resource *role_resource
     * }
     */
    public static final AddressLayout role_resource$layout() {
        return role_resource$LAYOUT;
    }

    private static final long role_resource$OFFSET = 680;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_resource *role_resource
     * }
     */
    public static final long role_resource$offset() {
        return role_resource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_resource *role_resource
     * }
     */
    public static MemorySegment role_resource(MemorySegment struct) {
        return struct.get(role_resource$LAYOUT, role_resource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_resource *role_resource
     * }
     */
    public static void role_resource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(role_resource$LAYOUT, role_resource$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal client_commit;
     *     struct wl_signal precommit;
     *     struct wl_signal commit;
     *     struct wl_signal map;
     *     struct wl_signal unmap;
     *     struct wl_signal new_subsurface;
     *     struct wl_signal destroy;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("client_commit"),
            wl_signal.layout().withName("precommit"),
            wl_signal.layout().withName("commit"),
            wl_signal.layout().withName("map"),
            wl_signal.layout().withName("unmap"),
            wl_signal.layout().withName("new_subsurface"),
            wl_signal.layout().withName("destroy")
        ).withName("$anon$175:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout client_commit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("client_commit"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal client_commit
         * }
         */
        public static final GroupLayout client_commit$layout() {
            return client_commit$LAYOUT;
        }

        private static final long client_commit$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal client_commit
         * }
         */
        public static final long client_commit$offset() {
            return client_commit$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal client_commit
         * }
         */
        public static MemorySegment client_commit(MemorySegment struct) {
            return struct.asSlice(client_commit$OFFSET, client_commit$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal client_commit
         * }
         */
        public static void client_commit(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, client_commit$OFFSET, client_commit$LAYOUT.byteSize());
        }

        private static final GroupLayout precommit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("precommit"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal precommit
         * }
         */
        public static final GroupLayout precommit$layout() {
            return precommit$LAYOUT;
        }

        private static final long precommit$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal precommit
         * }
         */
        public static final long precommit$offset() {
            return precommit$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal precommit
         * }
         */
        public static MemorySegment precommit(MemorySegment struct) {
            return struct.asSlice(precommit$OFFSET, precommit$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal precommit
         * }
         */
        public static void precommit(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, precommit$OFFSET, precommit$LAYOUT.byteSize());
        }

        private static final GroupLayout commit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("commit"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal commit
         * }
         */
        public static final GroupLayout commit$layout() {
            return commit$LAYOUT;
        }

        private static final long commit$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal commit
         * }
         */
        public static final long commit$offset() {
            return commit$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal commit
         * }
         */
        public static MemorySegment commit(MemorySegment struct) {
            return struct.asSlice(commit$OFFSET, commit$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal commit
         * }
         */
        public static void commit(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, commit$OFFSET, commit$LAYOUT.byteSize());
        }

        private static final GroupLayout map$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("map"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal map
         * }
         */
        public static final GroupLayout map$layout() {
            return map$LAYOUT;
        }

        private static final long map$OFFSET = 48;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal map
         * }
         */
        public static final long map$offset() {
            return map$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal map
         * }
         */
        public static MemorySegment map(MemorySegment struct) {
            return struct.asSlice(map$OFFSET, map$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal map
         * }
         */
        public static void map(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, map$OFFSET, map$LAYOUT.byteSize());
        }

        private static final GroupLayout unmap$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("unmap"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal unmap
         * }
         */
        public static final GroupLayout unmap$layout() {
            return unmap$LAYOUT;
        }

        private static final long unmap$OFFSET = 64;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal unmap
         * }
         */
        public static final long unmap$offset() {
            return unmap$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal unmap
         * }
         */
        public static MemorySegment unmap(MemorySegment struct) {
            return struct.asSlice(unmap$OFFSET, unmap$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal unmap
         * }
         */
        public static void unmap(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, unmap$OFFSET, unmap$LAYOUT.byteSize());
        }

        private static final GroupLayout new_subsurface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("new_subsurface"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal new_subsurface
         * }
         */
        public static final GroupLayout new_subsurface$layout() {
            return new_subsurface$LAYOUT;
        }

        private static final long new_subsurface$OFFSET = 80;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal new_subsurface
         * }
         */
        public static final long new_subsurface$offset() {
            return new_subsurface$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal new_subsurface
         * }
         */
        public static MemorySegment new_subsurface(MemorySegment struct) {
            return struct.asSlice(new_subsurface$OFFSET, new_subsurface$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal new_subsurface
         * }
         */
        public static void new_subsurface(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, new_subsurface$OFFSET, new_subsurface$LAYOUT.byteSize());
        }

        private static final GroupLayout destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("destroy"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final GroupLayout destroy$layout() {
            return destroy$LAYOUT;
        }

        private static final long destroy$OFFSET = 96;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final long destroy$offset() {
            return destroy$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static MemorySegment destroy(MemorySegment struct) {
            return struct.asSlice(destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal client_commit;
     *     struct wl_signal precommit;
     *     struct wl_signal commit;
     *     struct wl_signal map;
     *     struct wl_signal unmap;
     *     struct wl_signal new_subsurface;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 688;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal client_commit;
     *     struct wl_signal precommit;
     *     struct wl_signal commit;
     *     struct wl_signal map;
     *     struct wl_signal unmap;
     *     struct wl_signal new_subsurface;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal client_commit;
     *     struct wl_signal precommit;
     *     struct wl_signal commit;
     *     struct wl_signal map;
     *     struct wl_signal unmap;
     *     struct wl_signal new_subsurface;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal client_commit;
     *     struct wl_signal precommit;
     *     struct wl_signal commit;
     *     struct wl_signal map;
     *     struct wl_signal unmap;
     *     struct wl_signal new_subsurface;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final GroupLayout current_outputs$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("current_outputs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list current_outputs
     * }
     */
    public static final GroupLayout current_outputs$layout() {
        return current_outputs$LAYOUT;
    }

    private static final long current_outputs$OFFSET = 800;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list current_outputs
     * }
     */
    public static final long current_outputs$offset() {
        return current_outputs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list current_outputs
     * }
     */
    public static MemorySegment current_outputs(MemorySegment struct) {
        return struct.asSlice(current_outputs$OFFSET, current_outputs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list current_outputs
     * }
     */
    public static void current_outputs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, current_outputs$OFFSET, current_outputs$LAYOUT.byteSize());
    }

    private static final GroupLayout addons$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("addons"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_addon_set addons
     * }
     */
    public static final GroupLayout addons$layout() {
        return addons$LAYOUT;
    }

    private static final long addons$OFFSET = 816;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_addon_set addons
     * }
     */
    public static final long addons$offset() {
        return addons$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_addon_set addons
     * }
     */
    public static MemorySegment addons(MemorySegment struct) {
        return struct.asSlice(addons$OFFSET, addons$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_addon_set addons
     * }
     */
    public static void addons(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, addons$OFFSET, addons$LAYOUT.byteSize());
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 832;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final GroupLayout renderer_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("renderer_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener renderer_destroy
     * }
     */
    public static final GroupLayout renderer_destroy$layout() {
        return renderer_destroy$LAYOUT;
    }

    private static final long renderer_destroy$OFFSET = 840;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener renderer_destroy
     * }
     */
    public static final long renderer_destroy$offset() {
        return renderer_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener renderer_destroy
     * }
     */
    public static MemorySegment renderer_destroy(MemorySegment struct) {
        return struct.asSlice(renderer_destroy$OFFSET, renderer_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener renderer_destroy
     * }
     */
    public static void renderer_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, renderer_destroy$OFFSET, renderer_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout role_resource_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("role_resource_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener role_resource_destroy
     * }
     */
    public static final GroupLayout role_resource_destroy$layout() {
        return role_resource_destroy$LAYOUT;
    }

    private static final long role_resource_destroy$OFFSET = 864;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener role_resource_destroy
     * }
     */
    public static final long role_resource_destroy$offset() {
        return role_resource_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener role_resource_destroy
     * }
     */
    public static MemorySegment role_resource_destroy(MemorySegment struct) {
        return struct.asSlice(role_resource_destroy$OFFSET, role_resource_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener role_resource_destroy
     * }
     */
    public static void role_resource_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, role_resource_destroy$OFFSET, role_resource_destroy$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     int32_t scale;
     *     enum wl_output_transform transform;
     *     int width;
     *     int height;
     *     int buffer_width;
     *     int buffer_height;
     * }
     * }
     */
    public static class previous {

        previous() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            C.C_INT.withName("scale"),
            C.C_INT.withName("transform"),
            C.C_INT.withName("width"),
            C.C_INT.withName("height"),
            C.C_INT.withName("buffer_width"),
            C.C_INT.withName("buffer_height")
        ).withName("$anon$207:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt scale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("scale"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int32_t scale
         * }
         */
        public static final OfInt scale$layout() {
            return scale$LAYOUT;
        }

        private static final long scale$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int32_t scale
         * }
         */
        public static final long scale$offset() {
            return scale$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int32_t scale
         * }
         */
        public static int scale(MemorySegment struct) {
            return struct.get(scale$LAYOUT, scale$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int32_t scale
         * }
         */
        public static void scale(MemorySegment struct, int fieldValue) {
            struct.set(scale$LAYOUT, scale$OFFSET, fieldValue);
        }

        private static final OfInt transform$LAYOUT = (OfInt)$LAYOUT.select(groupElement("transform"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * enum wl_output_transform transform
         * }
         */
        public static final OfInt transform$layout() {
            return transform$LAYOUT;
        }

        private static final long transform$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * enum wl_output_transform transform
         * }
         */
        public static final long transform$offset() {
            return transform$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * enum wl_output_transform transform
         * }
         */
        public static int transform(MemorySegment struct) {
            return struct.get(transform$LAYOUT, transform$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * enum wl_output_transform transform
         * }
         */
        public static void transform(MemorySegment struct, int fieldValue) {
            struct.set(transform$LAYOUT, transform$OFFSET, fieldValue);
        }

        private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int width
         * }
         */
        public static final OfInt width$layout() {
            return width$LAYOUT;
        }

        private static final long width$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int width
         * }
         */
        public static final long width$offset() {
            return width$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int width
         * }
         */
        public static int width(MemorySegment struct) {
            return struct.get(width$LAYOUT, width$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int width
         * }
         */
        public static void width(MemorySegment struct, int fieldValue) {
            struct.set(width$LAYOUT, width$OFFSET, fieldValue);
        }

        private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int height
         * }
         */
        public static final OfInt height$layout() {
            return height$LAYOUT;
        }

        private static final long height$OFFSET = 12;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int height
         * }
         */
        public static final long height$offset() {
            return height$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int height
         * }
         */
        public static int height(MemorySegment struct) {
            return struct.get(height$LAYOUT, height$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int height
         * }
         */
        public static void height(MemorySegment struct, int fieldValue) {
            struct.set(height$LAYOUT, height$OFFSET, fieldValue);
        }

        private static final OfInt buffer_width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("buffer_width"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int buffer_width
         * }
         */
        public static final OfInt buffer_width$layout() {
            return buffer_width$LAYOUT;
        }

        private static final long buffer_width$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int buffer_width
         * }
         */
        public static final long buffer_width$offset() {
            return buffer_width$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int buffer_width
         * }
         */
        public static int buffer_width(MemorySegment struct) {
            return struct.get(buffer_width$LAYOUT, buffer_width$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int buffer_width
         * }
         */
        public static void buffer_width(MemorySegment struct, int fieldValue) {
            struct.set(buffer_width$LAYOUT, buffer_width$OFFSET, fieldValue);
        }

        private static final OfInt buffer_height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("buffer_height"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int buffer_height
         * }
         */
        public static final OfInt buffer_height$layout() {
            return buffer_height$LAYOUT;
        }

        private static final long buffer_height$OFFSET = 20;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int buffer_height
         * }
         */
        public static final long buffer_height$offset() {
            return buffer_height$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int buffer_height
         * }
         */
        public static int buffer_height(MemorySegment struct) {
            return struct.get(buffer_height$LAYOUT, buffer_height$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int buffer_height
         * }
         */
        public static void buffer_height(MemorySegment struct, int fieldValue) {
            struct.set(buffer_height$LAYOUT, buffer_height$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout previous$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("previous"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t scale;
     *     enum wl_output_transform transform;
     *     int width;
     *     int height;
     *     int buffer_width;
     *     int buffer_height;
     * } previous
     * }
     */
    public static final GroupLayout previous$layout() {
        return previous$LAYOUT;
    }

    private static final long previous$OFFSET = 888;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t scale;
     *     enum wl_output_transform transform;
     *     int width;
     *     int height;
     *     int buffer_width;
     *     int buffer_height;
     * } previous
     * }
     */
    public static final long previous$offset() {
        return previous$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t scale;
     *     enum wl_output_transform transform;
     *     int width;
     *     int height;
     *     int buffer_width;
     *     int buffer_height;
     * } previous
     * }
     */
    public static MemorySegment previous(MemorySegment struct) {
        return struct.asSlice(previous$OFFSET, previous$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t scale;
     *     enum wl_output_transform transform;
     *     int width;
     *     int height;
     *     int buffer_width;
     *     int buffer_height;
     * } previous
     * }
     */
    public static void previous(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, previous$OFFSET, previous$LAYOUT.byteSize());
    }

    private static final OfBoolean unmap_commit$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("unmap_commit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool unmap_commit
     * }
     */
    public static final OfBoolean unmap_commit$layout() {
        return unmap_commit$LAYOUT;
    }

    private static final long unmap_commit$OFFSET = 912;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool unmap_commit
     * }
     */
    public static final long unmap_commit$offset() {
        return unmap_commit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool unmap_commit
     * }
     */
    public static boolean unmap_commit(MemorySegment struct) {
        return struct.get(unmap_commit$LAYOUT, unmap_commit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool unmap_commit
     * }
     */
    public static void unmap_commit(MemorySegment struct, boolean fieldValue) {
        struct.set(unmap_commit$LAYOUT, unmap_commit$OFFSET, fieldValue);
    }

    private static final OfBoolean opaque$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("opaque"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool opaque
     * }
     */
    public static final OfBoolean opaque$layout() {
        return opaque$LAYOUT;
    }

    private static final long opaque$OFFSET = 913;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool opaque
     * }
     */
    public static final long opaque$offset() {
        return opaque$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool opaque
     * }
     */
    public static boolean opaque(MemorySegment struct) {
        return struct.get(opaque$LAYOUT, opaque$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool opaque
     * }
     */
    public static void opaque(MemorySegment struct, boolean fieldValue) {
        struct.set(opaque$LAYOUT, opaque$OFFSET, fieldValue);
    }

    private static final OfBoolean has_buffer$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("has_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool has_buffer
     * }
     */
    public static final OfBoolean has_buffer$layout() {
        return has_buffer$LAYOUT;
    }

    private static final long has_buffer$OFFSET = 914;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool has_buffer
     * }
     */
    public static final long has_buffer$offset() {
        return has_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool has_buffer
     * }
     */
    public static boolean has_buffer(MemorySegment struct) {
        return struct.get(has_buffer$LAYOUT, has_buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool has_buffer
     * }
     */
    public static void has_buffer(MemorySegment struct, boolean fieldValue) {
        struct.set(has_buffer$LAYOUT, has_buffer$OFFSET, fieldValue);
    }

    private static final OfInt preferred_buffer_scale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferred_buffer_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t preferred_buffer_scale
     * }
     */
    public static final OfInt preferred_buffer_scale$layout() {
        return preferred_buffer_scale$LAYOUT;
    }

    private static final long preferred_buffer_scale$OFFSET = 916;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t preferred_buffer_scale
     * }
     */
    public static final long preferred_buffer_scale$offset() {
        return preferred_buffer_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t preferred_buffer_scale
     * }
     */
    public static int preferred_buffer_scale(MemorySegment struct) {
        return struct.get(preferred_buffer_scale$LAYOUT, preferred_buffer_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t preferred_buffer_scale
     * }
     */
    public static void preferred_buffer_scale(MemorySegment struct, int fieldValue) {
        struct.set(preferred_buffer_scale$LAYOUT, preferred_buffer_scale$OFFSET, fieldValue);
    }

    private static final OfBoolean preferred_buffer_transform_sent$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("preferred_buffer_transform_sent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool preferred_buffer_transform_sent
     * }
     */
    public static final OfBoolean preferred_buffer_transform_sent$layout() {
        return preferred_buffer_transform_sent$LAYOUT;
    }

    private static final long preferred_buffer_transform_sent$OFFSET = 920;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool preferred_buffer_transform_sent
     * }
     */
    public static final long preferred_buffer_transform_sent$offset() {
        return preferred_buffer_transform_sent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool preferred_buffer_transform_sent
     * }
     */
    public static boolean preferred_buffer_transform_sent(MemorySegment struct) {
        return struct.get(preferred_buffer_transform_sent$LAYOUT, preferred_buffer_transform_sent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool preferred_buffer_transform_sent
     * }
     */
    public static void preferred_buffer_transform_sent(MemorySegment struct, boolean fieldValue) {
        struct.set(preferred_buffer_transform_sent$LAYOUT, preferred_buffer_transform_sent$OFFSET, fieldValue);
    }

    private static final OfInt preferred_buffer_transform$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferred_buffer_transform"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wl_output_transform preferred_buffer_transform
     * }
     */
    public static final OfInt preferred_buffer_transform$layout() {
        return preferred_buffer_transform$LAYOUT;
    }

    private static final long preferred_buffer_transform$OFFSET = 924;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wl_output_transform preferred_buffer_transform
     * }
     */
    public static final long preferred_buffer_transform$offset() {
        return preferred_buffer_transform$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wl_output_transform preferred_buffer_transform
     * }
     */
    public static int preferred_buffer_transform(MemorySegment struct) {
        return struct.get(preferred_buffer_transform$LAYOUT, preferred_buffer_transform$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wl_output_transform preferred_buffer_transform
     * }
     */
    public static void preferred_buffer_transform(MemorySegment struct, int fieldValue) {
        struct.set(preferred_buffer_transform$LAYOUT, preferred_buffer_transform$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


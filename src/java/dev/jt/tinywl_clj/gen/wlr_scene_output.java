// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_scene_output {
 *     struct wlr_output *output;
 *     struct wl_list link;
 *     struct wlr_scene *scene;
 *     struct wlr_addon addon;
 *     struct wlr_damage_ring damage_ring;
 *     int x;
 *     int y;
 *     struct {
 *         struct wl_signal destroy;
 *     } events;
 *     uint8_t index;
 *     bool prev_scanout;
 *     struct wl_listener output_commit;
 *     struct wl_listener output_damage;
 *     struct wl_listener output_needs_frame;
 *     struct wl_list damage_highlight_regions;
 *     struct wl_array render_list;
 * }
 * }
 */
public class wlr_scene_output {

    wlr_scene_output() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("output"),
        wl_list.layout().withName("link"),
        C.C_POINTER.withName("scene"),
        wlr_addon.layout().withName("addon"),
        wlr_damage_ring.layout().withName("damage_ring"),
        C.C_INT.withName("x"),
        C.C_INT.withName("y"),
        wlr_scene_output.events.layout().withName("events"),
        C.C_CHAR.withName("index"),
        C.C_BOOL.withName("prev_scanout"),
        MemoryLayout.paddingLayout(6),
        wl_listener.layout().withName("output_commit"),
        wl_listener.layout().withName("output_damage"),
        wl_listener.layout().withName("output_needs_frame"),
        wl_list.layout().withName("damage_highlight_regions"),
        wl_array.layout().withName("render_list")
    ).withName("wlr_scene_output");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout output$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("output"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_output *output
     * }
     */
    public static final AddressLayout output$layout() {
        return output$LAYOUT;
    }

    private static final long output$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_output *output
     * }
     */
    public static final long output$offset() {
        return output$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_output *output
     * }
     */
    public static MemorySegment output(MemorySegment struct) {
        return struct.get(output$LAYOUT, output$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_output *output
     * }
     */
    public static void output(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(output$LAYOUT, output$OFFSET, fieldValue);
    }

    private static final GroupLayout link$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final GroupLayout link$layout() {
        return link$LAYOUT;
    }

    private static final long link$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final long link$offset() {
        return link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static MemorySegment link(MemorySegment struct) {
        return struct.asSlice(link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static void link(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, link$OFFSET, link$LAYOUT.byteSize());
    }

    private static final AddressLayout scene$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("scene"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_scene *scene
     * }
     */
    public static final AddressLayout scene$layout() {
        return scene$LAYOUT;
    }

    private static final long scene$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_scene *scene
     * }
     */
    public static final long scene$offset() {
        return scene$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_scene *scene
     * }
     */
    public static MemorySegment scene(MemorySegment struct) {
        return struct.get(scene$LAYOUT, scene$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_scene *scene
     * }
     */
    public static void scene(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(scene$LAYOUT, scene$OFFSET, fieldValue);
    }

    private static final GroupLayout addon$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("addon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_addon addon
     * }
     */
    public static final GroupLayout addon$layout() {
        return addon$LAYOUT;
    }

    private static final long addon$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_addon addon
     * }
     */
    public static final long addon$offset() {
        return addon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_addon addon
     * }
     */
    public static MemorySegment addon(MemorySegment struct) {
        return struct.asSlice(addon$OFFSET, addon$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_addon addon
     * }
     */
    public static void addon(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, addon$OFFSET, addon$LAYOUT.byteSize());
    }

    private static final GroupLayout damage_ring$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("damage_ring"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_damage_ring damage_ring
     * }
     */
    public static final GroupLayout damage_ring$layout() {
        return damage_ring$LAYOUT;
    }

    private static final long damage_ring$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_damage_ring damage_ring
     * }
     */
    public static final long damage_ring$offset() {
        return damage_ring$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_damage_ring damage_ring
     * }
     */
    public static MemorySegment damage_ring(MemorySegment struct) {
        return struct.asSlice(damage_ring$OFFSET, damage_ring$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_damage_ring damage_ring
     * }
     */
    public static void damage_ring(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, damage_ring$OFFSET, damage_ring$LAYOUT.byteSize());
    }

    private static final OfInt x$LAYOUT = (OfInt)$LAYOUT.select(groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int x
     * }
     */
    public static final OfInt x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int x
     * }
     */
    public static int x(MemorySegment struct) {
        return struct.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int x
     * }
     */
    public static void x(MemorySegment struct, int fieldValue) {
        struct.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final OfInt y$LAYOUT = (OfInt)$LAYOUT.select(groupElement("y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int y
     * }
     */
    public static final OfInt y$layout() {
        return y$LAYOUT;
    }

    private static final long y$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int y
     * }
     */
    public static final long y$offset() {
        return y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int y
     * }
     */
    public static int y(MemorySegment struct) {
        return struct.get(y$LAYOUT, y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int y
     * }
     */
    public static void y(MemorySegment struct, int fieldValue) {
        struct.set(y$LAYOUT, y$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("destroy")
        ).withName("$anon$203:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("destroy"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final GroupLayout destroy$layout() {
            return destroy$LAYOUT;
        }

        private static final long destroy$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final long destroy$offset() {
            return destroy$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static MemorySegment destroy(MemorySegment struct) {
            return struct.asSlice(destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final OfByte index$LAYOUT = (OfByte)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t index
     * }
     */
    public static final OfByte index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t index
     * }
     */
    public static byte index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t index
     * }
     */
    public static void index(MemorySegment struct, byte fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final OfBoolean prev_scanout$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("prev_scanout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool prev_scanout
     * }
     */
    public static final OfBoolean prev_scanout$layout() {
        return prev_scanout$LAYOUT;
    }

    private static final long prev_scanout$OFFSET = 177;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool prev_scanout
     * }
     */
    public static final long prev_scanout$offset() {
        return prev_scanout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool prev_scanout
     * }
     */
    public static boolean prev_scanout(MemorySegment struct) {
        return struct.get(prev_scanout$LAYOUT, prev_scanout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool prev_scanout
     * }
     */
    public static void prev_scanout(MemorySegment struct, boolean fieldValue) {
        struct.set(prev_scanout$LAYOUT, prev_scanout$OFFSET, fieldValue);
    }

    private static final GroupLayout output_commit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("output_commit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener output_commit
     * }
     */
    public static final GroupLayout output_commit$layout() {
        return output_commit$LAYOUT;
    }

    private static final long output_commit$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener output_commit
     * }
     */
    public static final long output_commit$offset() {
        return output_commit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener output_commit
     * }
     */
    public static MemorySegment output_commit(MemorySegment struct) {
        return struct.asSlice(output_commit$OFFSET, output_commit$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener output_commit
     * }
     */
    public static void output_commit(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, output_commit$OFFSET, output_commit$LAYOUT.byteSize());
    }

    private static final GroupLayout output_damage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("output_damage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener output_damage
     * }
     */
    public static final GroupLayout output_damage$layout() {
        return output_damage$LAYOUT;
    }

    private static final long output_damage$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener output_damage
     * }
     */
    public static final long output_damage$offset() {
        return output_damage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener output_damage
     * }
     */
    public static MemorySegment output_damage(MemorySegment struct) {
        return struct.asSlice(output_damage$OFFSET, output_damage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener output_damage
     * }
     */
    public static void output_damage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, output_damage$OFFSET, output_damage$LAYOUT.byteSize());
    }

    private static final GroupLayout output_needs_frame$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("output_needs_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener output_needs_frame
     * }
     */
    public static final GroupLayout output_needs_frame$layout() {
        return output_needs_frame$LAYOUT;
    }

    private static final long output_needs_frame$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener output_needs_frame
     * }
     */
    public static final long output_needs_frame$offset() {
        return output_needs_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener output_needs_frame
     * }
     */
    public static MemorySegment output_needs_frame(MemorySegment struct) {
        return struct.asSlice(output_needs_frame$OFFSET, output_needs_frame$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener output_needs_frame
     * }
     */
    public static void output_needs_frame(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, output_needs_frame$OFFSET, output_needs_frame$LAYOUT.byteSize());
    }

    private static final GroupLayout damage_highlight_regions$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("damage_highlight_regions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list damage_highlight_regions
     * }
     */
    public static final GroupLayout damage_highlight_regions$layout() {
        return damage_highlight_regions$LAYOUT;
    }

    private static final long damage_highlight_regions$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list damage_highlight_regions
     * }
     */
    public static final long damage_highlight_regions$offset() {
        return damage_highlight_regions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list damage_highlight_regions
     * }
     */
    public static MemorySegment damage_highlight_regions(MemorySegment struct) {
        return struct.asSlice(damage_highlight_regions$OFFSET, damage_highlight_regions$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list damage_highlight_regions
     * }
     */
    public static void damage_highlight_regions(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, damage_highlight_regions$OFFSET, damage_highlight_regions$LAYOUT.byteSize());
    }

    private static final GroupLayout render_list$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("render_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_array render_list
     * }
     */
    public static final GroupLayout render_list$layout() {
        return render_list$LAYOUT;
    }

    private static final long render_list$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_array render_list
     * }
     */
    public static final long render_list$offset() {
        return render_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_array render_list
     * }
     */
    public static MemorySegment render_list(MemorySegment struct) {
        return struct.asSlice(render_list$OFFSET, render_list$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_array render_list
     * }
     */
    public static void render_list(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, render_list$OFFSET, render_list$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


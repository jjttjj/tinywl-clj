// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct pixman_line_fixed {
 *     pixman_point_fixed_t p1;
 *     pixman_point_fixed_t p2;
 * }
 * }
 */
public class pixman_line_fixed {

    pixman_line_fixed() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        pixman_point_fixed.layout().withName("p1"),
        pixman_point_fixed.layout().withName("p2")
    ).withName("pixman_line_fixed");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout p1$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("p1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_point_fixed_t p1
     * }
     */
    public static final GroupLayout p1$layout() {
        return p1$LAYOUT;
    }

    private static final long p1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_point_fixed_t p1
     * }
     */
    public static final long p1$offset() {
        return p1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_point_fixed_t p1
     * }
     */
    public static MemorySegment p1(MemorySegment struct) {
        return struct.asSlice(p1$OFFSET, p1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_point_fixed_t p1
     * }
     */
    public static void p1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, p1$OFFSET, p1$LAYOUT.byteSize());
    }

    private static final GroupLayout p2$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("p2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_point_fixed_t p2
     * }
     */
    public static final GroupLayout p2$layout() {
        return p2$LAYOUT;
    }

    private static final long p2$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_point_fixed_t p2
     * }
     */
    public static final long p2$offset() {
        return p2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_point_fixed_t p2
     * }
     */
    public static MemorySegment p2(MemorySegment struct) {
        return struct.asSlice(p2$OFFSET, p2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_point_fixed_t p2
     * }
     */
    public static void p2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, p2$OFFSET, p2$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


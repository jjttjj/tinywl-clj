// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wl_interface {
 *     const char *name;
 *     int version;
 *     int method_count;
 *     const struct wl_message *methods;
 *     int event_count;
 *     const struct wl_message *events;
 * }
 * }
 */
public class wl_interface {

    wl_interface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("name"),
        C.C_INT.withName("version"),
        C.C_INT.withName("method_count"),
        C.C_POINTER.withName("methods"),
        C.C_INT.withName("event_count"),
        MemoryLayout.paddingLayout(4),
        C.C_POINTER.withName("events")
    ).withName("wl_interface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt method_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("method_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int method_count
     * }
     */
    public static final OfInt method_count$layout() {
        return method_count$LAYOUT;
    }

    private static final long method_count$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int method_count
     * }
     */
    public static final long method_count$offset() {
        return method_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int method_count
     * }
     */
    public static int method_count(MemorySegment struct) {
        return struct.get(method_count$LAYOUT, method_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int method_count
     * }
     */
    public static void method_count(MemorySegment struct, int fieldValue) {
        struct.set(method_count$LAYOUT, method_count$OFFSET, fieldValue);
    }

    private static final AddressLayout methods$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("methods"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct wl_message *methods
     * }
     */
    public static final AddressLayout methods$layout() {
        return methods$LAYOUT;
    }

    private static final long methods$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct wl_message *methods
     * }
     */
    public static final long methods$offset() {
        return methods$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct wl_message *methods
     * }
     */
    public static MemorySegment methods(MemorySegment struct) {
        return struct.get(methods$LAYOUT, methods$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct wl_message *methods
     * }
     */
    public static void methods(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(methods$LAYOUT, methods$OFFSET, fieldValue);
    }

    private static final OfInt event_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("event_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int event_count
     * }
     */
    public static final OfInt event_count$layout() {
        return event_count$LAYOUT;
    }

    private static final long event_count$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int event_count
     * }
     */
    public static final long event_count$offset() {
        return event_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int event_count
     * }
     */
    public static int event_count(MemorySegment struct) {
        return struct.get(event_count$LAYOUT, event_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int event_count
     * }
     */
    public static void event_count(MemorySegment struct, int fieldValue) {
        struct.set(event_count$LAYOUT, event_count$OFFSET, fieldValue);
    }

    private static final AddressLayout events$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct wl_message *events
     * }
     */
    public static final AddressLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct wl_message *events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct wl_message *events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.get(events$LAYOUT, events$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct wl_message *events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(events$LAYOUT, events$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


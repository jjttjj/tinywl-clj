// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_touch_grab_interface {
 *     uint32_t (*down)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *);
 *     void (*up)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *);
 *     void (*motion)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *);
 *     void (*enter)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *);
 *     void (*frame)(struct wlr_seat_touch_grab *);
 *     void (*cancel)(struct wlr_seat_touch_grab *);
 *     void (*wl_cancel)(struct wlr_seat_touch_grab *, struct wlr_surface *);
 * }
 * }
 */
public class wlr_touch_grab_interface {

    wlr_touch_grab_interface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("down"),
        C.C_POINTER.withName("up"),
        C.C_POINTER.withName("motion"),
        C.C_POINTER.withName("enter"),
        C.C_POINTER.withName("frame"),
        C.C_POINTER.withName("cancel"),
        C.C_POINTER.withName("wl_cancel")
    ).withName("wlr_touch_grab_interface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * uint32_t (*down)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static class down {

        down() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            C.C_INT,
            C.C_POINTER,
            C.C_INT,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(down.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(down.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout down$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("down"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t (*down)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static final AddressLayout down$layout() {
        return down$LAYOUT;
    }

    private static final long down$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t (*down)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static final long down$offset() {
        return down$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t (*down)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static MemorySegment down(MemorySegment struct) {
        return struct.get(down$LAYOUT, down$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t (*down)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static void down(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(down$LAYOUT, down$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*up)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static class up {

        up() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_INT,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(up.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(up.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout up$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("up"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*up)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static final AddressLayout up$layout() {
        return up$LAYOUT;
    }

    private static final long up$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*up)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static final long up$offset() {
        return up$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*up)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static MemorySegment up(MemorySegment struct) {
        return struct.get(up$LAYOUT, up$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*up)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static void up(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(up$LAYOUT, up$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*motion)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static class motion {

        motion() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_INT,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(motion.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(motion.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout motion$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("motion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*motion)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static final AddressLayout motion$layout() {
        return motion$LAYOUT;
    }

    private static final long motion$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*motion)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static final long motion$offset() {
        return motion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*motion)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static MemorySegment motion(MemorySegment struct) {
        return struct.get(motion$LAYOUT, motion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*motion)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static void motion(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(motion$LAYOUT, motion$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*enter)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static class enter {

        enter() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_INT,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(enter.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(enter.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout enter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("enter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*enter)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static final AddressLayout enter$layout() {
        return enter$LAYOUT;
    }

    private static final long enter$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*enter)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static final long enter$offset() {
        return enter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*enter)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static MemorySegment enter(MemorySegment struct) {
        return struct.get(enter$LAYOUT, enter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*enter)(struct wlr_seat_touch_grab *, uint32_t, struct wlr_touch_point *)
     * }
     */
    public static void enter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(enter$LAYOUT, enter$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*frame)(struct wlr_seat_touch_grab *)
     * }
     */
    public static class frame {

        frame() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(frame.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(frame.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout frame$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*frame)(struct wlr_seat_touch_grab *)
     * }
     */
    public static final AddressLayout frame$layout() {
        return frame$LAYOUT;
    }

    private static final long frame$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*frame)(struct wlr_seat_touch_grab *)
     * }
     */
    public static final long frame$offset() {
        return frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*frame)(struct wlr_seat_touch_grab *)
     * }
     */
    public static MemorySegment frame(MemorySegment struct) {
        return struct.get(frame$LAYOUT, frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*frame)(struct wlr_seat_touch_grab *)
     * }
     */
    public static void frame(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(frame$LAYOUT, frame$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*cancel)(struct wlr_seat_touch_grab *)
     * }
     */
    public static class cancel {

        cancel() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(cancel.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(cancel.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout cancel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cancel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*cancel)(struct wlr_seat_touch_grab *)
     * }
     */
    public static final AddressLayout cancel$layout() {
        return cancel$LAYOUT;
    }

    private static final long cancel$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*cancel)(struct wlr_seat_touch_grab *)
     * }
     */
    public static final long cancel$offset() {
        return cancel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*cancel)(struct wlr_seat_touch_grab *)
     * }
     */
    public static MemorySegment cancel(MemorySegment struct) {
        return struct.get(cancel$LAYOUT, cancel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*cancel)(struct wlr_seat_touch_grab *)
     * }
     */
    public static void cancel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cancel$LAYOUT, cancel$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*wl_cancel)(struct wlr_seat_touch_grab *, struct wlr_surface *)
     * }
     */
    public static class wl_cancel {

        wl_cancel() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(wl_cancel.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(wl_cancel.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout wl_cancel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wl_cancel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*wl_cancel)(struct wlr_seat_touch_grab *, struct wlr_surface *)
     * }
     */
    public static final AddressLayout wl_cancel$layout() {
        return wl_cancel$LAYOUT;
    }

    private static final long wl_cancel$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*wl_cancel)(struct wlr_seat_touch_grab *, struct wlr_surface *)
     * }
     */
    public static final long wl_cancel$offset() {
        return wl_cancel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*wl_cancel)(struct wlr_seat_touch_grab *, struct wlr_surface *)
     * }
     */
    public static MemorySegment wl_cancel(MemorySegment struct) {
        return struct.get(wl_cancel$LAYOUT, wl_cancel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*wl_cancel)(struct wlr_seat_touch_grab *, struct wlr_surface *)
     * }
     */
    public static void wl_cancel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wl_cancel$LAYOUT, wl_cancel$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


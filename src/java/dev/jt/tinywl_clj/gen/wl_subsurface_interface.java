// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wl_subsurface_interface {
 *     void (*destroy)(struct wl_client *, struct wl_resource *);
 *     void (*set_position)(struct wl_client *, struct wl_resource *, int32_t, int32_t);
 *     void (*place_above)(struct wl_client *, struct wl_resource *, struct wl_resource *);
 *     void (*place_below)(struct wl_client *, struct wl_resource *, struct wl_resource *);
 *     void (*set_sync)(struct wl_client *, struct wl_resource *);
 *     void (*set_desync)(struct wl_client *, struct wl_resource *);
 * }
 * }
 */
public class wl_subsurface_interface {

    wl_subsurface_interface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("destroy"),
        C.C_POINTER.withName("set_position"),
        C.C_POINTER.withName("place_above"),
        C.C_POINTER.withName("place_below"),
        C.C_POINTER.withName("set_sync"),
        C.C_POINTER.withName("set_desync")
    ).withName("wl_subsurface_interface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static class destroy {

        destroy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(destroy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(destroy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout destroy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final AddressLayout destroy$layout() {
        return destroy$LAYOUT;
    }

    private static final long destroy$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final long destroy$offset() {
        return destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static MemorySegment destroy(MemorySegment struct) {
        return struct.get(destroy$LAYOUT, destroy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(destroy$LAYOUT, destroy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_position)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static class set_position {

        set_position() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_position.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_position.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_position$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_position)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static final AddressLayout set_position$layout() {
        return set_position$LAYOUT;
    }

    private static final long set_position$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_position)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static final long set_position$offset() {
        return set_position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_position)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static MemorySegment set_position(MemorySegment struct) {
        return struct.get(set_position$LAYOUT, set_position$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_position)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static void set_position(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_position$LAYOUT, set_position$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*place_above)(struct wl_client *, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static class place_above {

        place_above() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(place_above.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(place_above.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout place_above$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("place_above"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*place_above)(struct wl_client *, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static final AddressLayout place_above$layout() {
        return place_above$LAYOUT;
    }

    private static final long place_above$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*place_above)(struct wl_client *, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static final long place_above$offset() {
        return place_above$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*place_above)(struct wl_client *, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static MemorySegment place_above(MemorySegment struct) {
        return struct.get(place_above$LAYOUT, place_above$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*place_above)(struct wl_client *, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static void place_above(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(place_above$LAYOUT, place_above$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*place_below)(struct wl_client *, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static class place_below {

        place_below() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(place_below.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(place_below.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout place_below$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("place_below"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*place_below)(struct wl_client *, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static final AddressLayout place_below$layout() {
        return place_below$LAYOUT;
    }

    private static final long place_below$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*place_below)(struct wl_client *, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static final long place_below$offset() {
        return place_below$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*place_below)(struct wl_client *, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static MemorySegment place_below(MemorySegment struct) {
        return struct.get(place_below$LAYOUT, place_below$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*place_below)(struct wl_client *, struct wl_resource *, struct wl_resource *)
     * }
     */
    public static void place_below(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(place_below$LAYOUT, place_below$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_sync)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static class set_sync {

        set_sync() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_sync.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_sync.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_sync$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_sync"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_sync)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final AddressLayout set_sync$layout() {
        return set_sync$LAYOUT;
    }

    private static final long set_sync$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_sync)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final long set_sync$offset() {
        return set_sync$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_sync)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static MemorySegment set_sync(MemorySegment struct) {
        return struct.get(set_sync$LAYOUT, set_sync$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_sync)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static void set_sync(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_sync$LAYOUT, set_sync$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_desync)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static class set_desync {

        set_desync() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_desync.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_desync.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_desync$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_desync"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_desync)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final AddressLayout set_desync$layout() {
        return set_desync$LAYOUT;
    }

    private static final long set_desync$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_desync)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final long set_desync$offset() {
        return set_desync$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_desync)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static MemorySegment set_desync(MemorySegment struct) {
        return struct.get(set_desync$LAYOUT, set_desync$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_desync)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static void set_desync(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_desync$LAYOUT, set_desync$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


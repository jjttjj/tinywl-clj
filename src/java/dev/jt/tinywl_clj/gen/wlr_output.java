// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_output {
 *     const struct wlr_output_impl *impl;
 *     struct wlr_backend *backend;
 *     struct wl_display *display;
 *     struct wl_global *global;
 *     struct wl_list resources;
 *     char *name;
 *     char *description;
 *     char *make;
 *     char *model;
 *     char *serial;
 *     int32_t phys_width;
 *     int32_t phys_height;
 *     struct wl_list modes;
 *     struct wlr_output_mode *current_mode;
 *     int32_t width;
 *     int32_t height;
 *     int32_t refresh;
 *     bool enabled;
 *     float scale;
 *     enum wl_output_subpixel subpixel;
 *     enum wl_output_transform transform;
 *     enum wlr_output_adaptive_sync_status adaptive_sync_status;
 *     uint32_t render_format;
 *     bool needs_frame;
 *     bool frame_pending;
 *     float transform_matrix[9];
 *     bool non_desktop;
 *     struct wlr_output_state pending;
 *     uint32_t commit_seq;
 *     struct {
 *         struct wl_signal frame;
 *         struct wl_signal damage;
 *         struct wl_signal needs_frame;
 *         struct wl_signal precommit;
 *         struct wl_signal commit;
 *         struct wl_signal present;
 *         struct wl_signal bind;
 *         struct wl_signal description;
 *         struct wl_signal request_state;
 *         struct wl_signal destroy;
 *     } events;
 *     struct wl_event_source *idle_frame;
 *     struct wl_event_source *idle_done;
 *     int attach_render_locks;
 *     struct wl_list cursors;
 *     struct wlr_output_cursor *hardware_cursor;
 *     struct wlr_swapchain *cursor_swapchain;
 *     struct wlr_buffer *cursor_front_buffer;
 *     int software_cursor_locks;
 *     struct wl_list layers;
 *     struct wlr_allocator *allocator;
 *     struct wlr_renderer *renderer;
 *     struct wlr_swapchain *swapchain;
 *     struct wlr_buffer *back_buffer;
 *     struct wl_listener display_destroy;
 *     struct wlr_addon_set addons;
 *     void *data;
 * }
 * }
 */
public class wlr_output {

    wlr_output() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("impl"),
        C.C_POINTER.withName("backend"),
        C.C_POINTER.withName("display"),
        C.C_POINTER.withName("global"),
        wl_list.layout().withName("resources"),
        C.C_POINTER.withName("name"),
        C.C_POINTER.withName("description"),
        C.C_POINTER.withName("make"),
        C.C_POINTER.withName("model"),
        C.C_POINTER.withName("serial"),
        C.C_INT.withName("phys_width"),
        C.C_INT.withName("phys_height"),
        wl_list.layout().withName("modes"),
        C.C_POINTER.withName("current_mode"),
        C.C_INT.withName("width"),
        C.C_INT.withName("height"),
        C.C_INT.withName("refresh"),
        C.C_BOOL.withName("enabled"),
        MemoryLayout.paddingLayout(3),
        C.C_FLOAT.withName("scale"),
        C.C_INT.withName("subpixel"),
        C.C_INT.withName("transform"),
        C.C_INT.withName("adaptive_sync_status"),
        C.C_INT.withName("render_format"),
        C.C_BOOL.withName("needs_frame"),
        C.C_BOOL.withName("frame_pending"),
        MemoryLayout.paddingLayout(2),
        MemoryLayout.sequenceLayout(9, C.C_FLOAT).withName("transform_matrix"),
        C.C_BOOL.withName("non_desktop"),
        MemoryLayout.paddingLayout(3),
        wlr_output_state.layout().withName("pending"),
        C.C_INT.withName("commit_seq"),
        MemoryLayout.paddingLayout(4),
        wlr_output.events.layout().withName("events"),
        C.C_POINTER.withName("idle_frame"),
        C.C_POINTER.withName("idle_done"),
        C.C_INT.withName("attach_render_locks"),
        MemoryLayout.paddingLayout(4),
        wl_list.layout().withName("cursors"),
        C.C_POINTER.withName("hardware_cursor"),
        C.C_POINTER.withName("cursor_swapchain"),
        C.C_POINTER.withName("cursor_front_buffer"),
        C.C_INT.withName("software_cursor_locks"),
        MemoryLayout.paddingLayout(4),
        wl_list.layout().withName("layers"),
        C.C_POINTER.withName("allocator"),
        C.C_POINTER.withName("renderer"),
        C.C_POINTER.withName("swapchain"),
        C.C_POINTER.withName("back_buffer"),
        wl_listener.layout().withName("display_destroy"),
        wlr_addon_set.layout().withName("addons"),
        C.C_POINTER.withName("data")
    ).withName("wlr_output");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout impl$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("impl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct wlr_output_impl *impl
     * }
     */
    public static final AddressLayout impl$layout() {
        return impl$LAYOUT;
    }

    private static final long impl$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct wlr_output_impl *impl
     * }
     */
    public static final long impl$offset() {
        return impl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct wlr_output_impl *impl
     * }
     */
    public static MemorySegment impl(MemorySegment struct) {
        return struct.get(impl$LAYOUT, impl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct wlr_output_impl *impl
     * }
     */
    public static void impl(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(impl$LAYOUT, impl$OFFSET, fieldValue);
    }

    private static final AddressLayout backend$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("backend"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_backend *backend
     * }
     */
    public static final AddressLayout backend$layout() {
        return backend$LAYOUT;
    }

    private static final long backend$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_backend *backend
     * }
     */
    public static final long backend$offset() {
        return backend$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_backend *backend
     * }
     */
    public static MemorySegment backend(MemorySegment struct) {
        return struct.get(backend$LAYOUT, backend$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_backend *backend
     * }
     */
    public static void backend(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(backend$LAYOUT, backend$OFFSET, fieldValue);
    }

    private static final AddressLayout display$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("display"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_display *display
     * }
     */
    public static final AddressLayout display$layout() {
        return display$LAYOUT;
    }

    private static final long display$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_display *display
     * }
     */
    public static final long display$offset() {
        return display$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_display *display
     * }
     */
    public static MemorySegment display(MemorySegment struct) {
        return struct.get(display$LAYOUT, display$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_display *display
     * }
     */
    public static void display(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(display$LAYOUT, display$OFFSET, fieldValue);
    }

    private static final AddressLayout global$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("global"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static final AddressLayout global$layout() {
        return global$LAYOUT;
    }

    private static final long global$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static final long global$offset() {
        return global$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static MemorySegment global(MemorySegment struct) {
        return struct.get(global$LAYOUT, global$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static void global(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(global$LAYOUT, global$OFFSET, fieldValue);
    }

    private static final GroupLayout resources$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("resources"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list resources
     * }
     */
    public static final GroupLayout resources$layout() {
        return resources$LAYOUT;
    }

    private static final long resources$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list resources
     * }
     */
    public static final long resources$offset() {
        return resources$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list resources
     * }
     */
    public static MemorySegment resources(MemorySegment struct) {
        return struct.asSlice(resources$OFFSET, resources$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list resources
     * }
     */
    public static void resources(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, resources$OFFSET, resources$LAYOUT.byteSize());
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    private static final AddressLayout make$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("make"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *make
     * }
     */
    public static final AddressLayout make$layout() {
        return make$LAYOUT;
    }

    private static final long make$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *make
     * }
     */
    public static final long make$offset() {
        return make$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *make
     * }
     */
    public static MemorySegment make(MemorySegment struct) {
        return struct.get(make$LAYOUT, make$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *make
     * }
     */
    public static void make(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(make$LAYOUT, make$OFFSET, fieldValue);
    }

    private static final AddressLayout model$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("model"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *model
     * }
     */
    public static final AddressLayout model$layout() {
        return model$LAYOUT;
    }

    private static final long model$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *model
     * }
     */
    public static final long model$offset() {
        return model$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *model
     * }
     */
    public static MemorySegment model(MemorySegment struct) {
        return struct.get(model$LAYOUT, model$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *model
     * }
     */
    public static void model(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(model$LAYOUT, model$OFFSET, fieldValue);
    }

    private static final AddressLayout serial$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("serial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *serial
     * }
     */
    public static final AddressLayout serial$layout() {
        return serial$LAYOUT;
    }

    private static final long serial$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *serial
     * }
     */
    public static final long serial$offset() {
        return serial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *serial
     * }
     */
    public static MemorySegment serial(MemorySegment struct) {
        return struct.get(serial$LAYOUT, serial$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *serial
     * }
     */
    public static void serial(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(serial$LAYOUT, serial$OFFSET, fieldValue);
    }

    private static final OfInt phys_width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("phys_width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t phys_width
     * }
     */
    public static final OfInt phys_width$layout() {
        return phys_width$LAYOUT;
    }

    private static final long phys_width$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t phys_width
     * }
     */
    public static final long phys_width$offset() {
        return phys_width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t phys_width
     * }
     */
    public static int phys_width(MemorySegment struct) {
        return struct.get(phys_width$LAYOUT, phys_width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t phys_width
     * }
     */
    public static void phys_width(MemorySegment struct, int fieldValue) {
        struct.set(phys_width$LAYOUT, phys_width$OFFSET, fieldValue);
    }

    private static final OfInt phys_height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("phys_height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t phys_height
     * }
     */
    public static final OfInt phys_height$layout() {
        return phys_height$LAYOUT;
    }

    private static final long phys_height$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t phys_height
     * }
     */
    public static final long phys_height$offset() {
        return phys_height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t phys_height
     * }
     */
    public static int phys_height(MemorySegment struct) {
        return struct.get(phys_height$LAYOUT, phys_height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t phys_height
     * }
     */
    public static void phys_height(MemorySegment struct, int fieldValue) {
        struct.set(phys_height$LAYOUT, phys_height$OFFSET, fieldValue);
    }

    private static final GroupLayout modes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("modes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list modes
     * }
     */
    public static final GroupLayout modes$layout() {
        return modes$LAYOUT;
    }

    private static final long modes$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list modes
     * }
     */
    public static final long modes$offset() {
        return modes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list modes
     * }
     */
    public static MemorySegment modes(MemorySegment struct) {
        return struct.asSlice(modes$OFFSET, modes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list modes
     * }
     */
    public static void modes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, modes$OFFSET, modes$LAYOUT.byteSize());
    }

    private static final AddressLayout current_mode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("current_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_output_mode *current_mode
     * }
     */
    public static final AddressLayout current_mode$layout() {
        return current_mode$LAYOUT;
    }

    private static final long current_mode$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_output_mode *current_mode
     * }
     */
    public static final long current_mode$offset() {
        return current_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_output_mode *current_mode
     * }
     */
    public static MemorySegment current_mode(MemorySegment struct) {
        return struct.get(current_mode$LAYOUT, current_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_output_mode *current_mode
     * }
     */
    public static void current_mode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(current_mode$LAYOUT, current_mode$OFFSET, fieldValue);
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt refresh$LAYOUT = (OfInt)$LAYOUT.select(groupElement("refresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t refresh
     * }
     */
    public static final OfInt refresh$layout() {
        return refresh$LAYOUT;
    }

    private static final long refresh$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t refresh
     * }
     */
    public static final long refresh$offset() {
        return refresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t refresh
     * }
     */
    public static int refresh(MemorySegment struct) {
        return struct.get(refresh$LAYOUT, refresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t refresh
     * }
     */
    public static void refresh(MemorySegment struct, int fieldValue) {
        struct.set(refresh$LAYOUT, refresh$OFFSET, fieldValue);
    }

    private static final OfBoolean enabled$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("enabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static final OfBoolean enabled$layout() {
        return enabled$LAYOUT;
    }

    private static final long enabled$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static final long enabled$offset() {
        return enabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static boolean enabled(MemorySegment struct) {
        return struct.get(enabled$LAYOUT, enabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static void enabled(MemorySegment struct, boolean fieldValue) {
        struct.set(enabled$LAYOUT, enabled$OFFSET, fieldValue);
    }

    private static final OfFloat scale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static final OfFloat scale$layout() {
        return scale$LAYOUT;
    }

    private static final long scale$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static final long scale$offset() {
        return scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static float scale(MemorySegment struct) {
        return struct.get(scale$LAYOUT, scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static void scale(MemorySegment struct, float fieldValue) {
        struct.set(scale$LAYOUT, scale$OFFSET, fieldValue);
    }

    private static final OfInt subpixel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subpixel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wl_output_subpixel subpixel
     * }
     */
    public static final OfInt subpixel$layout() {
        return subpixel$LAYOUT;
    }

    private static final long subpixel$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wl_output_subpixel subpixel
     * }
     */
    public static final long subpixel$offset() {
        return subpixel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wl_output_subpixel subpixel
     * }
     */
    public static int subpixel(MemorySegment struct) {
        return struct.get(subpixel$LAYOUT, subpixel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wl_output_subpixel subpixel
     * }
     */
    public static void subpixel(MemorySegment struct, int fieldValue) {
        struct.set(subpixel$LAYOUT, subpixel$OFFSET, fieldValue);
    }

    private static final OfInt transform$LAYOUT = (OfInt)$LAYOUT.select(groupElement("transform"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static final OfInt transform$layout() {
        return transform$LAYOUT;
    }

    private static final long transform$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static final long transform$offset() {
        return transform$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static int transform(MemorySegment struct) {
        return struct.get(transform$LAYOUT, transform$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static void transform(MemorySegment struct, int fieldValue) {
        struct.set(transform$LAYOUT, transform$OFFSET, fieldValue);
    }

    private static final OfInt adaptive_sync_status$LAYOUT = (OfInt)$LAYOUT.select(groupElement("adaptive_sync_status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wlr_output_adaptive_sync_status adaptive_sync_status
     * }
     */
    public static final OfInt adaptive_sync_status$layout() {
        return adaptive_sync_status$LAYOUT;
    }

    private static final long adaptive_sync_status$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wlr_output_adaptive_sync_status adaptive_sync_status
     * }
     */
    public static final long adaptive_sync_status$offset() {
        return adaptive_sync_status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wlr_output_adaptive_sync_status adaptive_sync_status
     * }
     */
    public static int adaptive_sync_status(MemorySegment struct) {
        return struct.get(adaptive_sync_status$LAYOUT, adaptive_sync_status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wlr_output_adaptive_sync_status adaptive_sync_status
     * }
     */
    public static void adaptive_sync_status(MemorySegment struct, int fieldValue) {
        struct.set(adaptive_sync_status$LAYOUT, adaptive_sync_status$OFFSET, fieldValue);
    }

    private static final OfInt render_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("render_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t render_format
     * }
     */
    public static final OfInt render_format$layout() {
        return render_format$LAYOUT;
    }

    private static final long render_format$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t render_format
     * }
     */
    public static final long render_format$offset() {
        return render_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t render_format
     * }
     */
    public static int render_format(MemorySegment struct) {
        return struct.get(render_format$LAYOUT, render_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t render_format
     * }
     */
    public static void render_format(MemorySegment struct, int fieldValue) {
        struct.set(render_format$LAYOUT, render_format$OFFSET, fieldValue);
    }

    private static final OfBoolean needs_frame$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("needs_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool needs_frame
     * }
     */
    public static final OfBoolean needs_frame$layout() {
        return needs_frame$LAYOUT;
    }

    private static final long needs_frame$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool needs_frame
     * }
     */
    public static final long needs_frame$offset() {
        return needs_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool needs_frame
     * }
     */
    public static boolean needs_frame(MemorySegment struct) {
        return struct.get(needs_frame$LAYOUT, needs_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool needs_frame
     * }
     */
    public static void needs_frame(MemorySegment struct, boolean fieldValue) {
        struct.set(needs_frame$LAYOUT, needs_frame$OFFSET, fieldValue);
    }

    private static final OfBoolean frame_pending$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("frame_pending"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool frame_pending
     * }
     */
    public static final OfBoolean frame_pending$layout() {
        return frame_pending$LAYOUT;
    }

    private static final long frame_pending$OFFSET = 157;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool frame_pending
     * }
     */
    public static final long frame_pending$offset() {
        return frame_pending$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool frame_pending
     * }
     */
    public static boolean frame_pending(MemorySegment struct) {
        return struct.get(frame_pending$LAYOUT, frame_pending$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool frame_pending
     * }
     */
    public static void frame_pending(MemorySegment struct, boolean fieldValue) {
        struct.set(frame_pending$LAYOUT, frame_pending$OFFSET, fieldValue);
    }

    private static final SequenceLayout transform_matrix$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("transform_matrix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float transform_matrix[9]
     * }
     */
    public static final SequenceLayout transform_matrix$layout() {
        return transform_matrix$LAYOUT;
    }

    private static final long transform_matrix$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float transform_matrix[9]
     * }
     */
    public static final long transform_matrix$offset() {
        return transform_matrix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float transform_matrix[9]
     * }
     */
    public static MemorySegment transform_matrix(MemorySegment struct) {
        return struct.asSlice(transform_matrix$OFFSET, transform_matrix$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float transform_matrix[9]
     * }
     */
    public static void transform_matrix(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, transform_matrix$OFFSET, transform_matrix$LAYOUT.byteSize());
    }

    private static long[] transform_matrix$DIMS = { 9 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float transform_matrix[9]
     * }
     */
    public static long[] transform_matrix$dimensions() {
        return transform_matrix$DIMS;
    }
    private static final VarHandle transform_matrix$ELEM_HANDLE = transform_matrix$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float transform_matrix[9]
     * }
     */
    public static float transform_matrix(MemorySegment struct, long index0) {
        return (float)transform_matrix$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float transform_matrix[9]
     * }
     */
    public static void transform_matrix(MemorySegment struct, long index0, float fieldValue) {
        transform_matrix$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfBoolean non_desktop$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("non_desktop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool non_desktop
     * }
     */
    public static final OfBoolean non_desktop$layout() {
        return non_desktop$LAYOUT;
    }

    private static final long non_desktop$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool non_desktop
     * }
     */
    public static final long non_desktop$offset() {
        return non_desktop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool non_desktop
     * }
     */
    public static boolean non_desktop(MemorySegment struct) {
        return struct.get(non_desktop$LAYOUT, non_desktop$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool non_desktop
     * }
     */
    public static void non_desktop(MemorySegment struct, boolean fieldValue) {
        struct.set(non_desktop$LAYOUT, non_desktop$OFFSET, fieldValue);
    }

    private static final GroupLayout pending$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pending"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_output_state pending
     * }
     */
    public static final GroupLayout pending$layout() {
        return pending$LAYOUT;
    }

    private static final long pending$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_output_state pending
     * }
     */
    public static final long pending$offset() {
        return pending$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_output_state pending
     * }
     */
    public static MemorySegment pending(MemorySegment struct) {
        return struct.asSlice(pending$OFFSET, pending$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_output_state pending
     * }
     */
    public static void pending(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pending$OFFSET, pending$LAYOUT.byteSize());
    }

    private static final OfInt commit_seq$LAYOUT = (OfInt)$LAYOUT.select(groupElement("commit_seq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t commit_seq
     * }
     */
    public static final OfInt commit_seq$layout() {
        return commit_seq$LAYOUT;
    }

    private static final long commit_seq$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t commit_seq
     * }
     */
    public static final long commit_seq$offset() {
        return commit_seq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t commit_seq
     * }
     */
    public static int commit_seq(MemorySegment struct) {
        return struct.get(commit_seq$LAYOUT, commit_seq$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t commit_seq
     * }
     */
    public static void commit_seq(MemorySegment struct, int fieldValue) {
        struct.set(commit_seq$LAYOUT, commit_seq$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal frame;
     *     struct wl_signal damage;
     *     struct wl_signal needs_frame;
     *     struct wl_signal precommit;
     *     struct wl_signal commit;
     *     struct wl_signal present;
     *     struct wl_signal bind;
     *     struct wl_signal description;
     *     struct wl_signal request_state;
     *     struct wl_signal destroy;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("frame"),
            wl_signal.layout().withName("damage"),
            wl_signal.layout().withName("needs_frame"),
            wl_signal.layout().withName("precommit"),
            wl_signal.layout().withName("commit"),
            wl_signal.layout().withName("present"),
            wl_signal.layout().withName("bind"),
            wl_signal.layout().withName("description"),
            wl_signal.layout().withName("request_state"),
            wl_signal.layout().withName("destroy")
        ).withName("$anon$166:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout frame$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("frame"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal frame
         * }
         */
        public static final GroupLayout frame$layout() {
            return frame$LAYOUT;
        }

        private static final long frame$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal frame
         * }
         */
        public static final long frame$offset() {
            return frame$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal frame
         * }
         */
        public static MemorySegment frame(MemorySegment struct) {
            return struct.asSlice(frame$OFFSET, frame$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal frame
         * }
         */
        public static void frame(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, frame$OFFSET, frame$LAYOUT.byteSize());
        }

        private static final GroupLayout damage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("damage"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal damage
         * }
         */
        public static final GroupLayout damage$layout() {
            return damage$LAYOUT;
        }

        private static final long damage$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal damage
         * }
         */
        public static final long damage$offset() {
            return damage$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal damage
         * }
         */
        public static MemorySegment damage(MemorySegment struct) {
            return struct.asSlice(damage$OFFSET, damage$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal damage
         * }
         */
        public static void damage(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, damage$OFFSET, damage$LAYOUT.byteSize());
        }

        private static final GroupLayout needs_frame$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("needs_frame"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal needs_frame
         * }
         */
        public static final GroupLayout needs_frame$layout() {
            return needs_frame$LAYOUT;
        }

        private static final long needs_frame$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal needs_frame
         * }
         */
        public static final long needs_frame$offset() {
            return needs_frame$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal needs_frame
         * }
         */
        public static MemorySegment needs_frame(MemorySegment struct) {
            return struct.asSlice(needs_frame$OFFSET, needs_frame$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal needs_frame
         * }
         */
        public static void needs_frame(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, needs_frame$OFFSET, needs_frame$LAYOUT.byteSize());
        }

        private static final GroupLayout precommit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("precommit"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal precommit
         * }
         */
        public static final GroupLayout precommit$layout() {
            return precommit$LAYOUT;
        }

        private static final long precommit$OFFSET = 48;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal precommit
         * }
         */
        public static final long precommit$offset() {
            return precommit$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal precommit
         * }
         */
        public static MemorySegment precommit(MemorySegment struct) {
            return struct.asSlice(precommit$OFFSET, precommit$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal precommit
         * }
         */
        public static void precommit(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, precommit$OFFSET, precommit$LAYOUT.byteSize());
        }

        private static final GroupLayout commit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("commit"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal commit
         * }
         */
        public static final GroupLayout commit$layout() {
            return commit$LAYOUT;
        }

        private static final long commit$OFFSET = 64;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal commit
         * }
         */
        public static final long commit$offset() {
            return commit$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal commit
         * }
         */
        public static MemorySegment commit(MemorySegment struct) {
            return struct.asSlice(commit$OFFSET, commit$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal commit
         * }
         */
        public static void commit(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, commit$OFFSET, commit$LAYOUT.byteSize());
        }

        private static final GroupLayout present$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("present"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal present
         * }
         */
        public static final GroupLayout present$layout() {
            return present$LAYOUT;
        }

        private static final long present$OFFSET = 80;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal present
         * }
         */
        public static final long present$offset() {
            return present$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal present
         * }
         */
        public static MemorySegment present(MemorySegment struct) {
            return struct.asSlice(present$OFFSET, present$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal present
         * }
         */
        public static void present(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, present$OFFSET, present$LAYOUT.byteSize());
        }

        private static final GroupLayout bind$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bind"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal bind
         * }
         */
        public static final GroupLayout bind$layout() {
            return bind$LAYOUT;
        }

        private static final long bind$OFFSET = 96;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal bind
         * }
         */
        public static final long bind$offset() {
            return bind$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal bind
         * }
         */
        public static MemorySegment bind(MemorySegment struct) {
            return struct.asSlice(bind$OFFSET, bind$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal bind
         * }
         */
        public static void bind(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, bind$OFFSET, bind$LAYOUT.byteSize());
        }

        private static final GroupLayout description$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("description"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal description
         * }
         */
        public static final GroupLayout description$layout() {
            return description$LAYOUT;
        }

        private static final long description$OFFSET = 112;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal description
         * }
         */
        public static final long description$offset() {
            return description$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal description
         * }
         */
        public static MemorySegment description(MemorySegment struct) {
            return struct.asSlice(description$OFFSET, description$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal description
         * }
         */
        public static void description(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, description$OFFSET, description$LAYOUT.byteSize());
        }

        private static final GroupLayout request_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("request_state"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal request_state
         * }
         */
        public static final GroupLayout request_state$layout() {
            return request_state$LAYOUT;
        }

        private static final long request_state$OFFSET = 128;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal request_state
         * }
         */
        public static final long request_state$offset() {
            return request_state$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal request_state
         * }
         */
        public static MemorySegment request_state(MemorySegment struct) {
            return struct.asSlice(request_state$OFFSET, request_state$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal request_state
         * }
         */
        public static void request_state(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, request_state$OFFSET, request_state$LAYOUT.byteSize());
        }

        private static final GroupLayout destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("destroy"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final GroupLayout destroy$layout() {
            return destroy$LAYOUT;
        }

        private static final long destroy$OFFSET = 144;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final long destroy$offset() {
            return destroy$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static MemorySegment destroy(MemorySegment struct) {
            return struct.asSlice(destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal frame;
     *     struct wl_signal damage;
     *     struct wl_signal needs_frame;
     *     struct wl_signal precommit;
     *     struct wl_signal commit;
     *     struct wl_signal present;
     *     struct wl_signal bind;
     *     struct wl_signal description;
     *     struct wl_signal request_state;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal frame;
     *     struct wl_signal damage;
     *     struct wl_signal needs_frame;
     *     struct wl_signal precommit;
     *     struct wl_signal commit;
     *     struct wl_signal present;
     *     struct wl_signal bind;
     *     struct wl_signal description;
     *     struct wl_signal request_state;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal frame;
     *     struct wl_signal damage;
     *     struct wl_signal needs_frame;
     *     struct wl_signal precommit;
     *     struct wl_signal commit;
     *     struct wl_signal present;
     *     struct wl_signal bind;
     *     struct wl_signal description;
     *     struct wl_signal request_state;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal frame;
     *     struct wl_signal damage;
     *     struct wl_signal needs_frame;
     *     struct wl_signal precommit;
     *     struct wl_signal commit;
     *     struct wl_signal present;
     *     struct wl_signal bind;
     *     struct wl_signal description;
     *     struct wl_signal request_state;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final AddressLayout idle_frame$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("idle_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_event_source *idle_frame
     * }
     */
    public static final AddressLayout idle_frame$layout() {
        return idle_frame$LAYOUT;
    }

    private static final long idle_frame$OFFSET = 496;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_event_source *idle_frame
     * }
     */
    public static final long idle_frame$offset() {
        return idle_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_event_source *idle_frame
     * }
     */
    public static MemorySegment idle_frame(MemorySegment struct) {
        return struct.get(idle_frame$LAYOUT, idle_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_event_source *idle_frame
     * }
     */
    public static void idle_frame(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(idle_frame$LAYOUT, idle_frame$OFFSET, fieldValue);
    }

    private static final AddressLayout idle_done$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("idle_done"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_event_source *idle_done
     * }
     */
    public static final AddressLayout idle_done$layout() {
        return idle_done$LAYOUT;
    }

    private static final long idle_done$OFFSET = 504;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_event_source *idle_done
     * }
     */
    public static final long idle_done$offset() {
        return idle_done$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_event_source *idle_done
     * }
     */
    public static MemorySegment idle_done(MemorySegment struct) {
        return struct.get(idle_done$LAYOUT, idle_done$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_event_source *idle_done
     * }
     */
    public static void idle_done(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(idle_done$LAYOUT, idle_done$OFFSET, fieldValue);
    }

    private static final OfInt attach_render_locks$LAYOUT = (OfInt)$LAYOUT.select(groupElement("attach_render_locks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int attach_render_locks
     * }
     */
    public static final OfInt attach_render_locks$layout() {
        return attach_render_locks$LAYOUT;
    }

    private static final long attach_render_locks$OFFSET = 512;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int attach_render_locks
     * }
     */
    public static final long attach_render_locks$offset() {
        return attach_render_locks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int attach_render_locks
     * }
     */
    public static int attach_render_locks(MemorySegment struct) {
        return struct.get(attach_render_locks$LAYOUT, attach_render_locks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int attach_render_locks
     * }
     */
    public static void attach_render_locks(MemorySegment struct, int fieldValue) {
        struct.set(attach_render_locks$LAYOUT, attach_render_locks$OFFSET, fieldValue);
    }

    private static final GroupLayout cursors$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cursors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list cursors
     * }
     */
    public static final GroupLayout cursors$layout() {
        return cursors$LAYOUT;
    }

    private static final long cursors$OFFSET = 520;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list cursors
     * }
     */
    public static final long cursors$offset() {
        return cursors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list cursors
     * }
     */
    public static MemorySegment cursors(MemorySegment struct) {
        return struct.asSlice(cursors$OFFSET, cursors$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list cursors
     * }
     */
    public static void cursors(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cursors$OFFSET, cursors$LAYOUT.byteSize());
    }

    private static final AddressLayout hardware_cursor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hardware_cursor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_output_cursor *hardware_cursor
     * }
     */
    public static final AddressLayout hardware_cursor$layout() {
        return hardware_cursor$LAYOUT;
    }

    private static final long hardware_cursor$OFFSET = 536;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_output_cursor *hardware_cursor
     * }
     */
    public static final long hardware_cursor$offset() {
        return hardware_cursor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_output_cursor *hardware_cursor
     * }
     */
    public static MemorySegment hardware_cursor(MemorySegment struct) {
        return struct.get(hardware_cursor$LAYOUT, hardware_cursor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_output_cursor *hardware_cursor
     * }
     */
    public static void hardware_cursor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hardware_cursor$LAYOUT, hardware_cursor$OFFSET, fieldValue);
    }

    private static final AddressLayout cursor_swapchain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cursor_swapchain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_swapchain *cursor_swapchain
     * }
     */
    public static final AddressLayout cursor_swapchain$layout() {
        return cursor_swapchain$LAYOUT;
    }

    private static final long cursor_swapchain$OFFSET = 544;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_swapchain *cursor_swapchain
     * }
     */
    public static final long cursor_swapchain$offset() {
        return cursor_swapchain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_swapchain *cursor_swapchain
     * }
     */
    public static MemorySegment cursor_swapchain(MemorySegment struct) {
        return struct.get(cursor_swapchain$LAYOUT, cursor_swapchain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_swapchain *cursor_swapchain
     * }
     */
    public static void cursor_swapchain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cursor_swapchain$LAYOUT, cursor_swapchain$OFFSET, fieldValue);
    }

    private static final AddressLayout cursor_front_buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cursor_front_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_buffer *cursor_front_buffer
     * }
     */
    public static final AddressLayout cursor_front_buffer$layout() {
        return cursor_front_buffer$LAYOUT;
    }

    private static final long cursor_front_buffer$OFFSET = 552;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_buffer *cursor_front_buffer
     * }
     */
    public static final long cursor_front_buffer$offset() {
        return cursor_front_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_buffer *cursor_front_buffer
     * }
     */
    public static MemorySegment cursor_front_buffer(MemorySegment struct) {
        return struct.get(cursor_front_buffer$LAYOUT, cursor_front_buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_buffer *cursor_front_buffer
     * }
     */
    public static void cursor_front_buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cursor_front_buffer$LAYOUT, cursor_front_buffer$OFFSET, fieldValue);
    }

    private static final OfInt software_cursor_locks$LAYOUT = (OfInt)$LAYOUT.select(groupElement("software_cursor_locks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int software_cursor_locks
     * }
     */
    public static final OfInt software_cursor_locks$layout() {
        return software_cursor_locks$LAYOUT;
    }

    private static final long software_cursor_locks$OFFSET = 560;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int software_cursor_locks
     * }
     */
    public static final long software_cursor_locks$offset() {
        return software_cursor_locks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int software_cursor_locks
     * }
     */
    public static int software_cursor_locks(MemorySegment struct) {
        return struct.get(software_cursor_locks$LAYOUT, software_cursor_locks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int software_cursor_locks
     * }
     */
    public static void software_cursor_locks(MemorySegment struct, int fieldValue) {
        struct.set(software_cursor_locks$LAYOUT, software_cursor_locks$OFFSET, fieldValue);
    }

    private static final GroupLayout layers$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("layers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list layers
     * }
     */
    public static final GroupLayout layers$layout() {
        return layers$LAYOUT;
    }

    private static final long layers$OFFSET = 568;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list layers
     * }
     */
    public static final long layers$offset() {
        return layers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list layers
     * }
     */
    public static MemorySegment layers(MemorySegment struct) {
        return struct.asSlice(layers$OFFSET, layers$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list layers
     * }
     */
    public static void layers(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, layers$OFFSET, layers$LAYOUT.byteSize());
    }

    private static final AddressLayout allocator$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_allocator *allocator
     * }
     */
    public static final AddressLayout allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_allocator *allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_allocator *allocator
     * }
     */
    public static MemorySegment allocator(MemorySegment struct) {
        return struct.get(allocator$LAYOUT, allocator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_allocator *allocator
     * }
     */
    public static void allocator(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(allocator$LAYOUT, allocator$OFFSET, fieldValue);
    }

    private static final AddressLayout renderer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("renderer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_renderer *renderer
     * }
     */
    public static final AddressLayout renderer$layout() {
        return renderer$LAYOUT;
    }

    private static final long renderer$OFFSET = 592;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_renderer *renderer
     * }
     */
    public static final long renderer$offset() {
        return renderer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_renderer *renderer
     * }
     */
    public static MemorySegment renderer(MemorySegment struct) {
        return struct.get(renderer$LAYOUT, renderer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_renderer *renderer
     * }
     */
    public static void renderer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(renderer$LAYOUT, renderer$OFFSET, fieldValue);
    }

    private static final AddressLayout swapchain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("swapchain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_swapchain *swapchain
     * }
     */
    public static final AddressLayout swapchain$layout() {
        return swapchain$LAYOUT;
    }

    private static final long swapchain$OFFSET = 600;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_swapchain *swapchain
     * }
     */
    public static final long swapchain$offset() {
        return swapchain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_swapchain *swapchain
     * }
     */
    public static MemorySegment swapchain(MemorySegment struct) {
        return struct.get(swapchain$LAYOUT, swapchain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_swapchain *swapchain
     * }
     */
    public static void swapchain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(swapchain$LAYOUT, swapchain$OFFSET, fieldValue);
    }

    private static final AddressLayout back_buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("back_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_buffer *back_buffer
     * }
     */
    public static final AddressLayout back_buffer$layout() {
        return back_buffer$LAYOUT;
    }

    private static final long back_buffer$OFFSET = 608;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_buffer *back_buffer
     * }
     */
    public static final long back_buffer$offset() {
        return back_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_buffer *back_buffer
     * }
     */
    public static MemorySegment back_buffer(MemorySegment struct) {
        return struct.get(back_buffer$LAYOUT, back_buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_buffer *back_buffer
     * }
     */
    public static void back_buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(back_buffer$LAYOUT, back_buffer$OFFSET, fieldValue);
    }

    private static final GroupLayout display_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("display_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static final GroupLayout display_destroy$layout() {
        return display_destroy$LAYOUT;
    }

    private static final long display_destroy$OFFSET = 616;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static final long display_destroy$offset() {
        return display_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static MemorySegment display_destroy(MemorySegment struct) {
        return struct.asSlice(display_destroy$OFFSET, display_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static void display_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, display_destroy$OFFSET, display_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout addons$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("addons"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_addon_set addons
     * }
     */
    public static final GroupLayout addons$layout() {
        return addons$LAYOUT;
    }

    private static final long addons$OFFSET = 640;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_addon_set addons
     * }
     */
    public static final long addons$offset() {
        return addons$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_addon_set addons
     * }
     */
    public static MemorySegment addons(MemorySegment struct) {
        return struct.asSlice(addons$OFFSET, addons$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_addon_set addons
     * }
     */
    public static void addons(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, addons$OFFSET, addons$LAYOUT.byteSize());
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 656;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


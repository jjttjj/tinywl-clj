// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_serial_range {
 *     uint32_t min_incl;
 *     uint32_t max_incl;
 * }
 * }
 */
public class wlr_serial_range {

    wlr_serial_range() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("min_incl"),
        C.C_INT.withName("max_incl")
    ).withName("wlr_serial_range");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt min_incl$LAYOUT = (OfInt)$LAYOUT.select(groupElement("min_incl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t min_incl
     * }
     */
    public static final OfInt min_incl$layout() {
        return min_incl$LAYOUT;
    }

    private static final long min_incl$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t min_incl
     * }
     */
    public static final long min_incl$offset() {
        return min_incl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t min_incl
     * }
     */
    public static int min_incl(MemorySegment struct) {
        return struct.get(min_incl$LAYOUT, min_incl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t min_incl
     * }
     */
    public static void min_incl(MemorySegment struct, int fieldValue) {
        struct.set(min_incl$LAYOUT, min_incl$OFFSET, fieldValue);
    }

    private static final OfInt max_incl$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_incl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t max_incl
     * }
     */
    public static final OfInt max_incl$layout() {
        return max_incl$LAYOUT;
    }

    private static final long max_incl$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t max_incl
     * }
     */
    public static final long max_incl$offset() {
        return max_incl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t max_incl
     * }
     */
    public static int max_incl(MemorySegment struct) {
        return struct.get(max_incl$LAYOUT, max_incl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t max_incl
     * }
     */
    public static void max_incl(MemorySegment struct, int fieldValue) {
        struct.set(max_incl$LAYOUT, max_incl$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_drag {
 *     enum wlr_drag_grab_type grab_type;
 *     struct wlr_seat_keyboard_grab keyboard_grab;
 *     struct wlr_seat_pointer_grab pointer_grab;
 *     struct wlr_seat_touch_grab touch_grab;
 *     struct wlr_seat *seat;
 *     struct wlr_seat_client *seat_client;
 *     struct wlr_seat_client *focus_client;
 *     struct wlr_drag_icon *icon;
 *     struct wlr_surface *focus;
 *     struct wlr_data_source *source;
 *     bool started;
 *     bool dropped;
 *     bool cancelling;
 *     int32_t grab_touch_id;
 *     int32_t touch_id;
 *     struct {
 *         struct wl_signal focus;
 *         struct wl_signal motion;
 *         struct wl_signal drop;
 *         struct wl_signal destroy;
 *     } events;
 *     struct wl_listener source_destroy;
 *     struct wl_listener seat_client_destroy;
 *     struct wl_listener icon_destroy;
 *     void *data;
 * }
 * }
 */
public class wlr_drag {

    wlr_drag() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("grab_type"),
        MemoryLayout.paddingLayout(4),
        wlr_seat_keyboard_grab.layout().withName("keyboard_grab"),
        wlr_seat_pointer_grab.layout().withName("pointer_grab"),
        wlr_seat_touch_grab.layout().withName("touch_grab"),
        C.C_POINTER.withName("seat"),
        C.C_POINTER.withName("seat_client"),
        C.C_POINTER.withName("focus_client"),
        C.C_POINTER.withName("icon"),
        C.C_POINTER.withName("focus"),
        C.C_POINTER.withName("source"),
        C.C_BOOL.withName("started"),
        C.C_BOOL.withName("dropped"),
        C.C_BOOL.withName("cancelling"),
        MemoryLayout.paddingLayout(1),
        C.C_INT.withName("grab_touch_id"),
        C.C_INT.withName("touch_id"),
        MemoryLayout.paddingLayout(4),
        wlr_drag.events.layout().withName("events"),
        wl_listener.layout().withName("source_destroy"),
        wl_listener.layout().withName("seat_client_destroy"),
        wl_listener.layout().withName("icon_destroy"),
        C.C_POINTER.withName("data")
    ).withName("wlr_drag");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt grab_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grab_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wlr_drag_grab_type grab_type
     * }
     */
    public static final OfInt grab_type$layout() {
        return grab_type$LAYOUT;
    }

    private static final long grab_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wlr_drag_grab_type grab_type
     * }
     */
    public static final long grab_type$offset() {
        return grab_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wlr_drag_grab_type grab_type
     * }
     */
    public static int grab_type(MemorySegment struct) {
        return struct.get(grab_type$LAYOUT, grab_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wlr_drag_grab_type grab_type
     * }
     */
    public static void grab_type(MemorySegment struct, int fieldValue) {
        struct.set(grab_type$LAYOUT, grab_type$OFFSET, fieldValue);
    }

    private static final GroupLayout keyboard_grab$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("keyboard_grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab keyboard_grab
     * }
     */
    public static final GroupLayout keyboard_grab$layout() {
        return keyboard_grab$LAYOUT;
    }

    private static final long keyboard_grab$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab keyboard_grab
     * }
     */
    public static final long keyboard_grab$offset() {
        return keyboard_grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab keyboard_grab
     * }
     */
    public static MemorySegment keyboard_grab(MemorySegment struct) {
        return struct.asSlice(keyboard_grab$OFFSET, keyboard_grab$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab keyboard_grab
     * }
     */
    public static void keyboard_grab(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, keyboard_grab$OFFSET, keyboard_grab$LAYOUT.byteSize());
    }

    private static final GroupLayout pointer_grab$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pointer_grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab pointer_grab
     * }
     */
    public static final GroupLayout pointer_grab$layout() {
        return pointer_grab$LAYOUT;
    }

    private static final long pointer_grab$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab pointer_grab
     * }
     */
    public static final long pointer_grab$offset() {
        return pointer_grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab pointer_grab
     * }
     */
    public static MemorySegment pointer_grab(MemorySegment struct) {
        return struct.asSlice(pointer_grab$OFFSET, pointer_grab$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab pointer_grab
     * }
     */
    public static void pointer_grab(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pointer_grab$OFFSET, pointer_grab$LAYOUT.byteSize());
    }

    private static final GroupLayout touch_grab$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("touch_grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab touch_grab
     * }
     */
    public static final GroupLayout touch_grab$layout() {
        return touch_grab$LAYOUT;
    }

    private static final long touch_grab$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab touch_grab
     * }
     */
    public static final long touch_grab$offset() {
        return touch_grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab touch_grab
     * }
     */
    public static MemorySegment touch_grab(MemorySegment struct) {
        return struct.asSlice(touch_grab$OFFSET, touch_grab$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab touch_grab
     * }
     */
    public static void touch_grab(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, touch_grab$OFFSET, touch_grab$LAYOUT.byteSize());
    }

    private static final AddressLayout seat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final AddressLayout seat$layout() {
        return seat$LAYOUT;
    }

    private static final long seat$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final long seat$offset() {
        return seat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static MemorySegment seat(MemorySegment struct) {
        return struct.get(seat$LAYOUT, seat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static void seat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seat$LAYOUT, seat$OFFSET, fieldValue);
    }

    private static final AddressLayout seat_client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seat_client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *seat_client
     * }
     */
    public static final AddressLayout seat_client$layout() {
        return seat_client$LAYOUT;
    }

    private static final long seat_client$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *seat_client
     * }
     */
    public static final long seat_client$offset() {
        return seat_client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *seat_client
     * }
     */
    public static MemorySegment seat_client(MemorySegment struct) {
        return struct.get(seat_client$LAYOUT, seat_client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *seat_client
     * }
     */
    public static void seat_client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seat_client$LAYOUT, seat_client$OFFSET, fieldValue);
    }

    private static final AddressLayout focus_client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("focus_client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focus_client
     * }
     */
    public static final AddressLayout focus_client$layout() {
        return focus_client$LAYOUT;
    }

    private static final long focus_client$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focus_client
     * }
     */
    public static final long focus_client$offset() {
        return focus_client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focus_client
     * }
     */
    public static MemorySegment focus_client(MemorySegment struct) {
        return struct.get(focus_client$LAYOUT, focus_client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focus_client
     * }
     */
    public static void focus_client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(focus_client$LAYOUT, focus_client$OFFSET, fieldValue);
    }

    private static final AddressLayout icon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("icon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_drag_icon *icon
     * }
     */
    public static final AddressLayout icon$layout() {
        return icon$LAYOUT;
    }

    private static final long icon$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_drag_icon *icon
     * }
     */
    public static final long icon$offset() {
        return icon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_drag_icon *icon
     * }
     */
    public static MemorySegment icon(MemorySegment struct) {
        return struct.get(icon$LAYOUT, icon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_drag_icon *icon
     * }
     */
    public static void icon(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(icon$LAYOUT, icon$OFFSET, fieldValue);
    }

    private static final AddressLayout focus$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("focus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface *focus
     * }
     */
    public static final AddressLayout focus$layout() {
        return focus$LAYOUT;
    }

    private static final long focus$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface *focus
     * }
     */
    public static final long focus$offset() {
        return focus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface *focus
     * }
     */
    public static MemorySegment focus(MemorySegment struct) {
        return struct.get(focus$LAYOUT, focus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface *focus
     * }
     */
    public static void focus(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(focus$LAYOUT, focus$OFFSET, fieldValue);
    }

    private static final AddressLayout source$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_data_source *source
     * }
     */
    public static final AddressLayout source$layout() {
        return source$LAYOUT;
    }

    private static final long source$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_data_source *source
     * }
     */
    public static final long source$offset() {
        return source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_data_source *source
     * }
     */
    public static MemorySegment source(MemorySegment struct) {
        return struct.get(source$LAYOUT, source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_data_source *source
     * }
     */
    public static void source(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(source$LAYOUT, source$OFFSET, fieldValue);
    }

    private static final OfBoolean started$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("started"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool started
     * }
     */
    public static final OfBoolean started$layout() {
        return started$LAYOUT;
    }

    private static final long started$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool started
     * }
     */
    public static final long started$offset() {
        return started$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool started
     * }
     */
    public static boolean started(MemorySegment struct) {
        return struct.get(started$LAYOUT, started$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool started
     * }
     */
    public static void started(MemorySegment struct, boolean fieldValue) {
        struct.set(started$LAYOUT, started$OFFSET, fieldValue);
    }

    private static final OfBoolean dropped$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("dropped"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool dropped
     * }
     */
    public static final OfBoolean dropped$layout() {
        return dropped$LAYOUT;
    }

    private static final long dropped$OFFSET = 129;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool dropped
     * }
     */
    public static final long dropped$offset() {
        return dropped$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool dropped
     * }
     */
    public static boolean dropped(MemorySegment struct) {
        return struct.get(dropped$LAYOUT, dropped$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool dropped
     * }
     */
    public static void dropped(MemorySegment struct, boolean fieldValue) {
        struct.set(dropped$LAYOUT, dropped$OFFSET, fieldValue);
    }

    private static final OfBoolean cancelling$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("cancelling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool cancelling
     * }
     */
    public static final OfBoolean cancelling$layout() {
        return cancelling$LAYOUT;
    }

    private static final long cancelling$OFFSET = 130;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool cancelling
     * }
     */
    public static final long cancelling$offset() {
        return cancelling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool cancelling
     * }
     */
    public static boolean cancelling(MemorySegment struct) {
        return struct.get(cancelling$LAYOUT, cancelling$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool cancelling
     * }
     */
    public static void cancelling(MemorySegment struct, boolean fieldValue) {
        struct.set(cancelling$LAYOUT, cancelling$OFFSET, fieldValue);
    }

    private static final OfInt grab_touch_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grab_touch_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t grab_touch_id
     * }
     */
    public static final OfInt grab_touch_id$layout() {
        return grab_touch_id$LAYOUT;
    }

    private static final long grab_touch_id$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t grab_touch_id
     * }
     */
    public static final long grab_touch_id$offset() {
        return grab_touch_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t grab_touch_id
     * }
     */
    public static int grab_touch_id(MemorySegment struct) {
        return struct.get(grab_touch_id$LAYOUT, grab_touch_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t grab_touch_id
     * }
     */
    public static void grab_touch_id(MemorySegment struct, int fieldValue) {
        struct.set(grab_touch_id$LAYOUT, grab_touch_id$OFFSET, fieldValue);
    }

    private static final OfInt touch_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("touch_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t touch_id
     * }
     */
    public static final OfInt touch_id$layout() {
        return touch_id$LAYOUT;
    }

    private static final long touch_id$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t touch_id
     * }
     */
    public static final long touch_id$offset() {
        return touch_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t touch_id
     * }
     */
    public static int touch_id(MemorySegment struct) {
        return struct.get(touch_id$LAYOUT, touch_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t touch_id
     * }
     */
    public static void touch_id(MemorySegment struct, int fieldValue) {
        struct.set(touch_id$LAYOUT, touch_id$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus;
     *     struct wl_signal motion;
     *     struct wl_signal drop;
     *     struct wl_signal destroy;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("focus"),
            wl_signal.layout().withName("motion"),
            wl_signal.layout().withName("drop"),
            wl_signal.layout().withName("destroy")
        ).withName("$anon$120:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout focus$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("focus"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal focus
         * }
         */
        public static final GroupLayout focus$layout() {
            return focus$LAYOUT;
        }

        private static final long focus$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal focus
         * }
         */
        public static final long focus$offset() {
            return focus$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal focus
         * }
         */
        public static MemorySegment focus(MemorySegment struct) {
            return struct.asSlice(focus$OFFSET, focus$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal focus
         * }
         */
        public static void focus(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, focus$OFFSET, focus$LAYOUT.byteSize());
        }

        private static final GroupLayout motion$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("motion"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal motion
         * }
         */
        public static final GroupLayout motion$layout() {
            return motion$LAYOUT;
        }

        private static final long motion$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal motion
         * }
         */
        public static final long motion$offset() {
            return motion$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal motion
         * }
         */
        public static MemorySegment motion(MemorySegment struct) {
            return struct.asSlice(motion$OFFSET, motion$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal motion
         * }
         */
        public static void motion(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, motion$OFFSET, motion$LAYOUT.byteSize());
        }

        private static final GroupLayout drop$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("drop"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal drop
         * }
         */
        public static final GroupLayout drop$layout() {
            return drop$LAYOUT;
        }

        private static final long drop$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal drop
         * }
         */
        public static final long drop$offset() {
            return drop$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal drop
         * }
         */
        public static MemorySegment drop(MemorySegment struct) {
            return struct.asSlice(drop$OFFSET, drop$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal drop
         * }
         */
        public static void drop(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, drop$OFFSET, drop$LAYOUT.byteSize());
        }

        private static final GroupLayout destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("destroy"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final GroupLayout destroy$layout() {
            return destroy$LAYOUT;
        }

        private static final long destroy$OFFSET = 48;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final long destroy$offset() {
            return destroy$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static MemorySegment destroy(MemorySegment struct) {
            return struct.asSlice(destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus;
     *     struct wl_signal motion;
     *     struct wl_signal drop;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus;
     *     struct wl_signal motion;
     *     struct wl_signal drop;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus;
     *     struct wl_signal motion;
     *     struct wl_signal drop;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus;
     *     struct wl_signal motion;
     *     struct wl_signal drop;
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final GroupLayout source_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("source_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static final GroupLayout source_destroy$layout() {
        return source_destroy$LAYOUT;
    }

    private static final long source_destroy$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static final long source_destroy$offset() {
        return source_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static MemorySegment source_destroy(MemorySegment struct) {
        return struct.asSlice(source_destroy$OFFSET, source_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static void source_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, source_destroy$OFFSET, source_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout seat_client_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("seat_client_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener seat_client_destroy
     * }
     */
    public static final GroupLayout seat_client_destroy$layout() {
        return seat_client_destroy$LAYOUT;
    }

    private static final long seat_client_destroy$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener seat_client_destroy
     * }
     */
    public static final long seat_client_destroy$offset() {
        return seat_client_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener seat_client_destroy
     * }
     */
    public static MemorySegment seat_client_destroy(MemorySegment struct) {
        return struct.asSlice(seat_client_destroy$OFFSET, seat_client_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener seat_client_destroy
     * }
     */
    public static void seat_client_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, seat_client_destroy$OFFSET, seat_client_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout icon_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("icon_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener icon_destroy
     * }
     */
    public static final GroupLayout icon_destroy$layout() {
        return icon_destroy$LAYOUT;
    }

    private static final long icon_destroy$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener icon_destroy
     * }
     */
    public static final long icon_destroy$offset() {
        return icon_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener icon_destroy
     * }
     */
    public static MemorySegment icon_destroy(MemorySegment struct) {
        return struct.asSlice(icon_destroy$OFFSET, icon_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener icon_destroy
     * }
     */
    public static void icon_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, icon_destroy$OFFSET, icon_destroy$LAYOUT.byteSize());
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


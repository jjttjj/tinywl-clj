// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union wl_argument {
 *     int32_t i;
 *     uint32_t u;
 *     wl_fixed_t f;
 *     const char *s;
 *     struct wl_object *o;
 *     uint32_t n;
 *     struct wl_array *a;
 *     int32_t h;
 * }
 * }
 */
public class wl_argument {

    wl_argument() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        C.C_INT.withName("i"),
        C.C_INT.withName("u"),
        C.C_INT.withName("f"),
        C.C_POINTER.withName("s"),
        C.C_POINTER.withName("o"),
        C.C_INT.withName("n"),
        C.C_POINTER.withName("a"),
        C.C_INT.withName("h")
    ).withName("wl_argument");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt i$LAYOUT = (OfInt)$LAYOUT.select(groupElement("i"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t i
     * }
     */
    public static final OfInt i$layout() {
        return i$LAYOUT;
    }

    private static final long i$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t i
     * }
     */
    public static final long i$offset() {
        return i$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t i
     * }
     */
    public static int i(MemorySegment union) {
        return union.get(i$LAYOUT, i$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t i
     * }
     */
    public static void i(MemorySegment union, int fieldValue) {
        union.set(i$LAYOUT, i$OFFSET, fieldValue);
    }

    private static final OfInt u$LAYOUT = (OfInt)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t u
     * }
     */
    public static final OfInt u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t u
     * }
     */
    public static int u(MemorySegment union) {
        return union.get(u$LAYOUT, u$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t u
     * }
     */
    public static void u(MemorySegment union, int fieldValue) {
        union.set(u$LAYOUT, u$OFFSET, fieldValue);
    }

    private static final OfInt f$LAYOUT = (OfInt)$LAYOUT.select(groupElement("f"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wl_fixed_t f
     * }
     */
    public static final OfInt f$layout() {
        return f$LAYOUT;
    }

    private static final long f$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wl_fixed_t f
     * }
     */
    public static final long f$offset() {
        return f$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wl_fixed_t f
     * }
     */
    public static int f(MemorySegment union) {
        return union.get(f$LAYOUT, f$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wl_fixed_t f
     * }
     */
    public static void f(MemorySegment union, int fieldValue) {
        union.set(f$LAYOUT, f$OFFSET, fieldValue);
    }

    private static final AddressLayout s$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("s"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *s
     * }
     */
    public static final AddressLayout s$layout() {
        return s$LAYOUT;
    }

    private static final long s$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *s
     * }
     */
    public static final long s$offset() {
        return s$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *s
     * }
     */
    public static MemorySegment s(MemorySegment union) {
        return union.get(s$LAYOUT, s$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *s
     * }
     */
    public static void s(MemorySegment union, MemorySegment fieldValue) {
        union.set(s$LAYOUT, s$OFFSET, fieldValue);
    }

    private static final AddressLayout o$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("o"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_object *o
     * }
     */
    public static final AddressLayout o$layout() {
        return o$LAYOUT;
    }

    private static final long o$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_object *o
     * }
     */
    public static final long o$offset() {
        return o$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_object *o
     * }
     */
    public static MemorySegment o(MemorySegment union) {
        return union.get(o$LAYOUT, o$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_object *o
     * }
     */
    public static void o(MemorySegment union, MemorySegment fieldValue) {
        union.set(o$LAYOUT, o$OFFSET, fieldValue);
    }

    private static final OfInt n$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t n
     * }
     */
    public static final OfInt n$layout() {
        return n$LAYOUT;
    }

    private static final long n$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t n
     * }
     */
    public static final long n$offset() {
        return n$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t n
     * }
     */
    public static int n(MemorySegment union) {
        return union.get(n$LAYOUT, n$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t n
     * }
     */
    public static void n(MemorySegment union, int fieldValue) {
        union.set(n$LAYOUT, n$OFFSET, fieldValue);
    }

    private static final AddressLayout a$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("a"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_array *a
     * }
     */
    public static final AddressLayout a$layout() {
        return a$LAYOUT;
    }

    private static final long a$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_array *a
     * }
     */
    public static final long a$offset() {
        return a$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_array *a
     * }
     */
    public static MemorySegment a(MemorySegment union) {
        return union.get(a$LAYOUT, a$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_array *a
     * }
     */
    public static void a(MemorySegment union, MemorySegment fieldValue) {
        union.set(a$LAYOUT, a$OFFSET, fieldValue);
    }

    private static final OfInt h$LAYOUT = (OfInt)$LAYOUT.select(groupElement("h"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t h
     * }
     */
    public static final OfInt h$layout() {
        return h$LAYOUT;
    }

    private static final long h$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t h
     * }
     */
    public static final long h$offset() {
        return h$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t h
     * }
     */
    public static int h(MemorySegment union) {
        return union.get(h$LAYOUT, h$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t h
     * }
     */
    public static void h(MemorySegment union, int fieldValue) {
        union.set(h$LAYOUT, h$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


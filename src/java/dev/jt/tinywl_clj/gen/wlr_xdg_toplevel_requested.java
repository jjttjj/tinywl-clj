// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_xdg_toplevel_requested {
 *     bool maximized;
 *     bool minimized;
 *     bool fullscreen;
 *     struct wlr_output *fullscreen_output;
 *     struct wl_listener fullscreen_output_destroy;
 * }
 * }
 */
public class wlr_xdg_toplevel_requested {

    wlr_xdg_toplevel_requested() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_BOOL.withName("maximized"),
        C.C_BOOL.withName("minimized"),
        C.C_BOOL.withName("fullscreen"),
        MemoryLayout.paddingLayout(5),
        C.C_POINTER.withName("fullscreen_output"),
        wl_listener.layout().withName("fullscreen_output_destroy")
    ).withName("wlr_xdg_toplevel_requested");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean maximized$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("maximized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool maximized
     * }
     */
    public static final OfBoolean maximized$layout() {
        return maximized$LAYOUT;
    }

    private static final long maximized$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool maximized
     * }
     */
    public static final long maximized$offset() {
        return maximized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool maximized
     * }
     */
    public static boolean maximized(MemorySegment struct) {
        return struct.get(maximized$LAYOUT, maximized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool maximized
     * }
     */
    public static void maximized(MemorySegment struct, boolean fieldValue) {
        struct.set(maximized$LAYOUT, maximized$OFFSET, fieldValue);
    }

    private static final OfBoolean minimized$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("minimized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool minimized
     * }
     */
    public static final OfBoolean minimized$layout() {
        return minimized$LAYOUT;
    }

    private static final long minimized$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool minimized
     * }
     */
    public static final long minimized$offset() {
        return minimized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool minimized
     * }
     */
    public static boolean minimized(MemorySegment struct) {
        return struct.get(minimized$LAYOUT, minimized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool minimized
     * }
     */
    public static void minimized(MemorySegment struct, boolean fieldValue) {
        struct.set(minimized$LAYOUT, minimized$OFFSET, fieldValue);
    }

    private static final OfBoolean fullscreen$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("fullscreen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool fullscreen
     * }
     */
    public static final OfBoolean fullscreen$layout() {
        return fullscreen$LAYOUT;
    }

    private static final long fullscreen$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool fullscreen
     * }
     */
    public static final long fullscreen$offset() {
        return fullscreen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool fullscreen
     * }
     */
    public static boolean fullscreen(MemorySegment struct) {
        return struct.get(fullscreen$LAYOUT, fullscreen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool fullscreen
     * }
     */
    public static void fullscreen(MemorySegment struct, boolean fieldValue) {
        struct.set(fullscreen$LAYOUT, fullscreen$OFFSET, fieldValue);
    }

    private static final AddressLayout fullscreen_output$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fullscreen_output"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_output *fullscreen_output
     * }
     */
    public static final AddressLayout fullscreen_output$layout() {
        return fullscreen_output$LAYOUT;
    }

    private static final long fullscreen_output$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_output *fullscreen_output
     * }
     */
    public static final long fullscreen_output$offset() {
        return fullscreen_output$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_output *fullscreen_output
     * }
     */
    public static MemorySegment fullscreen_output(MemorySegment struct) {
        return struct.get(fullscreen_output$LAYOUT, fullscreen_output$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_output *fullscreen_output
     * }
     */
    public static void fullscreen_output(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fullscreen_output$LAYOUT, fullscreen_output$OFFSET, fieldValue);
    }

    private static final GroupLayout fullscreen_output_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fullscreen_output_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener fullscreen_output_destroy
     * }
     */
    public static final GroupLayout fullscreen_output_destroy$layout() {
        return fullscreen_output_destroy$LAYOUT;
    }

    private static final long fullscreen_output_destroy$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener fullscreen_output_destroy
     * }
     */
    public static final long fullscreen_output_destroy$offset() {
        return fullscreen_output_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener fullscreen_output_destroy
     * }
     */
    public static MemorySegment fullscreen_output_destroy(MemorySegment struct) {
        return struct.asSlice(fullscreen_output_destroy$OFFSET, fullscreen_output_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener fullscreen_output_destroy
     * }
     */
    public static void fullscreen_output_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fullscreen_output_destroy$OFFSET, fullscreen_output_destroy$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


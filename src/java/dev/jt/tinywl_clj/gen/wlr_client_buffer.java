// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_client_buffer {
 *     struct wlr_buffer base;
 *     struct wlr_texture *texture;
 *     struct wlr_buffer *source;
 *     struct wl_listener source_destroy;
 *     size_t n_ignore_locks;
 * }
 * }
 */
public class wlr_client_buffer {

    wlr_client_buffer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wlr_buffer.layout().withName("base"),
        C.C_POINTER.withName("texture"),
        C.C_POINTER.withName("source"),
        wl_listener.layout().withName("source_destroy"),
        C.C_LONG.withName("n_ignore_locks")
    ).withName("wlr_client_buffer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_buffer base
     * }
     */
    public static final GroupLayout base$layout() {
        return base$LAYOUT;
    }

    private static final long base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_buffer base
     * }
     */
    public static final long base$offset() {
        return base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_buffer base
     * }
     */
    public static MemorySegment base(MemorySegment struct) {
        return struct.asSlice(base$OFFSET, base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_buffer base
     * }
     */
    public static void base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, base$OFFSET, base$LAYOUT.byteSize());
    }

    private static final AddressLayout texture$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("texture"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_texture *texture
     * }
     */
    public static final AddressLayout texture$layout() {
        return texture$LAYOUT;
    }

    private static final long texture$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_texture *texture
     * }
     */
    public static final long texture$offset() {
        return texture$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_texture *texture
     * }
     */
    public static MemorySegment texture(MemorySegment struct) {
        return struct.get(texture$LAYOUT, texture$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_texture *texture
     * }
     */
    public static void texture(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(texture$LAYOUT, texture$OFFSET, fieldValue);
    }

    private static final AddressLayout source$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_buffer *source
     * }
     */
    public static final AddressLayout source$layout() {
        return source$LAYOUT;
    }

    private static final long source$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_buffer *source
     * }
     */
    public static final long source$offset() {
        return source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_buffer *source
     * }
     */
    public static MemorySegment source(MemorySegment struct) {
        return struct.get(source$LAYOUT, source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_buffer *source
     * }
     */
    public static void source(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(source$LAYOUT, source$OFFSET, fieldValue);
    }

    private static final GroupLayout source_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("source_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static final GroupLayout source_destroy$layout() {
        return source_destroy$LAYOUT;
    }

    private static final long source_destroy$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static final long source_destroy$offset() {
        return source_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static MemorySegment source_destroy(MemorySegment struct) {
        return struct.asSlice(source_destroy$OFFSET, source_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static void source_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, source_destroy$OFFSET, source_destroy$LAYOUT.byteSize());
    }

    private static final OfLong n_ignore_locks$LAYOUT = (OfLong)$LAYOUT.select(groupElement("n_ignore_locks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t n_ignore_locks
     * }
     */
    public static final OfLong n_ignore_locks$layout() {
        return n_ignore_locks$LAYOUT;
    }

    private static final long n_ignore_locks$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t n_ignore_locks
     * }
     */
    public static final long n_ignore_locks$offset() {
        return n_ignore_locks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t n_ignore_locks
     * }
     */
    public static long n_ignore_locks(MemorySegment struct) {
        return struct.get(n_ignore_locks$LAYOUT, n_ignore_locks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t n_ignore_locks
     * }
     */
    public static void n_ignore_locks(MemorySegment struct, long fieldValue) {
        struct.set(n_ignore_locks$LAYOUT, n_ignore_locks$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


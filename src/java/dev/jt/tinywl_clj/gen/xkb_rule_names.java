// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct xkb_rule_names {
 *     const char *rules;
 *     const char *model;
 *     const char *layout;
 *     const char *variant;
 *     const char *options;
 * }
 * }
 */
public class xkb_rule_names {

    xkb_rule_names() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("rules"),
        C.C_POINTER.withName("model"),
        C.C_POINTER.withName("layout"),
        C.C_POINTER.withName("variant"),
        C.C_POINTER.withName("options")
    ).withName("xkb_rule_names");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout rules$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rules"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *rules
     * }
     */
    public static final AddressLayout rules$layout() {
        return rules$LAYOUT;
    }

    private static final long rules$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *rules
     * }
     */
    public static final long rules$offset() {
        return rules$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *rules
     * }
     */
    public static MemorySegment rules(MemorySegment struct) {
        return struct.get(rules$LAYOUT, rules$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *rules
     * }
     */
    public static void rules(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rules$LAYOUT, rules$OFFSET, fieldValue);
    }

    private static final AddressLayout model$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("model"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *model
     * }
     */
    public static final AddressLayout model$layout() {
        return model$LAYOUT;
    }

    private static final long model$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *model
     * }
     */
    public static final long model$offset() {
        return model$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *model
     * }
     */
    public static MemorySegment model(MemorySegment struct) {
        return struct.get(model$LAYOUT, model$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *model
     * }
     */
    public static void model(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(model$LAYOUT, model$OFFSET, fieldValue);
    }

    private static final AddressLayout layout$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("layout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *layout
     * }
     */
    public static final AddressLayout layout$layout() {
        return layout$LAYOUT;
    }

    private static final long layout$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *layout
     * }
     */
    public static final long layout$offset() {
        return layout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *layout
     * }
     */
    public static MemorySegment layout(MemorySegment struct) {
        return struct.get(layout$LAYOUT, layout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *layout
     * }
     */
    public static void layout(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(layout$LAYOUT, layout$OFFSET, fieldValue);
    }

    private static final AddressLayout variant$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("variant"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *variant
     * }
     */
    public static final AddressLayout variant$layout() {
        return variant$LAYOUT;
    }

    private static final long variant$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *variant
     * }
     */
    public static final long variant$offset() {
        return variant$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *variant
     * }
     */
    public static MemorySegment variant(MemorySegment struct) {
        return struct.get(variant$LAYOUT, variant$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *variant
     * }
     */
    public static void variant(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(variant$LAYOUT, variant$OFFSET, fieldValue);
    }

    private static final AddressLayout options$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *options
     * }
     */
    public static final AddressLayout options$layout() {
        return options$LAYOUT;
    }

    private static final long options$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *options
     * }
     */
    public static final long options$offset() {
        return options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *options
     * }
     */
    public static MemorySegment options(MemorySegment struct) {
        return struct.get(options$LAYOUT, options$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *options
     * }
     */
    public static void options(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(options$LAYOUT, options$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


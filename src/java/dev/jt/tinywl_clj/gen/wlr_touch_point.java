// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_touch_point {
 *     int32_t touch_id;
 *     struct wlr_surface *surface;
 *     struct wlr_seat_client *client;
 *     struct wlr_surface *focus_surface;
 *     struct wlr_seat_client *focus_client;
 *     double sx;
 *     double sy;
 *     struct wl_listener surface_destroy;
 *     struct wl_listener focus_surface_destroy;
 *     struct wl_listener client_destroy;
 *     struct {
 *         struct wl_signal destroy;
 *     } events;
 *     struct wl_list link;
 * }
 * }
 */
public class wlr_touch_point {

    wlr_touch_point() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("touch_id"),
        MemoryLayout.paddingLayout(4),
        C.C_POINTER.withName("surface"),
        C.C_POINTER.withName("client"),
        C.C_POINTER.withName("focus_surface"),
        C.C_POINTER.withName("focus_client"),
        C.C_DOUBLE.withName("sx"),
        C.C_DOUBLE.withName("sy"),
        wl_listener.layout().withName("surface_destroy"),
        wl_listener.layout().withName("focus_surface_destroy"),
        wl_listener.layout().withName("client_destroy"),
        wlr_touch_point.events.layout().withName("events"),
        wl_list.layout().withName("link")
    ).withName("wlr_touch_point");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt touch_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("touch_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t touch_id
     * }
     */
    public static final OfInt touch_id$layout() {
        return touch_id$LAYOUT;
    }

    private static final long touch_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t touch_id
     * }
     */
    public static final long touch_id$offset() {
        return touch_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t touch_id
     * }
     */
    public static int touch_id(MemorySegment struct) {
        return struct.get(touch_id$LAYOUT, touch_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t touch_id
     * }
     */
    public static void touch_id(MemorySegment struct, int fieldValue) {
        struct.set(touch_id$LAYOUT, touch_id$OFFSET, fieldValue);
    }

    private static final AddressLayout surface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("surface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static final AddressLayout surface$layout() {
        return surface$LAYOUT;
    }

    private static final long surface$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static final long surface$offset() {
        return surface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static MemorySegment surface(MemorySegment struct) {
        return struct.get(surface$LAYOUT, surface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static void surface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(surface$LAYOUT, surface$OFFSET, fieldValue);
    }

    private static final AddressLayout client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *client
     * }
     */
    public static final AddressLayout client$layout() {
        return client$LAYOUT;
    }

    private static final long client$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *client
     * }
     */
    public static final long client$offset() {
        return client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *client
     * }
     */
    public static MemorySegment client(MemorySegment struct) {
        return struct.get(client$LAYOUT, client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *client
     * }
     */
    public static void client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client$LAYOUT, client$OFFSET, fieldValue);
    }

    private static final AddressLayout focus_surface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("focus_surface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface *focus_surface
     * }
     */
    public static final AddressLayout focus_surface$layout() {
        return focus_surface$LAYOUT;
    }

    private static final long focus_surface$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface *focus_surface
     * }
     */
    public static final long focus_surface$offset() {
        return focus_surface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface *focus_surface
     * }
     */
    public static MemorySegment focus_surface(MemorySegment struct) {
        return struct.get(focus_surface$LAYOUT, focus_surface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface *focus_surface
     * }
     */
    public static void focus_surface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(focus_surface$LAYOUT, focus_surface$OFFSET, fieldValue);
    }

    private static final AddressLayout focus_client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("focus_client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focus_client
     * }
     */
    public static final AddressLayout focus_client$layout() {
        return focus_client$LAYOUT;
    }

    private static final long focus_client$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focus_client
     * }
     */
    public static final long focus_client$offset() {
        return focus_client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focus_client
     * }
     */
    public static MemorySegment focus_client(MemorySegment struct) {
        return struct.get(focus_client$LAYOUT, focus_client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focus_client
     * }
     */
    public static void focus_client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(focus_client$LAYOUT, focus_client$OFFSET, fieldValue);
    }

    private static final OfDouble sx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static final OfDouble sx$layout() {
        return sx$LAYOUT;
    }

    private static final long sx$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static final long sx$offset() {
        return sx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static double sx(MemorySegment struct) {
        return struct.get(sx$LAYOUT, sx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static void sx(MemorySegment struct, double fieldValue) {
        struct.set(sx$LAYOUT, sx$OFFSET, fieldValue);
    }

    private static final OfDouble sy$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static final OfDouble sy$layout() {
        return sy$LAYOUT;
    }

    private static final long sy$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static final long sy$offset() {
        return sy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static double sy(MemorySegment struct) {
        return struct.get(sy$LAYOUT, sy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static void sy(MemorySegment struct, double fieldValue) {
        struct.set(sy$LAYOUT, sy$OFFSET, fieldValue);
    }

    private static final GroupLayout surface_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surface_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static final GroupLayout surface_destroy$layout() {
        return surface_destroy$LAYOUT;
    }

    private static final long surface_destroy$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static final long surface_destroy$offset() {
        return surface_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static MemorySegment surface_destroy(MemorySegment struct) {
        return struct.asSlice(surface_destroy$OFFSET, surface_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static void surface_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surface_destroy$OFFSET, surface_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout focus_surface_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("focus_surface_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener focus_surface_destroy
     * }
     */
    public static final GroupLayout focus_surface_destroy$layout() {
        return focus_surface_destroy$LAYOUT;
    }

    private static final long focus_surface_destroy$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener focus_surface_destroy
     * }
     */
    public static final long focus_surface_destroy$offset() {
        return focus_surface_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener focus_surface_destroy
     * }
     */
    public static MemorySegment focus_surface_destroy(MemorySegment struct) {
        return struct.asSlice(focus_surface_destroy$OFFSET, focus_surface_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener focus_surface_destroy
     * }
     */
    public static void focus_surface_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, focus_surface_destroy$OFFSET, focus_surface_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout client_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("client_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener client_destroy
     * }
     */
    public static final GroupLayout client_destroy$layout() {
        return client_destroy$LAYOUT;
    }

    private static final long client_destroy$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener client_destroy
     * }
     */
    public static final long client_destroy$offset() {
        return client_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener client_destroy
     * }
     */
    public static MemorySegment client_destroy(MemorySegment struct) {
        return struct.asSlice(client_destroy$OFFSET, client_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener client_destroy
     * }
     */
    public static void client_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, client_destroy$OFFSET, client_destroy$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("destroy")
        ).withName("$anon$85:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("destroy"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final GroupLayout destroy$layout() {
            return destroy$LAYOUT;
        }

        private static final long destroy$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final long destroy$offset() {
            return destroy$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static MemorySegment destroy(MemorySegment struct) {
            return struct.asSlice(destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final GroupLayout link$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final GroupLayout link$layout() {
        return link$LAYOUT;
    }

    private static final long link$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final long link$offset() {
        return link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static MemorySegment link(MemorySegment struct) {
        return struct.asSlice(link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static void link(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


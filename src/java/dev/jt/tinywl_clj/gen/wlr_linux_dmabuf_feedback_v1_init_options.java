// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_linux_dmabuf_feedback_v1_init_options {
 *     struct wlr_renderer *main_renderer;
 *     struct wlr_output *scanout_primary_output;
 *     const struct wlr_output_layer_feedback_event *output_layer_feedback_event;
 * }
 * }
 */
public class wlr_linux_dmabuf_feedback_v1_init_options {

    wlr_linux_dmabuf_feedback_v1_init_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("main_renderer"),
        C.C_POINTER.withName("scanout_primary_output"),
        C.C_POINTER.withName("output_layer_feedback_event")
    ).withName("wlr_linux_dmabuf_feedback_v1_init_options");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout main_renderer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("main_renderer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_renderer *main_renderer
     * }
     */
    public static final AddressLayout main_renderer$layout() {
        return main_renderer$LAYOUT;
    }

    private static final long main_renderer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_renderer *main_renderer
     * }
     */
    public static final long main_renderer$offset() {
        return main_renderer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_renderer *main_renderer
     * }
     */
    public static MemorySegment main_renderer(MemorySegment struct) {
        return struct.get(main_renderer$LAYOUT, main_renderer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_renderer *main_renderer
     * }
     */
    public static void main_renderer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(main_renderer$LAYOUT, main_renderer$OFFSET, fieldValue);
    }

    private static final AddressLayout scanout_primary_output$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("scanout_primary_output"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_output *scanout_primary_output
     * }
     */
    public static final AddressLayout scanout_primary_output$layout() {
        return scanout_primary_output$LAYOUT;
    }

    private static final long scanout_primary_output$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_output *scanout_primary_output
     * }
     */
    public static final long scanout_primary_output$offset() {
        return scanout_primary_output$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_output *scanout_primary_output
     * }
     */
    public static MemorySegment scanout_primary_output(MemorySegment struct) {
        return struct.get(scanout_primary_output$LAYOUT, scanout_primary_output$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_output *scanout_primary_output
     * }
     */
    public static void scanout_primary_output(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(scanout_primary_output$LAYOUT, scanout_primary_output$OFFSET, fieldValue);
    }

    private static final AddressLayout output_layer_feedback_event$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("output_layer_feedback_event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct wlr_output_layer_feedback_event *output_layer_feedback_event
     * }
     */
    public static final AddressLayout output_layer_feedback_event$layout() {
        return output_layer_feedback_event$LAYOUT;
    }

    private static final long output_layer_feedback_event$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct wlr_output_layer_feedback_event *output_layer_feedback_event
     * }
     */
    public static final long output_layer_feedback_event$offset() {
        return output_layer_feedback_event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct wlr_output_layer_feedback_event *output_layer_feedback_event
     * }
     */
    public static MemorySegment output_layer_feedback_event(MemorySegment struct) {
        return struct.get(output_layer_feedback_event$LAYOUT, output_layer_feedback_event$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct wlr_output_layer_feedback_event *output_layer_feedback_event
     * }
     */
    public static void output_layer_feedback_event(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(output_layer_feedback_event$LAYOUT, output_layer_feedback_event$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


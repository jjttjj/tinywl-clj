// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_output_state {
 *     uint32_t committed;
 *     bool allow_reconfiguration;
 *     pixman_region32_t damage;
 *     bool enabled;
 *     float scale;
 *     enum wl_output_transform transform;
 *     bool adaptive_sync_enabled;
 *     uint32_t render_format;
 *     enum wl_output_subpixel subpixel;
 *     struct wlr_buffer *buffer;
 *     bool tearing_page_flip;
 *     enum wlr_output_state_mode_type mode_type;
 *     struct wlr_output_mode *mode;
 *     struct {
 *         int32_t width;
 *         int32_t height;
 *         int32_t refresh;
 *     } custom_mode;
 *     uint16_t *gamma_lut;
 *     size_t gamma_lut_size;
 *     struct wlr_output_layer_state *layers;
 *     size_t layers_len;
 * }
 * }
 */
public class wlr_output_state {

    wlr_output_state() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("committed"),
        C.C_BOOL.withName("allow_reconfiguration"),
        MemoryLayout.paddingLayout(3),
        pixman_region32.layout().withName("damage"),
        C.C_BOOL.withName("enabled"),
        MemoryLayout.paddingLayout(3),
        C.C_FLOAT.withName("scale"),
        C.C_INT.withName("transform"),
        C.C_BOOL.withName("adaptive_sync_enabled"),
        MemoryLayout.paddingLayout(3),
        C.C_INT.withName("render_format"),
        C.C_INT.withName("subpixel"),
        C.C_POINTER.withName("buffer"),
        C.C_BOOL.withName("tearing_page_flip"),
        MemoryLayout.paddingLayout(3),
        C.C_INT.withName("mode_type"),
        C.C_POINTER.withName("mode"),
        wlr_output_state.custom_mode.layout().withName("custom_mode"),
        MemoryLayout.paddingLayout(4),
        C.C_POINTER.withName("gamma_lut"),
        C.C_LONG.withName("gamma_lut_size"),
        C.C_POINTER.withName("layers"),
        C.C_LONG.withName("layers_len")
    ).withName("wlr_output_state");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt committed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("committed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t committed
     * }
     */
    public static final OfInt committed$layout() {
        return committed$LAYOUT;
    }

    private static final long committed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t committed
     * }
     */
    public static final long committed$offset() {
        return committed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t committed
     * }
     */
    public static int committed(MemorySegment struct) {
        return struct.get(committed$LAYOUT, committed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t committed
     * }
     */
    public static void committed(MemorySegment struct, int fieldValue) {
        struct.set(committed$LAYOUT, committed$OFFSET, fieldValue);
    }

    private static final OfBoolean allow_reconfiguration$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("allow_reconfiguration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool allow_reconfiguration
     * }
     */
    public static final OfBoolean allow_reconfiguration$layout() {
        return allow_reconfiguration$LAYOUT;
    }

    private static final long allow_reconfiguration$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool allow_reconfiguration
     * }
     */
    public static final long allow_reconfiguration$offset() {
        return allow_reconfiguration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool allow_reconfiguration
     * }
     */
    public static boolean allow_reconfiguration(MemorySegment struct) {
        return struct.get(allow_reconfiguration$LAYOUT, allow_reconfiguration$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool allow_reconfiguration
     * }
     */
    public static void allow_reconfiguration(MemorySegment struct, boolean fieldValue) {
        struct.set(allow_reconfiguration$LAYOUT, allow_reconfiguration$OFFSET, fieldValue);
    }

    private static final GroupLayout damage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("damage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t damage
     * }
     */
    public static final GroupLayout damage$layout() {
        return damage$LAYOUT;
    }

    private static final long damage$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t damage
     * }
     */
    public static final long damage$offset() {
        return damage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t damage
     * }
     */
    public static MemorySegment damage(MemorySegment struct) {
        return struct.asSlice(damage$OFFSET, damage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t damage
     * }
     */
    public static void damage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, damage$OFFSET, damage$LAYOUT.byteSize());
    }

    private static final OfBoolean enabled$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("enabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static final OfBoolean enabled$layout() {
        return enabled$LAYOUT;
    }

    private static final long enabled$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static final long enabled$offset() {
        return enabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static boolean enabled(MemorySegment struct) {
        return struct.get(enabled$LAYOUT, enabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static void enabled(MemorySegment struct, boolean fieldValue) {
        struct.set(enabled$LAYOUT, enabled$OFFSET, fieldValue);
    }

    private static final OfFloat scale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static final OfFloat scale$layout() {
        return scale$LAYOUT;
    }

    private static final long scale$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static final long scale$offset() {
        return scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static float scale(MemorySegment struct) {
        return struct.get(scale$LAYOUT, scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static void scale(MemorySegment struct, float fieldValue) {
        struct.set(scale$LAYOUT, scale$OFFSET, fieldValue);
    }

    private static final OfInt transform$LAYOUT = (OfInt)$LAYOUT.select(groupElement("transform"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static final OfInt transform$layout() {
        return transform$LAYOUT;
    }

    private static final long transform$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static final long transform$offset() {
        return transform$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static int transform(MemorySegment struct) {
        return struct.get(transform$LAYOUT, transform$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static void transform(MemorySegment struct, int fieldValue) {
        struct.set(transform$LAYOUT, transform$OFFSET, fieldValue);
    }

    private static final OfBoolean adaptive_sync_enabled$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("adaptive_sync_enabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool adaptive_sync_enabled
     * }
     */
    public static final OfBoolean adaptive_sync_enabled$layout() {
        return adaptive_sync_enabled$LAYOUT;
    }

    private static final long adaptive_sync_enabled$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool adaptive_sync_enabled
     * }
     */
    public static final long adaptive_sync_enabled$offset() {
        return adaptive_sync_enabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool adaptive_sync_enabled
     * }
     */
    public static boolean adaptive_sync_enabled(MemorySegment struct) {
        return struct.get(adaptive_sync_enabled$LAYOUT, adaptive_sync_enabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool adaptive_sync_enabled
     * }
     */
    public static void adaptive_sync_enabled(MemorySegment struct, boolean fieldValue) {
        struct.set(adaptive_sync_enabled$LAYOUT, adaptive_sync_enabled$OFFSET, fieldValue);
    }

    private static final OfInt render_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("render_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t render_format
     * }
     */
    public static final OfInt render_format$layout() {
        return render_format$LAYOUT;
    }

    private static final long render_format$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t render_format
     * }
     */
    public static final long render_format$offset() {
        return render_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t render_format
     * }
     */
    public static int render_format(MemorySegment struct) {
        return struct.get(render_format$LAYOUT, render_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t render_format
     * }
     */
    public static void render_format(MemorySegment struct, int fieldValue) {
        struct.set(render_format$LAYOUT, render_format$OFFSET, fieldValue);
    }

    private static final OfInt subpixel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subpixel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wl_output_subpixel subpixel
     * }
     */
    public static final OfInt subpixel$layout() {
        return subpixel$LAYOUT;
    }

    private static final long subpixel$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wl_output_subpixel subpixel
     * }
     */
    public static final long subpixel$offset() {
        return subpixel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wl_output_subpixel subpixel
     * }
     */
    public static int subpixel(MemorySegment struct) {
        return struct.get(subpixel$LAYOUT, subpixel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wl_output_subpixel subpixel
     * }
     */
    public static void subpixel(MemorySegment struct, int fieldValue) {
        struct.set(subpixel$LAYOUT, subpixel$OFFSET, fieldValue);
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_buffer *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_buffer *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_buffer *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_buffer *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final OfBoolean tearing_page_flip$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("tearing_page_flip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool tearing_page_flip
     * }
     */
    public static final OfBoolean tearing_page_flip$layout() {
        return tearing_page_flip$LAYOUT;
    }

    private static final long tearing_page_flip$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool tearing_page_flip
     * }
     */
    public static final long tearing_page_flip$offset() {
        return tearing_page_flip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool tearing_page_flip
     * }
     */
    public static boolean tearing_page_flip(MemorySegment struct) {
        return struct.get(tearing_page_flip$LAYOUT, tearing_page_flip$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool tearing_page_flip
     * }
     */
    public static void tearing_page_flip(MemorySegment struct, boolean fieldValue) {
        struct.set(tearing_page_flip$LAYOUT, tearing_page_flip$OFFSET, fieldValue);
    }

    private static final OfInt mode_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wlr_output_state_mode_type mode_type
     * }
     */
    public static final OfInt mode_type$layout() {
        return mode_type$LAYOUT;
    }

    private static final long mode_type$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wlr_output_state_mode_type mode_type
     * }
     */
    public static final long mode_type$offset() {
        return mode_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wlr_output_state_mode_type mode_type
     * }
     */
    public static int mode_type(MemorySegment struct) {
        return struct.get(mode_type$LAYOUT, mode_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wlr_output_state_mode_type mode_type
     * }
     */
    public static void mode_type(MemorySegment struct, int fieldValue) {
        struct.set(mode_type$LAYOUT, mode_type$OFFSET, fieldValue);
    }

    private static final AddressLayout mode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_output_mode *mode
     * }
     */
    public static final AddressLayout mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_output_mode *mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_output_mode *mode
     * }
     */
    public static MemorySegment mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_output_mode *mode
     * }
     */
    public static void mode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     int32_t width;
     *     int32_t height;
     *     int32_t refresh;
     * }
     * }
     */
    public static class custom_mode {

        custom_mode() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            C.C_INT.withName("width"),
            C.C_INT.withName("height"),
            C.C_INT.withName("refresh")
        ).withName("$anon$101:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int32_t width
         * }
         */
        public static final OfInt width$layout() {
            return width$LAYOUT;
        }

        private static final long width$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int32_t width
         * }
         */
        public static final long width$offset() {
            return width$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int32_t width
         * }
         */
        public static int width(MemorySegment struct) {
            return struct.get(width$LAYOUT, width$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int32_t width
         * }
         */
        public static void width(MemorySegment struct, int fieldValue) {
            struct.set(width$LAYOUT, width$OFFSET, fieldValue);
        }

        private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int32_t height
         * }
         */
        public static final OfInt height$layout() {
            return height$LAYOUT;
        }

        private static final long height$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int32_t height
         * }
         */
        public static final long height$offset() {
            return height$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int32_t height
         * }
         */
        public static int height(MemorySegment struct) {
            return struct.get(height$LAYOUT, height$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int32_t height
         * }
         */
        public static void height(MemorySegment struct, int fieldValue) {
            struct.set(height$LAYOUT, height$OFFSET, fieldValue);
        }

        private static final OfInt refresh$LAYOUT = (OfInt)$LAYOUT.select(groupElement("refresh"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int32_t refresh
         * }
         */
        public static final OfInt refresh$layout() {
            return refresh$LAYOUT;
        }

        private static final long refresh$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int32_t refresh
         * }
         */
        public static final long refresh$offset() {
            return refresh$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int32_t refresh
         * }
         */
        public static int refresh(MemorySegment struct) {
            return struct.get(refresh$LAYOUT, refresh$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int32_t refresh
         * }
         */
        public static void refresh(MemorySegment struct, int fieldValue) {
            struct.set(refresh$LAYOUT, refresh$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout custom_mode$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("custom_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t width;
     *     int32_t height;
     *     int32_t refresh;
     * } custom_mode
     * }
     */
    public static final GroupLayout custom_mode$layout() {
        return custom_mode$LAYOUT;
    }

    private static final long custom_mode$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t width;
     *     int32_t height;
     *     int32_t refresh;
     * } custom_mode
     * }
     */
    public static final long custom_mode$offset() {
        return custom_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t width;
     *     int32_t height;
     *     int32_t refresh;
     * } custom_mode
     * }
     */
    public static MemorySegment custom_mode(MemorySegment struct) {
        return struct.asSlice(custom_mode$OFFSET, custom_mode$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t width;
     *     int32_t height;
     *     int32_t refresh;
     * } custom_mode
     * }
     */
    public static void custom_mode(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, custom_mode$OFFSET, custom_mode$LAYOUT.byteSize());
    }

    private static final AddressLayout gamma_lut$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gamma_lut"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t *gamma_lut
     * }
     */
    public static final AddressLayout gamma_lut$layout() {
        return gamma_lut$LAYOUT;
    }

    private static final long gamma_lut$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t *gamma_lut
     * }
     */
    public static final long gamma_lut$offset() {
        return gamma_lut$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t *gamma_lut
     * }
     */
    public static MemorySegment gamma_lut(MemorySegment struct) {
        return struct.get(gamma_lut$LAYOUT, gamma_lut$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t *gamma_lut
     * }
     */
    public static void gamma_lut(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gamma_lut$LAYOUT, gamma_lut$OFFSET, fieldValue);
    }

    private static final OfLong gamma_lut_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("gamma_lut_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t gamma_lut_size
     * }
     */
    public static final OfLong gamma_lut_size$layout() {
        return gamma_lut_size$LAYOUT;
    }

    private static final long gamma_lut_size$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t gamma_lut_size
     * }
     */
    public static final long gamma_lut_size$offset() {
        return gamma_lut_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t gamma_lut_size
     * }
     */
    public static long gamma_lut_size(MemorySegment struct) {
        return struct.get(gamma_lut_size$LAYOUT, gamma_lut_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t gamma_lut_size
     * }
     */
    public static void gamma_lut_size(MemorySegment struct, long fieldValue) {
        struct.set(gamma_lut_size$LAYOUT, gamma_lut_size$OFFSET, fieldValue);
    }

    private static final AddressLayout layers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("layers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_output_layer_state *layers
     * }
     */
    public static final AddressLayout layers$layout() {
        return layers$LAYOUT;
    }

    private static final long layers$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_output_layer_state *layers
     * }
     */
    public static final long layers$offset() {
        return layers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_output_layer_state *layers
     * }
     */
    public static MemorySegment layers(MemorySegment struct) {
        return struct.get(layers$LAYOUT, layers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_output_layer_state *layers
     * }
     */
    public static void layers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(layers$LAYOUT, layers$OFFSET, fieldValue);
    }

    private static final OfLong layers_len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("layers_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t layers_len
     * }
     */
    public static final OfLong layers_len$layout() {
        return layers_len$LAYOUT;
    }

    private static final long layers_len$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t layers_len
     * }
     */
    public static final long layers_len$offset() {
        return layers_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t layers_len
     * }
     */
    public static long layers_len(MemorySegment struct) {
        return struct.get(layers_len$LAYOUT, layers_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t layers_len
     * }
     */
    public static void layers_len(MemorySegment struct, long fieldValue) {
        struct.set(layers_len$LAYOUT, layers_len$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


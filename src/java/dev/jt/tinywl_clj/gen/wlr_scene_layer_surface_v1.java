// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_scene_layer_surface_v1 {
 *     struct wlr_scene_tree *tree;
 *     struct wlr_layer_surface_v1 *layer_surface;
 *     struct wl_listener tree_destroy;
 *     struct wl_listener layer_surface_destroy;
 *     struct wl_listener layer_surface_map;
 *     struct wl_listener layer_surface_unmap;
 * }
 * }
 */
public class wlr_scene_layer_surface_v1 {

    wlr_scene_layer_surface_v1() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("tree"),
        C.C_POINTER.withName("layer_surface"),
        wl_listener.layout().withName("tree_destroy"),
        wl_listener.layout().withName("layer_surface_destroy"),
        wl_listener.layout().withName("layer_surface_map"),
        wl_listener.layout().withName("layer_surface_unmap")
    ).withName("wlr_scene_layer_surface_v1");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout tree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_scene_tree *tree
     * }
     */
    public static final AddressLayout tree$layout() {
        return tree$LAYOUT;
    }

    private static final long tree$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_scene_tree *tree
     * }
     */
    public static final long tree$offset() {
        return tree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_scene_tree *tree
     * }
     */
    public static MemorySegment tree(MemorySegment struct) {
        return struct.get(tree$LAYOUT, tree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_scene_tree *tree
     * }
     */
    public static void tree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tree$LAYOUT, tree$OFFSET, fieldValue);
    }

    private static final AddressLayout layer_surface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("layer_surface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_layer_surface_v1 *layer_surface
     * }
     */
    public static final AddressLayout layer_surface$layout() {
        return layer_surface$LAYOUT;
    }

    private static final long layer_surface$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_layer_surface_v1 *layer_surface
     * }
     */
    public static final long layer_surface$offset() {
        return layer_surface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_layer_surface_v1 *layer_surface
     * }
     */
    public static MemorySegment layer_surface(MemorySegment struct) {
        return struct.get(layer_surface$LAYOUT, layer_surface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_layer_surface_v1 *layer_surface
     * }
     */
    public static void layer_surface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(layer_surface$LAYOUT, layer_surface$OFFSET, fieldValue);
    }

    private static final GroupLayout tree_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tree_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener tree_destroy
     * }
     */
    public static final GroupLayout tree_destroy$layout() {
        return tree_destroy$LAYOUT;
    }

    private static final long tree_destroy$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener tree_destroy
     * }
     */
    public static final long tree_destroy$offset() {
        return tree_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener tree_destroy
     * }
     */
    public static MemorySegment tree_destroy(MemorySegment struct) {
        return struct.asSlice(tree_destroy$OFFSET, tree_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener tree_destroy
     * }
     */
    public static void tree_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tree_destroy$OFFSET, tree_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout layer_surface_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("layer_surface_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_destroy
     * }
     */
    public static final GroupLayout layer_surface_destroy$layout() {
        return layer_surface_destroy$LAYOUT;
    }

    private static final long layer_surface_destroy$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_destroy
     * }
     */
    public static final long layer_surface_destroy$offset() {
        return layer_surface_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_destroy
     * }
     */
    public static MemorySegment layer_surface_destroy(MemorySegment struct) {
        return struct.asSlice(layer_surface_destroy$OFFSET, layer_surface_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_destroy
     * }
     */
    public static void layer_surface_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, layer_surface_destroy$OFFSET, layer_surface_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout layer_surface_map$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("layer_surface_map"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_map
     * }
     */
    public static final GroupLayout layer_surface_map$layout() {
        return layer_surface_map$LAYOUT;
    }

    private static final long layer_surface_map$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_map
     * }
     */
    public static final long layer_surface_map$offset() {
        return layer_surface_map$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_map
     * }
     */
    public static MemorySegment layer_surface_map(MemorySegment struct) {
        return struct.asSlice(layer_surface_map$OFFSET, layer_surface_map$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_map
     * }
     */
    public static void layer_surface_map(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, layer_surface_map$OFFSET, layer_surface_map$LAYOUT.byteSize());
    }

    private static final GroupLayout layer_surface_unmap$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("layer_surface_unmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_unmap
     * }
     */
    public static final GroupLayout layer_surface_unmap$layout() {
        return layer_surface_unmap$LAYOUT;
    }

    private static final long layer_surface_unmap$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_unmap
     * }
     */
    public static final long layer_surface_unmap$offset() {
        return layer_surface_unmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_unmap
     * }
     */
    public static MemorySegment layer_surface_unmap(MemorySegment struct) {
        return struct.asSlice(layer_surface_unmap$OFFSET, layer_surface_unmap$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener layer_surface_unmap
     * }
     */
    public static void layer_surface_unmap(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, layer_surface_unmap$OFFSET, layer_surface_unmap$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


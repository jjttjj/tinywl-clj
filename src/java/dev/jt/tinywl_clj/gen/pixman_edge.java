// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct pixman_edge {
 *     pixman_fixed_t x;
 *     pixman_fixed_t e;
 *     pixman_fixed_t stepx;
 *     pixman_fixed_t signdx;
 *     pixman_fixed_t dy;
 *     pixman_fixed_t dx;
 *     pixman_fixed_t stepx_small;
 *     pixman_fixed_t stepx_big;
 *     pixman_fixed_t dx_small;
 *     pixman_fixed_t dx_big;
 * }
 * }
 */
public class pixman_edge {

    pixman_edge() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("x"),
        C.C_INT.withName("e"),
        C.C_INT.withName("stepx"),
        C.C_INT.withName("signdx"),
        C.C_INT.withName("dy"),
        C.C_INT.withName("dx"),
        C.C_INT.withName("stepx_small"),
        C.C_INT.withName("stepx_big"),
        C.C_INT.withName("dx_small"),
        C.C_INT.withName("dx_big")
    ).withName("pixman_edge");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt x$LAYOUT = (OfInt)$LAYOUT.select(groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_fixed_t x
     * }
     */
    public static final OfInt x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_fixed_t x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_fixed_t x
     * }
     */
    public static int x(MemorySegment struct) {
        return struct.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_fixed_t x
     * }
     */
    public static void x(MemorySegment struct, int fieldValue) {
        struct.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final OfInt e$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_fixed_t e
     * }
     */
    public static final OfInt e$layout() {
        return e$LAYOUT;
    }

    private static final long e$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_fixed_t e
     * }
     */
    public static final long e$offset() {
        return e$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_fixed_t e
     * }
     */
    public static int e(MemorySegment struct) {
        return struct.get(e$LAYOUT, e$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_fixed_t e
     * }
     */
    public static void e(MemorySegment struct, int fieldValue) {
        struct.set(e$LAYOUT, e$OFFSET, fieldValue);
    }

    private static final OfInt stepx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stepx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx
     * }
     */
    public static final OfInt stepx$layout() {
        return stepx$LAYOUT;
    }

    private static final long stepx$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx
     * }
     */
    public static final long stepx$offset() {
        return stepx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx
     * }
     */
    public static int stepx(MemorySegment struct) {
        return struct.get(stepx$LAYOUT, stepx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx
     * }
     */
    public static void stepx(MemorySegment struct, int fieldValue) {
        struct.set(stepx$LAYOUT, stepx$OFFSET, fieldValue);
    }

    private static final OfInt signdx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("signdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_fixed_t signdx
     * }
     */
    public static final OfInt signdx$layout() {
        return signdx$LAYOUT;
    }

    private static final long signdx$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_fixed_t signdx
     * }
     */
    public static final long signdx$offset() {
        return signdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_fixed_t signdx
     * }
     */
    public static int signdx(MemorySegment struct) {
        return struct.get(signdx$LAYOUT, signdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_fixed_t signdx
     * }
     */
    public static void signdx(MemorySegment struct, int fieldValue) {
        struct.set(signdx$LAYOUT, signdx$OFFSET, fieldValue);
    }

    private static final OfInt dy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_fixed_t dy
     * }
     */
    public static final OfInt dy$layout() {
        return dy$LAYOUT;
    }

    private static final long dy$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_fixed_t dy
     * }
     */
    public static final long dy$offset() {
        return dy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_fixed_t dy
     * }
     */
    public static int dy(MemorySegment struct) {
        return struct.get(dy$LAYOUT, dy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_fixed_t dy
     * }
     */
    public static void dy(MemorySegment struct, int fieldValue) {
        struct.set(dy$LAYOUT, dy$OFFSET, fieldValue);
    }

    private static final OfInt dx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx
     * }
     */
    public static final OfInt dx$layout() {
        return dx$LAYOUT;
    }

    private static final long dx$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx
     * }
     */
    public static final long dx$offset() {
        return dx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx
     * }
     */
    public static int dx(MemorySegment struct) {
        return struct.get(dx$LAYOUT, dx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx
     * }
     */
    public static void dx(MemorySegment struct, int fieldValue) {
        struct.set(dx$LAYOUT, dx$OFFSET, fieldValue);
    }

    private static final OfInt stepx_small$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stepx_small"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx_small
     * }
     */
    public static final OfInt stepx_small$layout() {
        return stepx_small$LAYOUT;
    }

    private static final long stepx_small$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx_small
     * }
     */
    public static final long stepx_small$offset() {
        return stepx_small$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx_small
     * }
     */
    public static int stepx_small(MemorySegment struct) {
        return struct.get(stepx_small$LAYOUT, stepx_small$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx_small
     * }
     */
    public static void stepx_small(MemorySegment struct, int fieldValue) {
        struct.set(stepx_small$LAYOUT, stepx_small$OFFSET, fieldValue);
    }

    private static final OfInt stepx_big$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stepx_big"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx_big
     * }
     */
    public static final OfInt stepx_big$layout() {
        return stepx_big$LAYOUT;
    }

    private static final long stepx_big$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx_big
     * }
     */
    public static final long stepx_big$offset() {
        return stepx_big$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx_big
     * }
     */
    public static int stepx_big(MemorySegment struct) {
        return struct.get(stepx_big$LAYOUT, stepx_big$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_fixed_t stepx_big
     * }
     */
    public static void stepx_big(MemorySegment struct, int fieldValue) {
        struct.set(stepx_big$LAYOUT, stepx_big$OFFSET, fieldValue);
    }

    private static final OfInt dx_small$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dx_small"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx_small
     * }
     */
    public static final OfInt dx_small$layout() {
        return dx_small$LAYOUT;
    }

    private static final long dx_small$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx_small
     * }
     */
    public static final long dx_small$offset() {
        return dx_small$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx_small
     * }
     */
    public static int dx_small(MemorySegment struct) {
        return struct.get(dx_small$LAYOUT, dx_small$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx_small
     * }
     */
    public static void dx_small(MemorySegment struct, int fieldValue) {
        struct.set(dx_small$LAYOUT, dx_small$OFFSET, fieldValue);
    }

    private static final OfInt dx_big$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dx_big"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx_big
     * }
     */
    public static final OfInt dx_big$layout() {
        return dx_big$LAYOUT;
    }

    private static final long dx_big$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx_big
     * }
     */
    public static final long dx_big$offset() {
        return dx_big$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx_big
     * }
     */
    public static int dx_big(MemorySegment struct) {
        return struct.get(dx_big$LAYOUT, dx_big$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_fixed_t dx_big
     * }
     */
    public static void dx_big(MemorySegment struct, int fieldValue) {
        struct.set(dx_big$LAYOUT, dx_big$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


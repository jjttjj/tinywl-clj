// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_linux_dmabuf_v1 {
 *     struct wl_global *global;
 *     struct {
 *         struct wl_signal destroy;
 *     } events;
 *     struct wlr_linux_dmabuf_feedback_v1_compiled *default_feedback;
 *     struct wlr_drm_format_set default_formats;
 *     struct wl_list surfaces;
 *     int main_device_fd;
 *     struct wl_listener display_destroy;
 * }
 * }
 */
public class wlr_linux_dmabuf_v1 {

    wlr_linux_dmabuf_v1() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("global"),
        wlr_linux_dmabuf_v1.events.layout().withName("events"),
        C.C_POINTER.withName("default_feedback"),
        wlr_drm_format_set.layout().withName("default_formats"),
        wl_list.layout().withName("surfaces"),
        C.C_INT.withName("main_device_fd"),
        MemoryLayout.paddingLayout(4),
        wl_listener.layout().withName("display_destroy")
    ).withName("wlr_linux_dmabuf_v1");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout global$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("global"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static final AddressLayout global$layout() {
        return global$LAYOUT;
    }

    private static final long global$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static final long global$offset() {
        return global$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static MemorySegment global(MemorySegment struct) {
        return struct.get(global$LAYOUT, global$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_global *global
     * }
     */
    public static void global(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(global$LAYOUT, global$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("destroy")
        ).withName("$anon$54:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("destroy"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final GroupLayout destroy$layout() {
            return destroy$LAYOUT;
        }

        private static final long destroy$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final long destroy$offset() {
            return destroy$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static MemorySegment destroy(MemorySegment struct) {
            return struct.asSlice(destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final AddressLayout default_feedback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("default_feedback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_linux_dmabuf_feedback_v1_compiled *default_feedback
     * }
     */
    public static final AddressLayout default_feedback$layout() {
        return default_feedback$LAYOUT;
    }

    private static final long default_feedback$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_linux_dmabuf_feedback_v1_compiled *default_feedback
     * }
     */
    public static final long default_feedback$offset() {
        return default_feedback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_linux_dmabuf_feedback_v1_compiled *default_feedback
     * }
     */
    public static MemorySegment default_feedback(MemorySegment struct) {
        return struct.get(default_feedback$LAYOUT, default_feedback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_linux_dmabuf_feedback_v1_compiled *default_feedback
     * }
     */
    public static void default_feedback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(default_feedback$LAYOUT, default_feedback$OFFSET, fieldValue);
    }

    private static final GroupLayout default_formats$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("default_formats"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_drm_format_set default_formats
     * }
     */
    public static final GroupLayout default_formats$layout() {
        return default_formats$LAYOUT;
    }

    private static final long default_formats$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_drm_format_set default_formats
     * }
     */
    public static final long default_formats$offset() {
        return default_formats$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_drm_format_set default_formats
     * }
     */
    public static MemorySegment default_formats(MemorySegment struct) {
        return struct.asSlice(default_formats$OFFSET, default_formats$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_drm_format_set default_formats
     * }
     */
    public static void default_formats(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, default_formats$OFFSET, default_formats$LAYOUT.byteSize());
    }

    private static final GroupLayout surfaces$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surfaces"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list surfaces
     * }
     */
    public static final GroupLayout surfaces$layout() {
        return surfaces$LAYOUT;
    }

    private static final long surfaces$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list surfaces
     * }
     */
    public static final long surfaces$offset() {
        return surfaces$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list surfaces
     * }
     */
    public static MemorySegment surfaces(MemorySegment struct) {
        return struct.asSlice(surfaces$OFFSET, surfaces$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list surfaces
     * }
     */
    public static void surfaces(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surfaces$OFFSET, surfaces$LAYOUT.byteSize());
    }

    private static final OfInt main_device_fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("main_device_fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int main_device_fd
     * }
     */
    public static final OfInt main_device_fd$layout() {
        return main_device_fd$LAYOUT;
    }

    private static final long main_device_fd$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int main_device_fd
     * }
     */
    public static final long main_device_fd$offset() {
        return main_device_fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int main_device_fd
     * }
     */
    public static int main_device_fd(MemorySegment struct) {
        return struct.get(main_device_fd$LAYOUT, main_device_fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int main_device_fd
     * }
     */
    public static void main_device_fd(MemorySegment struct, int fieldValue) {
        struct.set(main_device_fd$LAYOUT, main_device_fd$OFFSET, fieldValue);
    }

    private static final GroupLayout display_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("display_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static final GroupLayout display_destroy$layout() {
        return display_destroy$LAYOUT;
    }

    private static final long display_destroy$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static final long display_destroy$offset() {
        return display_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static MemorySegment display_destroy(MemorySegment struct) {
        return struct.asSlice(display_destroy$OFFSET, display_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener display_destroy
     * }
     */
    public static void display_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, display_destroy$OFFSET, display_destroy$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


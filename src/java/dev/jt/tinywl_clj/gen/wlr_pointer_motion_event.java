// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_pointer_motion_event {
 *     struct wlr_pointer *pointer;
 *     uint32_t time_msec;
 *     double delta_x;
 *     double delta_y;
 *     double unaccel_dx;
 *     double unaccel_dy;
 * }
 * }
 */
public class wlr_pointer_motion_event {

    wlr_pointer_motion_event() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("pointer"),
        C.C_INT.withName("time_msec"),
        MemoryLayout.paddingLayout(4),
        C.C_DOUBLE.withName("delta_x"),
        C.C_DOUBLE.withName("delta_y"),
        C.C_DOUBLE.withName("unaccel_dx"),
        C.C_DOUBLE.withName("unaccel_dy")
    ).withName("wlr_pointer_motion_event");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pointer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pointer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_pointer *pointer
     * }
     */
    public static final AddressLayout pointer$layout() {
        return pointer$LAYOUT;
    }

    private static final long pointer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_pointer *pointer
     * }
     */
    public static final long pointer$offset() {
        return pointer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_pointer *pointer
     * }
     */
    public static MemorySegment pointer(MemorySegment struct) {
        return struct.get(pointer$LAYOUT, pointer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_pointer *pointer
     * }
     */
    public static void pointer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pointer$LAYOUT, pointer$OFFSET, fieldValue);
    }

    private static final OfInt time_msec$LAYOUT = (OfInt)$LAYOUT.select(groupElement("time_msec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t time_msec
     * }
     */
    public static final OfInt time_msec$layout() {
        return time_msec$LAYOUT;
    }

    private static final long time_msec$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t time_msec
     * }
     */
    public static final long time_msec$offset() {
        return time_msec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t time_msec
     * }
     */
    public static int time_msec(MemorySegment struct) {
        return struct.get(time_msec$LAYOUT, time_msec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t time_msec
     * }
     */
    public static void time_msec(MemorySegment struct, int fieldValue) {
        struct.set(time_msec$LAYOUT, time_msec$OFFSET, fieldValue);
    }

    private static final OfDouble delta_x$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("delta_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double delta_x
     * }
     */
    public static final OfDouble delta_x$layout() {
        return delta_x$LAYOUT;
    }

    private static final long delta_x$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double delta_x
     * }
     */
    public static final long delta_x$offset() {
        return delta_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double delta_x
     * }
     */
    public static double delta_x(MemorySegment struct) {
        return struct.get(delta_x$LAYOUT, delta_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double delta_x
     * }
     */
    public static void delta_x(MemorySegment struct, double fieldValue) {
        struct.set(delta_x$LAYOUT, delta_x$OFFSET, fieldValue);
    }

    private static final OfDouble delta_y$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("delta_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double delta_y
     * }
     */
    public static final OfDouble delta_y$layout() {
        return delta_y$LAYOUT;
    }

    private static final long delta_y$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double delta_y
     * }
     */
    public static final long delta_y$offset() {
        return delta_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double delta_y
     * }
     */
    public static double delta_y(MemorySegment struct) {
        return struct.get(delta_y$LAYOUT, delta_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double delta_y
     * }
     */
    public static void delta_y(MemorySegment struct, double fieldValue) {
        struct.set(delta_y$LAYOUT, delta_y$OFFSET, fieldValue);
    }

    private static final OfDouble unaccel_dx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("unaccel_dx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double unaccel_dx
     * }
     */
    public static final OfDouble unaccel_dx$layout() {
        return unaccel_dx$LAYOUT;
    }

    private static final long unaccel_dx$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double unaccel_dx
     * }
     */
    public static final long unaccel_dx$offset() {
        return unaccel_dx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double unaccel_dx
     * }
     */
    public static double unaccel_dx(MemorySegment struct) {
        return struct.get(unaccel_dx$LAYOUT, unaccel_dx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double unaccel_dx
     * }
     */
    public static void unaccel_dx(MemorySegment struct, double fieldValue) {
        struct.set(unaccel_dx$LAYOUT, unaccel_dx$OFFSET, fieldValue);
    }

    private static final OfDouble unaccel_dy$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("unaccel_dy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double unaccel_dy
     * }
     */
    public static final OfDouble unaccel_dy$layout() {
        return unaccel_dy$LAYOUT;
    }

    private static final long unaccel_dy$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double unaccel_dy
     * }
     */
    public static final long unaccel_dy$offset() {
        return unaccel_dy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double unaccel_dy
     * }
     */
    public static double unaccel_dy(MemorySegment struct) {
        return struct.get(unaccel_dy$LAYOUT, unaccel_dy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double unaccel_dy
     * }
     */
    public static void unaccel_dy(MemorySegment struct, double fieldValue) {
        struct.set(unaccel_dy$LAYOUT, unaccel_dy$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


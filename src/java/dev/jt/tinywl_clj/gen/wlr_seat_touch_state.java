// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_seat_touch_state {
 *     struct wlr_seat *seat;
 *     struct wl_list touch_points;
 *     uint32_t grab_serial;
 *     uint32_t grab_id;
 *     struct wlr_seat_touch_grab *grab;
 *     struct wlr_seat_touch_grab *default_grab;
 * }
 * }
 */
public class wlr_seat_touch_state {

    wlr_seat_touch_state() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("seat"),
        wl_list.layout().withName("touch_points"),
        C.C_INT.withName("grab_serial"),
        C.C_INT.withName("grab_id"),
        C.C_POINTER.withName("grab"),
        C.C_POINTER.withName("default_grab")
    ).withName("wlr_seat_touch_state");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout seat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final AddressLayout seat$layout() {
        return seat$LAYOUT;
    }

    private static final long seat$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final long seat$offset() {
        return seat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static MemorySegment seat(MemorySegment struct) {
        return struct.get(seat$LAYOUT, seat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static void seat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seat$LAYOUT, seat$OFFSET, fieldValue);
    }

    private static final GroupLayout touch_points$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("touch_points"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list touch_points
     * }
     */
    public static final GroupLayout touch_points$layout() {
        return touch_points$LAYOUT;
    }

    private static final long touch_points$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list touch_points
     * }
     */
    public static final long touch_points$offset() {
        return touch_points$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list touch_points
     * }
     */
    public static MemorySegment touch_points(MemorySegment struct) {
        return struct.asSlice(touch_points$OFFSET, touch_points$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list touch_points
     * }
     */
    public static void touch_points(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, touch_points$OFFSET, touch_points$LAYOUT.byteSize());
    }

    private static final OfInt grab_serial$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grab_serial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t grab_serial
     * }
     */
    public static final OfInt grab_serial$layout() {
        return grab_serial$LAYOUT;
    }

    private static final long grab_serial$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t grab_serial
     * }
     */
    public static final long grab_serial$offset() {
        return grab_serial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t grab_serial
     * }
     */
    public static int grab_serial(MemorySegment struct) {
        return struct.get(grab_serial$LAYOUT, grab_serial$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t grab_serial
     * }
     */
    public static void grab_serial(MemorySegment struct, int fieldValue) {
        struct.set(grab_serial$LAYOUT, grab_serial$OFFSET, fieldValue);
    }

    private static final OfInt grab_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grab_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t grab_id
     * }
     */
    public static final OfInt grab_id$layout() {
        return grab_id$LAYOUT;
    }

    private static final long grab_id$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t grab_id
     * }
     */
    public static final long grab_id$offset() {
        return grab_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t grab_id
     * }
     */
    public static int grab_id(MemorySegment struct) {
        return struct.get(grab_id$LAYOUT, grab_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t grab_id
     * }
     */
    public static void grab_id(MemorySegment struct, int fieldValue) {
        struct.set(grab_id$LAYOUT, grab_id$OFFSET, fieldValue);
    }

    private static final AddressLayout grab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab *grab
     * }
     */
    public static final AddressLayout grab$layout() {
        return grab$LAYOUT;
    }

    private static final long grab$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab *grab
     * }
     */
    public static final long grab$offset() {
        return grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab *grab
     * }
     */
    public static MemorySegment grab(MemorySegment struct) {
        return struct.get(grab$LAYOUT, grab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab *grab
     * }
     */
    public static void grab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(grab$LAYOUT, grab$OFFSET, fieldValue);
    }

    private static final AddressLayout default_grab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("default_grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab *default_grab
     * }
     */
    public static final AddressLayout default_grab$layout() {
        return default_grab$LAYOUT;
    }

    private static final long default_grab$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab *default_grab
     * }
     */
    public static final long default_grab$offset() {
        return default_grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab *default_grab
     * }
     */
    public static MemorySegment default_grab(MemorySegment struct) {
        return struct.get(default_grab$LAYOUT, default_grab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab *default_grab
     * }
     */
    public static void default_grab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(default_grab$LAYOUT, default_grab$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


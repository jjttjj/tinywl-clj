// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_seat_pointer_state {
 *     struct wlr_seat *seat;
 *     struct wlr_seat_client *focused_client;
 *     struct wlr_surface *focused_surface;
 *     double sx;
 *     double sy;
 *     struct wlr_seat_pointer_grab *grab;
 *     struct wlr_seat_pointer_grab *default_grab;
 *     bool sent_axis_source;
 *     enum wlr_axis_source cached_axis_source;
 *     uint32_t buttons[16];
 *     size_t button_count;
 *     uint32_t grab_button;
 *     uint32_t grab_serial;
 *     uint32_t grab_time;
 *     struct wl_listener surface_destroy;
 *     struct {
 *         struct wl_signal focus_change;
 *     } events;
 * }
 * }
 */
public class wlr_seat_pointer_state {

    wlr_seat_pointer_state() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("seat"),
        C.C_POINTER.withName("focused_client"),
        C.C_POINTER.withName("focused_surface"),
        C.C_DOUBLE.withName("sx"),
        C.C_DOUBLE.withName("sy"),
        C.C_POINTER.withName("grab"),
        C.C_POINTER.withName("default_grab"),
        C.C_BOOL.withName("sent_axis_source"),
        MemoryLayout.paddingLayout(3),
        C.C_INT.withName("cached_axis_source"),
        MemoryLayout.sequenceLayout(16, C.C_INT).withName("buttons"),
        C.C_LONG.withName("button_count"),
        C.C_INT.withName("grab_button"),
        C.C_INT.withName("grab_serial"),
        C.C_INT.withName("grab_time"),
        MemoryLayout.paddingLayout(4),
        wl_listener.layout().withName("surface_destroy"),
        wlr_seat_pointer_state.events.layout().withName("events")
    ).withName("wlr_seat_pointer_state");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout seat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final AddressLayout seat$layout() {
        return seat$LAYOUT;
    }

    private static final long seat$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final long seat$offset() {
        return seat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static MemorySegment seat(MemorySegment struct) {
        return struct.get(seat$LAYOUT, seat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static void seat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seat$LAYOUT, seat$OFFSET, fieldValue);
    }

    private static final AddressLayout focused_client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("focused_client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focused_client
     * }
     */
    public static final AddressLayout focused_client$layout() {
        return focused_client$LAYOUT;
    }

    private static final long focused_client$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focused_client
     * }
     */
    public static final long focused_client$offset() {
        return focused_client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focused_client
     * }
     */
    public static MemorySegment focused_client(MemorySegment struct) {
        return struct.get(focused_client$LAYOUT, focused_client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focused_client
     * }
     */
    public static void focused_client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(focused_client$LAYOUT, focused_client$OFFSET, fieldValue);
    }

    private static final AddressLayout focused_surface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("focused_surface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface *focused_surface
     * }
     */
    public static final AddressLayout focused_surface$layout() {
        return focused_surface$LAYOUT;
    }

    private static final long focused_surface$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface *focused_surface
     * }
     */
    public static final long focused_surface$offset() {
        return focused_surface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface *focused_surface
     * }
     */
    public static MemorySegment focused_surface(MemorySegment struct) {
        return struct.get(focused_surface$LAYOUT, focused_surface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface *focused_surface
     * }
     */
    public static void focused_surface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(focused_surface$LAYOUT, focused_surface$OFFSET, fieldValue);
    }

    private static final OfDouble sx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static final OfDouble sx$layout() {
        return sx$LAYOUT;
    }

    private static final long sx$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static final long sx$offset() {
        return sx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static double sx(MemorySegment struct) {
        return struct.get(sx$LAYOUT, sx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static void sx(MemorySegment struct, double fieldValue) {
        struct.set(sx$LAYOUT, sx$OFFSET, fieldValue);
    }

    private static final OfDouble sy$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static final OfDouble sy$layout() {
        return sy$LAYOUT;
    }

    private static final long sy$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static final long sy$offset() {
        return sy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static double sy(MemorySegment struct) {
        return struct.get(sy$LAYOUT, sy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static void sy(MemorySegment struct, double fieldValue) {
        struct.set(sy$LAYOUT, sy$OFFSET, fieldValue);
    }

    private static final AddressLayout grab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab *grab
     * }
     */
    public static final AddressLayout grab$layout() {
        return grab$LAYOUT;
    }

    private static final long grab$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab *grab
     * }
     */
    public static final long grab$offset() {
        return grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab *grab
     * }
     */
    public static MemorySegment grab(MemorySegment struct) {
        return struct.get(grab$LAYOUT, grab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab *grab
     * }
     */
    public static void grab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(grab$LAYOUT, grab$OFFSET, fieldValue);
    }

    private static final AddressLayout default_grab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("default_grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab *default_grab
     * }
     */
    public static final AddressLayout default_grab$layout() {
        return default_grab$LAYOUT;
    }

    private static final long default_grab$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab *default_grab
     * }
     */
    public static final long default_grab$offset() {
        return default_grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab *default_grab
     * }
     */
    public static MemorySegment default_grab(MemorySegment struct) {
        return struct.get(default_grab$LAYOUT, default_grab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab *default_grab
     * }
     */
    public static void default_grab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(default_grab$LAYOUT, default_grab$OFFSET, fieldValue);
    }

    private static final OfBoolean sent_axis_source$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("sent_axis_source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool sent_axis_source
     * }
     */
    public static final OfBoolean sent_axis_source$layout() {
        return sent_axis_source$LAYOUT;
    }

    private static final long sent_axis_source$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool sent_axis_source
     * }
     */
    public static final long sent_axis_source$offset() {
        return sent_axis_source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool sent_axis_source
     * }
     */
    public static boolean sent_axis_source(MemorySegment struct) {
        return struct.get(sent_axis_source$LAYOUT, sent_axis_source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool sent_axis_source
     * }
     */
    public static void sent_axis_source(MemorySegment struct, boolean fieldValue) {
        struct.set(sent_axis_source$LAYOUT, sent_axis_source$OFFSET, fieldValue);
    }

    private static final OfInt cached_axis_source$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cached_axis_source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wlr_axis_source cached_axis_source
     * }
     */
    public static final OfInt cached_axis_source$layout() {
        return cached_axis_source$LAYOUT;
    }

    private static final long cached_axis_source$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wlr_axis_source cached_axis_source
     * }
     */
    public static final long cached_axis_source$offset() {
        return cached_axis_source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wlr_axis_source cached_axis_source
     * }
     */
    public static int cached_axis_source(MemorySegment struct) {
        return struct.get(cached_axis_source$LAYOUT, cached_axis_source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wlr_axis_source cached_axis_source
     * }
     */
    public static void cached_axis_source(MemorySegment struct, int fieldValue) {
        struct.set(cached_axis_source$LAYOUT, cached_axis_source$OFFSET, fieldValue);
    }

    private static final SequenceLayout buttons$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("buttons"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t buttons[16]
     * }
     */
    public static final SequenceLayout buttons$layout() {
        return buttons$LAYOUT;
    }

    private static final long buttons$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t buttons[16]
     * }
     */
    public static final long buttons$offset() {
        return buttons$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t buttons[16]
     * }
     */
    public static MemorySegment buttons(MemorySegment struct) {
        return struct.asSlice(buttons$OFFSET, buttons$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t buttons[16]
     * }
     */
    public static void buttons(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, buttons$OFFSET, buttons$LAYOUT.byteSize());
    }

    private static long[] buttons$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t buttons[16]
     * }
     */
    public static long[] buttons$dimensions() {
        return buttons$DIMS;
    }
    private static final VarHandle buttons$ELEM_HANDLE = buttons$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t buttons[16]
     * }
     */
    public static int buttons(MemorySegment struct, long index0) {
        return (int)buttons$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t buttons[16]
     * }
     */
    public static void buttons(MemorySegment struct, long index0, int fieldValue) {
        buttons$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong button_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("button_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t button_count
     * }
     */
    public static final OfLong button_count$layout() {
        return button_count$LAYOUT;
    }

    private static final long button_count$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t button_count
     * }
     */
    public static final long button_count$offset() {
        return button_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t button_count
     * }
     */
    public static long button_count(MemorySegment struct) {
        return struct.get(button_count$LAYOUT, button_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t button_count
     * }
     */
    public static void button_count(MemorySegment struct, long fieldValue) {
        struct.set(button_count$LAYOUT, button_count$OFFSET, fieldValue);
    }

    private static final OfInt grab_button$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grab_button"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t grab_button
     * }
     */
    public static final OfInt grab_button$layout() {
        return grab_button$LAYOUT;
    }

    private static final long grab_button$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t grab_button
     * }
     */
    public static final long grab_button$offset() {
        return grab_button$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t grab_button
     * }
     */
    public static int grab_button(MemorySegment struct) {
        return struct.get(grab_button$LAYOUT, grab_button$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t grab_button
     * }
     */
    public static void grab_button(MemorySegment struct, int fieldValue) {
        struct.set(grab_button$LAYOUT, grab_button$OFFSET, fieldValue);
    }

    private static final OfInt grab_serial$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grab_serial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t grab_serial
     * }
     */
    public static final OfInt grab_serial$layout() {
        return grab_serial$LAYOUT;
    }

    private static final long grab_serial$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t grab_serial
     * }
     */
    public static final long grab_serial$offset() {
        return grab_serial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t grab_serial
     * }
     */
    public static int grab_serial(MemorySegment struct) {
        return struct.get(grab_serial$LAYOUT, grab_serial$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t grab_serial
     * }
     */
    public static void grab_serial(MemorySegment struct, int fieldValue) {
        struct.set(grab_serial$LAYOUT, grab_serial$OFFSET, fieldValue);
    }

    private static final OfInt grab_time$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grab_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t grab_time
     * }
     */
    public static final OfInt grab_time$layout() {
        return grab_time$LAYOUT;
    }

    private static final long grab_time$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t grab_time
     * }
     */
    public static final long grab_time$offset() {
        return grab_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t grab_time
     * }
     */
    public static int grab_time(MemorySegment struct) {
        return struct.get(grab_time$LAYOUT, grab_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t grab_time
     * }
     */
    public static void grab_time(MemorySegment struct, int fieldValue) {
        struct.set(grab_time$LAYOUT, grab_time$OFFSET, fieldValue);
    }

    private static final GroupLayout surface_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surface_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static final GroupLayout surface_destroy$layout() {
        return surface_destroy$LAYOUT;
    }

    private static final long surface_destroy$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static final long surface_destroy$offset() {
        return surface_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static MemorySegment surface_destroy(MemorySegment struct) {
        return struct.asSlice(surface_destroy$OFFSET, surface_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static void surface_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surface_destroy$OFFSET, surface_destroy$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus_change;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("focus_change")
        ).withName("$anon$194:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout focus_change$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("focus_change"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal focus_change
         * }
         */
        public static final GroupLayout focus_change$layout() {
            return focus_change$LAYOUT;
        }

        private static final long focus_change$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal focus_change
         * }
         */
        public static final long focus_change$offset() {
            return focus_change$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal focus_change
         * }
         */
        public static MemorySegment focus_change(MemorySegment struct) {
            return struct.asSlice(focus_change$OFFSET, focus_change$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal focus_change
         * }
         */
        public static void focus_change(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, focus_change$OFFSET, focus_change$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus_change;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus_change;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus_change;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus_change;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_output_mode {
 *     int32_t width;
 *     int32_t height;
 *     int32_t refresh;
 *     bool preferred;
 *     enum wlr_output_mode_aspect_ratio picture_aspect_ratio;
 *     struct wl_list link;
 * }
 * }
 */
public class wlr_output_mode {

    wlr_output_mode() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("width"),
        C.C_INT.withName("height"),
        C.C_INT.withName("refresh"),
        C.C_BOOL.withName("preferred"),
        MemoryLayout.paddingLayout(3),
        C.C_INT.withName("picture_aspect_ratio"),
        MemoryLayout.paddingLayout(4),
        wl_list.layout().withName("link")
    ).withName("wlr_output_mode");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt refresh$LAYOUT = (OfInt)$LAYOUT.select(groupElement("refresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t refresh
     * }
     */
    public static final OfInt refresh$layout() {
        return refresh$LAYOUT;
    }

    private static final long refresh$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t refresh
     * }
     */
    public static final long refresh$offset() {
        return refresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t refresh
     * }
     */
    public static int refresh(MemorySegment struct) {
        return struct.get(refresh$LAYOUT, refresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t refresh
     * }
     */
    public static void refresh(MemorySegment struct, int fieldValue) {
        struct.set(refresh$LAYOUT, refresh$OFFSET, fieldValue);
    }

    private static final OfBoolean preferred$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("preferred"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool preferred
     * }
     */
    public static final OfBoolean preferred$layout() {
        return preferred$LAYOUT;
    }

    private static final long preferred$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool preferred
     * }
     */
    public static final long preferred$offset() {
        return preferred$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool preferred
     * }
     */
    public static boolean preferred(MemorySegment struct) {
        return struct.get(preferred$LAYOUT, preferred$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool preferred
     * }
     */
    public static void preferred(MemorySegment struct, boolean fieldValue) {
        struct.set(preferred$LAYOUT, preferred$OFFSET, fieldValue);
    }

    private static final OfInt picture_aspect_ratio$LAYOUT = (OfInt)$LAYOUT.select(groupElement("picture_aspect_ratio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wlr_output_mode_aspect_ratio picture_aspect_ratio
     * }
     */
    public static final OfInt picture_aspect_ratio$layout() {
        return picture_aspect_ratio$LAYOUT;
    }

    private static final long picture_aspect_ratio$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wlr_output_mode_aspect_ratio picture_aspect_ratio
     * }
     */
    public static final long picture_aspect_ratio$offset() {
        return picture_aspect_ratio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wlr_output_mode_aspect_ratio picture_aspect_ratio
     * }
     */
    public static int picture_aspect_ratio(MemorySegment struct) {
        return struct.get(picture_aspect_ratio$LAYOUT, picture_aspect_ratio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wlr_output_mode_aspect_ratio picture_aspect_ratio
     * }
     */
    public static void picture_aspect_ratio(MemorySegment struct, int fieldValue) {
        struct.set(picture_aspect_ratio$LAYOUT, picture_aspect_ratio$OFFSET, fieldValue);
    }

    private static final GroupLayout link$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final GroupLayout link$layout() {
        return link$LAYOUT;
    }

    private static final long link$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final long link$offset() {
        return link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static MemorySegment link(MemorySegment struct) {
        return struct.asSlice(link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static void link(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


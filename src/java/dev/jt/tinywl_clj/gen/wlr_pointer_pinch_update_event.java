// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_pointer_pinch_update_event {
 *     struct wlr_pointer *pointer;
 *     uint32_t time_msec;
 *     uint32_t fingers;
 *     double dx;
 *     double dy;
 *     double scale;
 *     double rotation;
 * }
 * }
 */
public class wlr_pointer_pinch_update_event {

    wlr_pointer_pinch_update_event() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("pointer"),
        C.C_INT.withName("time_msec"),
        C.C_INT.withName("fingers"),
        C.C_DOUBLE.withName("dx"),
        C.C_DOUBLE.withName("dy"),
        C.C_DOUBLE.withName("scale"),
        C.C_DOUBLE.withName("rotation")
    ).withName("wlr_pointer_pinch_update_event");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pointer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pointer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_pointer *pointer
     * }
     */
    public static final AddressLayout pointer$layout() {
        return pointer$LAYOUT;
    }

    private static final long pointer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_pointer *pointer
     * }
     */
    public static final long pointer$offset() {
        return pointer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_pointer *pointer
     * }
     */
    public static MemorySegment pointer(MemorySegment struct) {
        return struct.get(pointer$LAYOUT, pointer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_pointer *pointer
     * }
     */
    public static void pointer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pointer$LAYOUT, pointer$OFFSET, fieldValue);
    }

    private static final OfInt time_msec$LAYOUT = (OfInt)$LAYOUT.select(groupElement("time_msec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t time_msec
     * }
     */
    public static final OfInt time_msec$layout() {
        return time_msec$LAYOUT;
    }

    private static final long time_msec$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t time_msec
     * }
     */
    public static final long time_msec$offset() {
        return time_msec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t time_msec
     * }
     */
    public static int time_msec(MemorySegment struct) {
        return struct.get(time_msec$LAYOUT, time_msec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t time_msec
     * }
     */
    public static void time_msec(MemorySegment struct, int fieldValue) {
        struct.set(time_msec$LAYOUT, time_msec$OFFSET, fieldValue);
    }

    private static final OfInt fingers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fingers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t fingers
     * }
     */
    public static final OfInt fingers$layout() {
        return fingers$LAYOUT;
    }

    private static final long fingers$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t fingers
     * }
     */
    public static final long fingers$offset() {
        return fingers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t fingers
     * }
     */
    public static int fingers(MemorySegment struct) {
        return struct.get(fingers$LAYOUT, fingers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t fingers
     * }
     */
    public static void fingers(MemorySegment struct, int fieldValue) {
        struct.set(fingers$LAYOUT, fingers$OFFSET, fieldValue);
    }

    private static final OfDouble dx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("dx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double dx
     * }
     */
    public static final OfDouble dx$layout() {
        return dx$LAYOUT;
    }

    private static final long dx$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double dx
     * }
     */
    public static final long dx$offset() {
        return dx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double dx
     * }
     */
    public static double dx(MemorySegment struct) {
        return struct.get(dx$LAYOUT, dx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double dx
     * }
     */
    public static void dx(MemorySegment struct, double fieldValue) {
        struct.set(dx$LAYOUT, dx$OFFSET, fieldValue);
    }

    private static final OfDouble dy$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("dy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double dy
     * }
     */
    public static final OfDouble dy$layout() {
        return dy$LAYOUT;
    }

    private static final long dy$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double dy
     * }
     */
    public static final long dy$offset() {
        return dy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double dy
     * }
     */
    public static double dy(MemorySegment struct) {
        return struct.get(dy$LAYOUT, dy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double dy
     * }
     */
    public static void dy(MemorySegment struct, double fieldValue) {
        struct.set(dy$LAYOUT, dy$OFFSET, fieldValue);
    }

    private static final OfDouble scale$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double scale
     * }
     */
    public static final OfDouble scale$layout() {
        return scale$LAYOUT;
    }

    private static final long scale$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double scale
     * }
     */
    public static final long scale$offset() {
        return scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double scale
     * }
     */
    public static double scale(MemorySegment struct) {
        return struct.get(scale$LAYOUT, scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double scale
     * }
     */
    public static void scale(MemorySegment struct, double fieldValue) {
        struct.set(scale$LAYOUT, scale$OFFSET, fieldValue);
    }

    private static final OfDouble rotation$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("rotation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double rotation
     * }
     */
    public static final OfDouble rotation$layout() {
        return rotation$LAYOUT;
    }

    private static final long rotation$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double rotation
     * }
     */
    public static final long rotation$offset() {
        return rotation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double rotation
     * }
     */
    public static double rotation(MemorySegment struct) {
        return struct.get(rotation$LAYOUT, rotation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double rotation
     * }
     */
    public static void rotation(MemorySegment struct, double fieldValue) {
        struct.set(rotation$LAYOUT, rotation$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


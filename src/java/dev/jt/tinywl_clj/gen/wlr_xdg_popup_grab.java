// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_xdg_popup_grab {
 *     struct wl_client *client;
 *     struct wlr_seat_pointer_grab pointer_grab;
 *     struct wlr_seat_keyboard_grab keyboard_grab;
 *     struct wlr_seat_touch_grab touch_grab;
 *     struct wlr_seat *seat;
 *     struct wl_list popups;
 *     struct wl_list link;
 *     struct wl_listener seat_destroy;
 * }
 * }
 */
public class wlr_xdg_popup_grab {

    wlr_xdg_popup_grab() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("client"),
        wlr_seat_pointer_grab.layout().withName("pointer_grab"),
        wlr_seat_keyboard_grab.layout().withName("keyboard_grab"),
        wlr_seat_touch_grab.layout().withName("touch_grab"),
        C.C_POINTER.withName("seat"),
        wl_list.layout().withName("popups"),
        wl_list.layout().withName("link"),
        wl_listener.layout().withName("seat_destroy")
    ).withName("wlr_xdg_popup_grab");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_client *client
     * }
     */
    public static final AddressLayout client$layout() {
        return client$LAYOUT;
    }

    private static final long client$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_client *client
     * }
     */
    public static final long client$offset() {
        return client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_client *client
     * }
     */
    public static MemorySegment client(MemorySegment struct) {
        return struct.get(client$LAYOUT, client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_client *client
     * }
     */
    public static void client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client$LAYOUT, client$OFFSET, fieldValue);
    }

    private static final GroupLayout pointer_grab$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pointer_grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab pointer_grab
     * }
     */
    public static final GroupLayout pointer_grab$layout() {
        return pointer_grab$LAYOUT;
    }

    private static final long pointer_grab$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab pointer_grab
     * }
     */
    public static final long pointer_grab$offset() {
        return pointer_grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab pointer_grab
     * }
     */
    public static MemorySegment pointer_grab(MemorySegment struct) {
        return struct.asSlice(pointer_grab$OFFSET, pointer_grab$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_pointer_grab pointer_grab
     * }
     */
    public static void pointer_grab(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pointer_grab$OFFSET, pointer_grab$LAYOUT.byteSize());
    }

    private static final GroupLayout keyboard_grab$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("keyboard_grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab keyboard_grab
     * }
     */
    public static final GroupLayout keyboard_grab$layout() {
        return keyboard_grab$LAYOUT;
    }

    private static final long keyboard_grab$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab keyboard_grab
     * }
     */
    public static final long keyboard_grab$offset() {
        return keyboard_grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab keyboard_grab
     * }
     */
    public static MemorySegment keyboard_grab(MemorySegment struct) {
        return struct.asSlice(keyboard_grab$OFFSET, keyboard_grab$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab keyboard_grab
     * }
     */
    public static void keyboard_grab(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, keyboard_grab$OFFSET, keyboard_grab$LAYOUT.byteSize());
    }

    private static final GroupLayout touch_grab$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("touch_grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab touch_grab
     * }
     */
    public static final GroupLayout touch_grab$layout() {
        return touch_grab$LAYOUT;
    }

    private static final long touch_grab$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab touch_grab
     * }
     */
    public static final long touch_grab$offset() {
        return touch_grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab touch_grab
     * }
     */
    public static MemorySegment touch_grab(MemorySegment struct) {
        return struct.asSlice(touch_grab$OFFSET, touch_grab$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_touch_grab touch_grab
     * }
     */
    public static void touch_grab(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, touch_grab$OFFSET, touch_grab$LAYOUT.byteSize());
    }

    private static final AddressLayout seat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final AddressLayout seat$layout() {
        return seat$LAYOUT;
    }

    private static final long seat$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final long seat$offset() {
        return seat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static MemorySegment seat(MemorySegment struct) {
        return struct.get(seat$LAYOUT, seat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static void seat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seat$LAYOUT, seat$OFFSET, fieldValue);
    }

    private static final GroupLayout popups$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("popups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list popups
     * }
     */
    public static final GroupLayout popups$layout() {
        return popups$LAYOUT;
    }

    private static final long popups$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list popups
     * }
     */
    public static final long popups$offset() {
        return popups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list popups
     * }
     */
    public static MemorySegment popups(MemorySegment struct) {
        return struct.asSlice(popups$OFFSET, popups$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list popups
     * }
     */
    public static void popups(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, popups$OFFSET, popups$LAYOUT.byteSize());
    }

    private static final GroupLayout link$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final GroupLayout link$layout() {
        return link$LAYOUT;
    }

    private static final long link$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final long link$offset() {
        return link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static MemorySegment link(MemorySegment struct) {
        return struct.asSlice(link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static void link(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, link$OFFSET, link$LAYOUT.byteSize());
    }

    private static final GroupLayout seat_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("seat_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener seat_destroy
     * }
     */
    public static final GroupLayout seat_destroy$layout() {
        return seat_destroy$LAYOUT;
    }

    private static final long seat_destroy$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener seat_destroy
     * }
     */
    public static final long seat_destroy$offset() {
        return seat_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener seat_destroy
     * }
     */
    public static MemorySegment seat_destroy(MemorySegment struct) {
        return struct.asSlice(seat_destroy$OFFSET, seat_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener seat_destroy
     * }
     */
    public static void seat_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, seat_destroy$OFFSET, seat_destroy$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct xdg_positioner_interface {
 *     void (*destroy)(struct wl_client *, struct wl_resource *);
 *     void (*set_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t);
 *     void (*set_anchor_rect)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t);
 *     void (*set_anchor)(struct wl_client *, struct wl_resource *, uint32_t);
 *     void (*set_gravity)(struct wl_client *, struct wl_resource *, uint32_t);
 *     void (*set_constraint_adjustment)(struct wl_client *, struct wl_resource *, uint32_t);
 *     void (*set_offset)(struct wl_client *, struct wl_resource *, int32_t, int32_t);
 *     void (*set_reactive)(struct wl_client *, struct wl_resource *);
 *     void (*set_parent_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t);
 *     void (*set_parent_configure)(struct wl_client *, struct wl_resource *, uint32_t);
 * }
 * }
 */
public class xdg_positioner_interface {

    xdg_positioner_interface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("destroy"),
        C.C_POINTER.withName("set_size"),
        C.C_POINTER.withName("set_anchor_rect"),
        C.C_POINTER.withName("set_anchor"),
        C.C_POINTER.withName("set_gravity"),
        C.C_POINTER.withName("set_constraint_adjustment"),
        C.C_POINTER.withName("set_offset"),
        C.C_POINTER.withName("set_reactive"),
        C.C_POINTER.withName("set_parent_size"),
        C.C_POINTER.withName("set_parent_configure")
    ).withName("xdg_positioner_interface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static class destroy {

        destroy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(destroy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(destroy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout destroy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final AddressLayout destroy$layout() {
        return destroy$LAYOUT;
    }

    private static final long destroy$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final long destroy$offset() {
        return destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static MemorySegment destroy(MemorySegment struct) {
        return struct.get(destroy$LAYOUT, destroy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(destroy$LAYOUT, destroy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static class set_size {

        set_size() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_size.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_size.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static final AddressLayout set_size$layout() {
        return set_size$LAYOUT;
    }

    private static final long set_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static final long set_size$offset() {
        return set_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static MemorySegment set_size(MemorySegment struct) {
        return struct.get(set_size$LAYOUT, set_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static void set_size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_size$LAYOUT, set_size$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_anchor_rect)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)
     * }
     */
    public static class set_anchor_rect {

        set_anchor_rect() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, int _x4, int _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT,
            C.C_INT,
            C.C_INT,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_anchor_rect.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_anchor_rect.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, int _x4, int _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_anchor_rect$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_anchor_rect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_anchor_rect)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)
     * }
     */
    public static final AddressLayout set_anchor_rect$layout() {
        return set_anchor_rect$LAYOUT;
    }

    private static final long set_anchor_rect$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_anchor_rect)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)
     * }
     */
    public static final long set_anchor_rect$offset() {
        return set_anchor_rect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_anchor_rect)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)
     * }
     */
    public static MemorySegment set_anchor_rect(MemorySegment struct) {
        return struct.get(set_anchor_rect$LAYOUT, set_anchor_rect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_anchor_rect)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)
     * }
     */
    public static void set_anchor_rect(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_anchor_rect$LAYOUT, set_anchor_rect$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_anchor)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static class set_anchor {

        set_anchor() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_anchor.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_anchor.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_anchor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_anchor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_anchor)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final AddressLayout set_anchor$layout() {
        return set_anchor$LAYOUT;
    }

    private static final long set_anchor$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_anchor)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final long set_anchor$offset() {
        return set_anchor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_anchor)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static MemorySegment set_anchor(MemorySegment struct) {
        return struct.get(set_anchor$LAYOUT, set_anchor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_anchor)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static void set_anchor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_anchor$LAYOUT, set_anchor$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_gravity)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static class set_gravity {

        set_gravity() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_gravity.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_gravity.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_gravity$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_gravity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_gravity)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final AddressLayout set_gravity$layout() {
        return set_gravity$LAYOUT;
    }

    private static final long set_gravity$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_gravity)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final long set_gravity$offset() {
        return set_gravity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_gravity)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static MemorySegment set_gravity(MemorySegment struct) {
        return struct.get(set_gravity$LAYOUT, set_gravity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_gravity)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static void set_gravity(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_gravity$LAYOUT, set_gravity$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_constraint_adjustment)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static class set_constraint_adjustment {

        set_constraint_adjustment() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_constraint_adjustment.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_constraint_adjustment.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_constraint_adjustment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_constraint_adjustment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_constraint_adjustment)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final AddressLayout set_constraint_adjustment$layout() {
        return set_constraint_adjustment$LAYOUT;
    }

    private static final long set_constraint_adjustment$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_constraint_adjustment)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final long set_constraint_adjustment$offset() {
        return set_constraint_adjustment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_constraint_adjustment)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static MemorySegment set_constraint_adjustment(MemorySegment struct) {
        return struct.get(set_constraint_adjustment$LAYOUT, set_constraint_adjustment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_constraint_adjustment)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static void set_constraint_adjustment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_constraint_adjustment$LAYOUT, set_constraint_adjustment$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_offset)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static class set_offset {

        set_offset() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_offset.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_offset.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_offset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_offset)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static final AddressLayout set_offset$layout() {
        return set_offset$LAYOUT;
    }

    private static final long set_offset$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_offset)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static final long set_offset$offset() {
        return set_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_offset)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static MemorySegment set_offset(MemorySegment struct) {
        return struct.get(set_offset$LAYOUT, set_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_offset)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static void set_offset(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_offset$LAYOUT, set_offset$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_reactive)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static class set_reactive {

        set_reactive() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_reactive.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_reactive.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_reactive$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_reactive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_reactive)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final AddressLayout set_reactive$layout() {
        return set_reactive$LAYOUT;
    }

    private static final long set_reactive$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_reactive)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final long set_reactive$offset() {
        return set_reactive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_reactive)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static MemorySegment set_reactive(MemorySegment struct) {
        return struct.get(set_reactive$LAYOUT, set_reactive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_reactive)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static void set_reactive(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_reactive$LAYOUT, set_reactive$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_parent_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static class set_parent_size {

        set_parent_size() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_parent_size.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_parent_size.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_parent_size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_parent_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_parent_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static final AddressLayout set_parent_size$layout() {
        return set_parent_size$LAYOUT;
    }

    private static final long set_parent_size$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_parent_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static final long set_parent_size$offset() {
        return set_parent_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_parent_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static MemorySegment set_parent_size(MemorySegment struct) {
        return struct.get(set_parent_size$LAYOUT, set_parent_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_parent_size)(struct wl_client *, struct wl_resource *, int32_t, int32_t)
     * }
     */
    public static void set_parent_size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_parent_size$LAYOUT, set_parent_size$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_parent_configure)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static class set_parent_configure {

        set_parent_configure() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(set_parent_configure.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_parent_configure.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_parent_configure$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_parent_configure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_parent_configure)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final AddressLayout set_parent_configure$layout() {
        return set_parent_configure$LAYOUT;
    }

    private static final long set_parent_configure$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_parent_configure)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final long set_parent_configure$offset() {
        return set_parent_configure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_parent_configure)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static MemorySegment set_parent_configure(MemorySegment struct) {
        return struct.get(set_parent_configure$LAYOUT, set_parent_configure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_parent_configure)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static void set_parent_configure(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_parent_configure$LAYOUT, set_parent_configure$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


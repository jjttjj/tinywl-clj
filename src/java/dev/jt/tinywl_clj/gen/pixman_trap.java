// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct pixman_trap {
 *     pixman_span_fix_t top;
 *     pixman_span_fix_t bot;
 * }
 * }
 */
public class pixman_trap {

    pixman_trap() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        pixman_span_fix.layout().withName("top"),
        pixman_span_fix.layout().withName("bot")
    ).withName("pixman_trap");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout top$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("top"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_span_fix_t top
     * }
     */
    public static final GroupLayout top$layout() {
        return top$LAYOUT;
    }

    private static final long top$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_span_fix_t top
     * }
     */
    public static final long top$offset() {
        return top$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_span_fix_t top
     * }
     */
    public static MemorySegment top(MemorySegment struct) {
        return struct.asSlice(top$OFFSET, top$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_span_fix_t top
     * }
     */
    public static void top(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, top$OFFSET, top$LAYOUT.byteSize());
    }

    private static final GroupLayout bot$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bot"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_span_fix_t bot
     * }
     */
    public static final GroupLayout bot$layout() {
        return bot$LAYOUT;
    }

    private static final long bot$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_span_fix_t bot
     * }
     */
    public static final long bot$offset() {
        return bot$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_span_fix_t bot
     * }
     */
    public static MemorySegment bot(MemorySegment struct) {
        return struct.asSlice(bot$OFFSET, bot$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_span_fix_t bot
     * }
     */
    public static void bot(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bot$OFFSET, bot$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct pixman_indexed {
 *     pixman_bool_t color;
 *     uint32_t rgba[256];
 *     pixman_index_type ent[32768];
 * }
 * }
 */
public class pixman_indexed {

    pixman_indexed() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("color"),
        MemoryLayout.sequenceLayout(256, C.C_INT).withName("rgba"),
        MemoryLayout.sequenceLayout(32768, C.C_CHAR).withName("ent")
    ).withName("pixman_indexed");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt color$LAYOUT = (OfInt)$LAYOUT.select(groupElement("color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_bool_t color
     * }
     */
    public static final OfInt color$layout() {
        return color$LAYOUT;
    }

    private static final long color$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_bool_t color
     * }
     */
    public static final long color$offset() {
        return color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_bool_t color
     * }
     */
    public static int color(MemorySegment struct) {
        return struct.get(color$LAYOUT, color$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_bool_t color
     * }
     */
    public static void color(MemorySegment struct, int fieldValue) {
        struct.set(color$LAYOUT, color$OFFSET, fieldValue);
    }

    private static final SequenceLayout rgba$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("rgba"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t rgba[256]
     * }
     */
    public static final SequenceLayout rgba$layout() {
        return rgba$LAYOUT;
    }

    private static final long rgba$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t rgba[256]
     * }
     */
    public static final long rgba$offset() {
        return rgba$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t rgba[256]
     * }
     */
    public static MemorySegment rgba(MemorySegment struct) {
        return struct.asSlice(rgba$OFFSET, rgba$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t rgba[256]
     * }
     */
    public static void rgba(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rgba$OFFSET, rgba$LAYOUT.byteSize());
    }

    private static long[] rgba$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t rgba[256]
     * }
     */
    public static long[] rgba$dimensions() {
        return rgba$DIMS;
    }
    private static final VarHandle rgba$ELEM_HANDLE = rgba$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t rgba[256]
     * }
     */
    public static int rgba(MemorySegment struct, long index0) {
        return (int)rgba$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t rgba[256]
     * }
     */
    public static void rgba(MemorySegment struct, long index0, int fieldValue) {
        rgba$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout ent$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_index_type ent[32768]
     * }
     */
    public static final SequenceLayout ent$layout() {
        return ent$LAYOUT;
    }

    private static final long ent$OFFSET = 1028;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_index_type ent[32768]
     * }
     */
    public static final long ent$offset() {
        return ent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_index_type ent[32768]
     * }
     */
    public static MemorySegment ent(MemorySegment struct) {
        return struct.asSlice(ent$OFFSET, ent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_index_type ent[32768]
     * }
     */
    public static void ent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ent$OFFSET, ent$LAYOUT.byteSize());
    }

    private static long[] ent$DIMS = { 32768 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * pixman_index_type ent[32768]
     * }
     */
    public static long[] ent$dimensions() {
        return ent$DIMS;
    }
    private static final VarHandle ent$ELEM_HANDLE = ent$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * pixman_index_type ent[32768]
     * }
     */
    public static byte ent(MemorySegment struct, long index0) {
        return (byte)ent$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * pixman_index_type ent[32768]
     * }
     */
    public static void ent(MemorySegment struct, long index0, byte fieldValue) {
        ent$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


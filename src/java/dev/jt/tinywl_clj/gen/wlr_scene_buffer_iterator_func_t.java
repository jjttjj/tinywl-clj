// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * typedef void (*wlr_scene_buffer_iterator_func_t)(struct wlr_scene_buffer {
 *     struct wlr_scene_node node;
 *     struct wlr_buffer *buffer;
 *     struct {
 *         struct wl_signal outputs_update;
 *         struct wl_signal output_enter;
 *         struct wl_signal output_leave;
 *         struct wl_signal output_sample;
 *         struct wl_signal frame_done;
 *     } events;
 *     wlr_scene_buffer_point_accepts_input_func_t point_accepts_input;
 *     struct wlr_scene_output *primary_output;
 *     float opacity;
 *     enum wlr_scale_filter_mode filter_mode;
 *     struct wlr_fbox src_box;
 *     int dst_width;
 *     int dst_height;
 *     enum wl_output_transform transform;
 *     pixman_region32_t opaque_region;
 *     uint64_t active_outputs;
 *     struct wlr_texture *texture;
 *     struct wlr_linux_dmabuf_feedback_v1_init_options prev_feedback_options;
 * } *, int, int, void *)
 * }
 */
public class wlr_scene_buffer_iterator_func_t {

    wlr_scene_buffer_iterator_func_t() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        void apply(MemorySegment buffer, int sx, int sy, MemorySegment user_data);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
        C.C_POINTER,
        C.C_INT,
        C.C_INT,
        C.C_POINTER
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = C.upcallHandle(wlr_scene_buffer_iterator_func_t.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(wlr_scene_buffer_iterator_func_t.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static void invoke(MemorySegment funcPtr,MemorySegment buffer, int sx, int sy, MemorySegment user_data) {
        try {
             DOWN$MH.invokeExact(funcPtr, buffer, sx, sy, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


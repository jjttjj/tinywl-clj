// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_scene {
 *     struct wlr_scene_tree tree;
 *     struct wl_list outputs;
 *     struct wlr_presentation *presentation;
 *     struct wlr_linux_dmabuf_v1 *linux_dmabuf_v1;
 *     struct wl_listener presentation_destroy;
 *     struct wl_listener linux_dmabuf_v1_destroy;
 *     enum wlr_scene_debug_damage_option debug_damage_option;
 *     bool direct_scanout;
 *     bool calculate_visibility;
 * }
 * }
 */
public class wlr_scene {

    wlr_scene() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wlr_scene_tree.layout().withName("tree"),
        wl_list.layout().withName("outputs"),
        C.C_POINTER.withName("presentation"),
        C.C_POINTER.withName("linux_dmabuf_v1"),
        wl_listener.layout().withName("presentation_destroy"),
        wl_listener.layout().withName("linux_dmabuf_v1_destroy"),
        C.C_INT.withName("debug_damage_option"),
        C.C_BOOL.withName("direct_scanout"),
        C.C_BOOL.withName("calculate_visibility"),
        MemoryLayout.paddingLayout(2)
    ).withName("wlr_scene");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout tree$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_scene_tree tree
     * }
     */
    public static final GroupLayout tree$layout() {
        return tree$LAYOUT;
    }

    private static final long tree$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_scene_tree tree
     * }
     */
    public static final long tree$offset() {
        return tree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_scene_tree tree
     * }
     */
    public static MemorySegment tree(MemorySegment struct) {
        return struct.asSlice(tree$OFFSET, tree$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_scene_tree tree
     * }
     */
    public static void tree(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tree$OFFSET, tree$LAYOUT.byteSize());
    }

    private static final GroupLayout outputs$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("outputs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list outputs
     * }
     */
    public static final GroupLayout outputs$layout() {
        return outputs$LAYOUT;
    }

    private static final long outputs$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list outputs
     * }
     */
    public static final long outputs$offset() {
        return outputs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list outputs
     * }
     */
    public static MemorySegment outputs(MemorySegment struct) {
        return struct.asSlice(outputs$OFFSET, outputs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list outputs
     * }
     */
    public static void outputs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, outputs$OFFSET, outputs$LAYOUT.byteSize());
    }

    private static final AddressLayout presentation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("presentation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_presentation *presentation
     * }
     */
    public static final AddressLayout presentation$layout() {
        return presentation$LAYOUT;
    }

    private static final long presentation$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_presentation *presentation
     * }
     */
    public static final long presentation$offset() {
        return presentation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_presentation *presentation
     * }
     */
    public static MemorySegment presentation(MemorySegment struct) {
        return struct.get(presentation$LAYOUT, presentation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_presentation *presentation
     * }
     */
    public static void presentation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(presentation$LAYOUT, presentation$OFFSET, fieldValue);
    }

    private static final AddressLayout linux_dmabuf_v1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("linux_dmabuf_v1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_linux_dmabuf_v1 *linux_dmabuf_v1
     * }
     */
    public static final AddressLayout linux_dmabuf_v1$layout() {
        return linux_dmabuf_v1$LAYOUT;
    }

    private static final long linux_dmabuf_v1$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_linux_dmabuf_v1 *linux_dmabuf_v1
     * }
     */
    public static final long linux_dmabuf_v1$offset() {
        return linux_dmabuf_v1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_linux_dmabuf_v1 *linux_dmabuf_v1
     * }
     */
    public static MemorySegment linux_dmabuf_v1(MemorySegment struct) {
        return struct.get(linux_dmabuf_v1$LAYOUT, linux_dmabuf_v1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_linux_dmabuf_v1 *linux_dmabuf_v1
     * }
     */
    public static void linux_dmabuf_v1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(linux_dmabuf_v1$LAYOUT, linux_dmabuf_v1$OFFSET, fieldValue);
    }

    private static final GroupLayout presentation_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("presentation_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener presentation_destroy
     * }
     */
    public static final GroupLayout presentation_destroy$layout() {
        return presentation_destroy$LAYOUT;
    }

    private static final long presentation_destroy$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener presentation_destroy
     * }
     */
    public static final long presentation_destroy$offset() {
        return presentation_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener presentation_destroy
     * }
     */
    public static MemorySegment presentation_destroy(MemorySegment struct) {
        return struct.asSlice(presentation_destroy$OFFSET, presentation_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener presentation_destroy
     * }
     */
    public static void presentation_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, presentation_destroy$OFFSET, presentation_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout linux_dmabuf_v1_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("linux_dmabuf_v1_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener linux_dmabuf_v1_destroy
     * }
     */
    public static final GroupLayout linux_dmabuf_v1_destroy$layout() {
        return linux_dmabuf_v1_destroy$LAYOUT;
    }

    private static final long linux_dmabuf_v1_destroy$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener linux_dmabuf_v1_destroy
     * }
     */
    public static final long linux_dmabuf_v1_destroy$offset() {
        return linux_dmabuf_v1_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener linux_dmabuf_v1_destroy
     * }
     */
    public static MemorySegment linux_dmabuf_v1_destroy(MemorySegment struct) {
        return struct.asSlice(linux_dmabuf_v1_destroy$OFFSET, linux_dmabuf_v1_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener linux_dmabuf_v1_destroy
     * }
     */
    public static void linux_dmabuf_v1_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, linux_dmabuf_v1_destroy$OFFSET, linux_dmabuf_v1_destroy$LAYOUT.byteSize());
    }

    private static final OfInt debug_damage_option$LAYOUT = (OfInt)$LAYOUT.select(groupElement("debug_damage_option"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wlr_scene_debug_damage_option debug_damage_option
     * }
     */
    public static final OfInt debug_damage_option$layout() {
        return debug_damage_option$LAYOUT;
    }

    private static final long debug_damage_option$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wlr_scene_debug_damage_option debug_damage_option
     * }
     */
    public static final long debug_damage_option$offset() {
        return debug_damage_option$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wlr_scene_debug_damage_option debug_damage_option
     * }
     */
    public static int debug_damage_option(MemorySegment struct) {
        return struct.get(debug_damage_option$LAYOUT, debug_damage_option$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wlr_scene_debug_damage_option debug_damage_option
     * }
     */
    public static void debug_damage_option(MemorySegment struct, int fieldValue) {
        struct.set(debug_damage_option$LAYOUT, debug_damage_option$OFFSET, fieldValue);
    }

    private static final OfBoolean direct_scanout$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("direct_scanout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool direct_scanout
     * }
     */
    public static final OfBoolean direct_scanout$layout() {
        return direct_scanout$LAYOUT;
    }

    private static final long direct_scanout$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool direct_scanout
     * }
     */
    public static final long direct_scanout$offset() {
        return direct_scanout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool direct_scanout
     * }
     */
    public static boolean direct_scanout(MemorySegment struct) {
        return struct.get(direct_scanout$LAYOUT, direct_scanout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool direct_scanout
     * }
     */
    public static void direct_scanout(MemorySegment struct, boolean fieldValue) {
        struct.set(direct_scanout$LAYOUT, direct_scanout$OFFSET, fieldValue);
    }

    private static final OfBoolean calculate_visibility$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("calculate_visibility"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool calculate_visibility
     * }
     */
    public static final OfBoolean calculate_visibility$layout() {
        return calculate_visibility$LAYOUT;
    }

    private static final long calculate_visibility$OFFSET = 213;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool calculate_visibility
     * }
     */
    public static final long calculate_visibility$offset() {
        return calculate_visibility$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool calculate_visibility
     * }
     */
    public static boolean calculate_visibility(MemorySegment struct) {
        return struct.get(calculate_visibility$LAYOUT, calculate_visibility$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool calculate_visibility
     * }
     */
    public static void calculate_visibility(MemorySegment struct, boolean fieldValue) {
        struct.set(calculate_visibility$LAYOUT, calculate_visibility$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


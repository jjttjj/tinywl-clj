// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_seat_client {
 *     struct wl_client *client;
 *     struct wlr_seat *seat;
 *     struct wl_list link;
 *     struct wl_list resources;
 *     struct wl_list pointers;
 *     struct wl_list keyboards;
 *     struct wl_list touches;
 *     struct wl_list data_devices;
 *     struct {
 *         struct wl_signal destroy;
 *     } events;
 *     struct wlr_serial_ringset serials;
 *     bool needs_touch_frame;
 *     struct {
 *         int32_t acc_discrete[2];
 *         int32_t last_discrete[2];
 *         double acc_axis[2];
 *     } value120;
 * }
 * }
 */
public class wlr_seat_client {

    wlr_seat_client() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("client"),
        C.C_POINTER.withName("seat"),
        wl_list.layout().withName("link"),
        wl_list.layout().withName("resources"),
        wl_list.layout().withName("pointers"),
        wl_list.layout().withName("keyboards"),
        wl_list.layout().withName("touches"),
        wl_list.layout().withName("data_devices"),
        wlr_seat_client.events.layout().withName("events"),
        wlr_serial_ringset.layout().withName("serials"),
        C.C_BOOL.withName("needs_touch_frame"),
        MemoryLayout.paddingLayout(7),
        wlr_seat_client.value120.layout().withName("value120")
    ).withName("wlr_seat_client");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_client *client
     * }
     */
    public static final AddressLayout client$layout() {
        return client$LAYOUT;
    }

    private static final long client$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_client *client
     * }
     */
    public static final long client$offset() {
        return client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_client *client
     * }
     */
    public static MemorySegment client(MemorySegment struct) {
        return struct.get(client$LAYOUT, client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_client *client
     * }
     */
    public static void client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client$LAYOUT, client$OFFSET, fieldValue);
    }

    private static final AddressLayout seat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final AddressLayout seat$layout() {
        return seat$LAYOUT;
    }

    private static final long seat$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final long seat$offset() {
        return seat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static MemorySegment seat(MemorySegment struct) {
        return struct.get(seat$LAYOUT, seat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static void seat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seat$LAYOUT, seat$OFFSET, fieldValue);
    }

    private static final GroupLayout link$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final GroupLayout link$layout() {
        return link$LAYOUT;
    }

    private static final long link$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final long link$offset() {
        return link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static MemorySegment link(MemorySegment struct) {
        return struct.asSlice(link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static void link(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, link$OFFSET, link$LAYOUT.byteSize());
    }

    private static final GroupLayout resources$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("resources"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list resources
     * }
     */
    public static final GroupLayout resources$layout() {
        return resources$LAYOUT;
    }

    private static final long resources$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list resources
     * }
     */
    public static final long resources$offset() {
        return resources$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list resources
     * }
     */
    public static MemorySegment resources(MemorySegment struct) {
        return struct.asSlice(resources$OFFSET, resources$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list resources
     * }
     */
    public static void resources(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, resources$OFFSET, resources$LAYOUT.byteSize());
    }

    private static final GroupLayout pointers$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pointers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list pointers
     * }
     */
    public static final GroupLayout pointers$layout() {
        return pointers$LAYOUT;
    }

    private static final long pointers$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list pointers
     * }
     */
    public static final long pointers$offset() {
        return pointers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list pointers
     * }
     */
    public static MemorySegment pointers(MemorySegment struct) {
        return struct.asSlice(pointers$OFFSET, pointers$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list pointers
     * }
     */
    public static void pointers(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pointers$OFFSET, pointers$LAYOUT.byteSize());
    }

    private static final GroupLayout keyboards$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("keyboards"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list keyboards
     * }
     */
    public static final GroupLayout keyboards$layout() {
        return keyboards$LAYOUT;
    }

    private static final long keyboards$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list keyboards
     * }
     */
    public static final long keyboards$offset() {
        return keyboards$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list keyboards
     * }
     */
    public static MemorySegment keyboards(MemorySegment struct) {
        return struct.asSlice(keyboards$OFFSET, keyboards$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list keyboards
     * }
     */
    public static void keyboards(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, keyboards$OFFSET, keyboards$LAYOUT.byteSize());
    }

    private static final GroupLayout touches$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("touches"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list touches
     * }
     */
    public static final GroupLayout touches$layout() {
        return touches$LAYOUT;
    }

    private static final long touches$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list touches
     * }
     */
    public static final long touches$offset() {
        return touches$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list touches
     * }
     */
    public static MemorySegment touches(MemorySegment struct) {
        return struct.asSlice(touches$OFFSET, touches$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list touches
     * }
     */
    public static void touches(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, touches$OFFSET, touches$LAYOUT.byteSize());
    }

    private static final GroupLayout data_devices$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("data_devices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list data_devices
     * }
     */
    public static final GroupLayout data_devices$layout() {
        return data_devices$LAYOUT;
    }

    private static final long data_devices$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list data_devices
     * }
     */
    public static final long data_devices$offset() {
        return data_devices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list data_devices
     * }
     */
    public static MemorySegment data_devices(MemorySegment struct) {
        return struct.asSlice(data_devices$OFFSET, data_devices$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list data_devices
     * }
     */
    public static void data_devices(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, data_devices$OFFSET, data_devices$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("destroy")
        ).withName("$anon$49:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("destroy"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final GroupLayout destroy$layout() {
            return destroy$LAYOUT;
        }

        private static final long destroy$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final long destroy$offset() {
            return destroy$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static MemorySegment destroy(MemorySegment struct) {
            return struct.asSlice(destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final GroupLayout serials$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("serials"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_serial_ringset serials
     * }
     */
    public static final GroupLayout serials$layout() {
        return serials$LAYOUT;
    }

    private static final long serials$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_serial_ringset serials
     * }
     */
    public static final long serials$offset() {
        return serials$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_serial_ringset serials
     * }
     */
    public static MemorySegment serials(MemorySegment struct) {
        return struct.asSlice(serials$OFFSET, serials$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_serial_ringset serials
     * }
     */
    public static void serials(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, serials$OFFSET, serials$LAYOUT.byteSize());
    }

    private static final OfBoolean needs_touch_frame$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("needs_touch_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool needs_touch_frame
     * }
     */
    public static final OfBoolean needs_touch_frame$layout() {
        return needs_touch_frame$LAYOUT;
    }

    private static final long needs_touch_frame$OFFSET = 1160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool needs_touch_frame
     * }
     */
    public static final long needs_touch_frame$offset() {
        return needs_touch_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool needs_touch_frame
     * }
     */
    public static boolean needs_touch_frame(MemorySegment struct) {
        return struct.get(needs_touch_frame$LAYOUT, needs_touch_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool needs_touch_frame
     * }
     */
    public static void needs_touch_frame(MemorySegment struct, boolean fieldValue) {
        struct.set(needs_touch_frame$LAYOUT, needs_touch_frame$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     int32_t acc_discrete[2];
     *     int32_t last_discrete[2];
     *     double acc_axis[2];
     * }
     * }
     */
    public static class value120 {

        value120() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(2, C.C_INT).withName("acc_discrete"),
            MemoryLayout.sequenceLayout(2, C.C_INT).withName("last_discrete"),
            MemoryLayout.sequenceLayout(2, C.C_DOUBLE).withName("acc_axis")
        ).withName("$anon$65:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final SequenceLayout acc_discrete$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("acc_discrete"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int32_t acc_discrete[2]
         * }
         */
        public static final SequenceLayout acc_discrete$layout() {
            return acc_discrete$LAYOUT;
        }

        private static final long acc_discrete$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int32_t acc_discrete[2]
         * }
         */
        public static final long acc_discrete$offset() {
            return acc_discrete$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int32_t acc_discrete[2]
         * }
         */
        public static MemorySegment acc_discrete(MemorySegment struct) {
            return struct.asSlice(acc_discrete$OFFSET, acc_discrete$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int32_t acc_discrete[2]
         * }
         */
        public static void acc_discrete(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, acc_discrete$OFFSET, acc_discrete$LAYOUT.byteSize());
        }

        private static long[] acc_discrete$DIMS = { 2 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * int32_t acc_discrete[2]
         * }
         */
        public static long[] acc_discrete$dimensions() {
            return acc_discrete$DIMS;
        }
        private static final VarHandle acc_discrete$ELEM_HANDLE = acc_discrete$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * int32_t acc_discrete[2]
         * }
         */
        public static int acc_discrete(MemorySegment struct, long index0) {
            return (int)acc_discrete$ELEM_HANDLE.get(struct, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * int32_t acc_discrete[2]
         * }
         */
        public static void acc_discrete(MemorySegment struct, long index0, int fieldValue) {
            acc_discrete$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
        }

        private static final SequenceLayout last_discrete$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("last_discrete"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int32_t last_discrete[2]
         * }
         */
        public static final SequenceLayout last_discrete$layout() {
            return last_discrete$LAYOUT;
        }

        private static final long last_discrete$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int32_t last_discrete[2]
         * }
         */
        public static final long last_discrete$offset() {
            return last_discrete$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int32_t last_discrete[2]
         * }
         */
        public static MemorySegment last_discrete(MemorySegment struct) {
            return struct.asSlice(last_discrete$OFFSET, last_discrete$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int32_t last_discrete[2]
         * }
         */
        public static void last_discrete(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, last_discrete$OFFSET, last_discrete$LAYOUT.byteSize());
        }

        private static long[] last_discrete$DIMS = { 2 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * int32_t last_discrete[2]
         * }
         */
        public static long[] last_discrete$dimensions() {
            return last_discrete$DIMS;
        }
        private static final VarHandle last_discrete$ELEM_HANDLE = last_discrete$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * int32_t last_discrete[2]
         * }
         */
        public static int last_discrete(MemorySegment struct, long index0) {
            return (int)last_discrete$ELEM_HANDLE.get(struct, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * int32_t last_discrete[2]
         * }
         */
        public static void last_discrete(MemorySegment struct, long index0, int fieldValue) {
            last_discrete$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
        }

        private static final SequenceLayout acc_axis$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("acc_axis"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * double acc_axis[2]
         * }
         */
        public static final SequenceLayout acc_axis$layout() {
            return acc_axis$LAYOUT;
        }

        private static final long acc_axis$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * double acc_axis[2]
         * }
         */
        public static final long acc_axis$offset() {
            return acc_axis$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * double acc_axis[2]
         * }
         */
        public static MemorySegment acc_axis(MemorySegment struct) {
            return struct.asSlice(acc_axis$OFFSET, acc_axis$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * double acc_axis[2]
         * }
         */
        public static void acc_axis(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, acc_axis$OFFSET, acc_axis$LAYOUT.byteSize());
        }

        private static long[] acc_axis$DIMS = { 2 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * double acc_axis[2]
         * }
         */
        public static long[] acc_axis$dimensions() {
            return acc_axis$DIMS;
        }
        private static final VarHandle acc_axis$ELEM_HANDLE = acc_axis$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * double acc_axis[2]
         * }
         */
        public static double acc_axis(MemorySegment struct, long index0) {
            return (double)acc_axis$ELEM_HANDLE.get(struct, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * double acc_axis[2]
         * }
         */
        public static void acc_axis(MemorySegment struct, long index0, double fieldValue) {
            acc_axis$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout value120$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("value120"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t acc_discrete[2];
     *     int32_t last_discrete[2];
     *     double acc_axis[2];
     * } value120
     * }
     */
    public static final GroupLayout value120$layout() {
        return value120$LAYOUT;
    }

    private static final long value120$OFFSET = 1168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t acc_discrete[2];
     *     int32_t last_discrete[2];
     *     double acc_axis[2];
     * } value120
     * }
     */
    public static final long value120$offset() {
        return value120$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t acc_discrete[2];
     *     int32_t last_discrete[2];
     *     double acc_axis[2];
     * } value120
     * }
     */
    public static MemorySegment value120(MemorySegment struct) {
        return struct.asSlice(value120$OFFSET, value120$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     int32_t acc_discrete[2];
     *     int32_t last_discrete[2];
     *     double acc_axis[2];
     * } value120
     * }
     */
    public static void value120(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, value120$OFFSET, value120$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


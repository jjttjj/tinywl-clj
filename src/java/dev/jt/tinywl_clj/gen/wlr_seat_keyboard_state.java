// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_seat_keyboard_state {
 *     struct wlr_seat *seat;
 *     struct wlr_keyboard *keyboard;
 *     struct wlr_seat_client *focused_client;
 *     struct wlr_surface *focused_surface;
 *     struct wl_listener keyboard_destroy;
 *     struct wl_listener keyboard_keymap;
 *     struct wl_listener keyboard_repeat_info;
 *     struct wl_listener surface_destroy;
 *     struct wlr_seat_keyboard_grab *grab;
 *     struct wlr_seat_keyboard_grab *default_grab;
 *     struct {
 *         struct wl_signal focus_change;
 *     } events;
 * }
 * }
 */
public class wlr_seat_keyboard_state {

    wlr_seat_keyboard_state() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("seat"),
        C.C_POINTER.withName("keyboard"),
        C.C_POINTER.withName("focused_client"),
        C.C_POINTER.withName("focused_surface"),
        wl_listener.layout().withName("keyboard_destroy"),
        wl_listener.layout().withName("keyboard_keymap"),
        wl_listener.layout().withName("keyboard_repeat_info"),
        wl_listener.layout().withName("surface_destroy"),
        C.C_POINTER.withName("grab"),
        C.C_POINTER.withName("default_grab"),
        wlr_seat_keyboard_state.events.layout().withName("events")
    ).withName("wlr_seat_keyboard_state");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout seat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final AddressLayout seat$layout() {
        return seat$LAYOUT;
    }

    private static final long seat$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final long seat$offset() {
        return seat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static MemorySegment seat(MemorySegment struct) {
        return struct.get(seat$LAYOUT, seat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static void seat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seat$LAYOUT, seat$OFFSET, fieldValue);
    }

    private static final AddressLayout keyboard$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("keyboard"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_keyboard *keyboard
     * }
     */
    public static final AddressLayout keyboard$layout() {
        return keyboard$LAYOUT;
    }

    private static final long keyboard$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_keyboard *keyboard
     * }
     */
    public static final long keyboard$offset() {
        return keyboard$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_keyboard *keyboard
     * }
     */
    public static MemorySegment keyboard(MemorySegment struct) {
        return struct.get(keyboard$LAYOUT, keyboard$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_keyboard *keyboard
     * }
     */
    public static void keyboard(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(keyboard$LAYOUT, keyboard$OFFSET, fieldValue);
    }

    private static final AddressLayout focused_client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("focused_client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focused_client
     * }
     */
    public static final AddressLayout focused_client$layout() {
        return focused_client$LAYOUT;
    }

    private static final long focused_client$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focused_client
     * }
     */
    public static final long focused_client$offset() {
        return focused_client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focused_client
     * }
     */
    public static MemorySegment focused_client(MemorySegment struct) {
        return struct.get(focused_client$LAYOUT, focused_client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_client *focused_client
     * }
     */
    public static void focused_client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(focused_client$LAYOUT, focused_client$OFFSET, fieldValue);
    }

    private static final AddressLayout focused_surface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("focused_surface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface *focused_surface
     * }
     */
    public static final AddressLayout focused_surface$layout() {
        return focused_surface$LAYOUT;
    }

    private static final long focused_surface$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface *focused_surface
     * }
     */
    public static final long focused_surface$offset() {
        return focused_surface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface *focused_surface
     * }
     */
    public static MemorySegment focused_surface(MemorySegment struct) {
        return struct.get(focused_surface$LAYOUT, focused_surface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface *focused_surface
     * }
     */
    public static void focused_surface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(focused_surface$LAYOUT, focused_surface$OFFSET, fieldValue);
    }

    private static final GroupLayout keyboard_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("keyboard_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_destroy
     * }
     */
    public static final GroupLayout keyboard_destroy$layout() {
        return keyboard_destroy$LAYOUT;
    }

    private static final long keyboard_destroy$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_destroy
     * }
     */
    public static final long keyboard_destroy$offset() {
        return keyboard_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_destroy
     * }
     */
    public static MemorySegment keyboard_destroy(MemorySegment struct) {
        return struct.asSlice(keyboard_destroy$OFFSET, keyboard_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_destroy
     * }
     */
    public static void keyboard_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, keyboard_destroy$OFFSET, keyboard_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout keyboard_keymap$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("keyboard_keymap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_keymap
     * }
     */
    public static final GroupLayout keyboard_keymap$layout() {
        return keyboard_keymap$LAYOUT;
    }

    private static final long keyboard_keymap$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_keymap
     * }
     */
    public static final long keyboard_keymap$offset() {
        return keyboard_keymap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_keymap
     * }
     */
    public static MemorySegment keyboard_keymap(MemorySegment struct) {
        return struct.asSlice(keyboard_keymap$OFFSET, keyboard_keymap$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_keymap
     * }
     */
    public static void keyboard_keymap(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, keyboard_keymap$OFFSET, keyboard_keymap$LAYOUT.byteSize());
    }

    private static final GroupLayout keyboard_repeat_info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("keyboard_repeat_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_repeat_info
     * }
     */
    public static final GroupLayout keyboard_repeat_info$layout() {
        return keyboard_repeat_info$LAYOUT;
    }

    private static final long keyboard_repeat_info$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_repeat_info
     * }
     */
    public static final long keyboard_repeat_info$offset() {
        return keyboard_repeat_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_repeat_info
     * }
     */
    public static MemorySegment keyboard_repeat_info(MemorySegment struct) {
        return struct.asSlice(keyboard_repeat_info$OFFSET, keyboard_repeat_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener keyboard_repeat_info
     * }
     */
    public static void keyboard_repeat_info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, keyboard_repeat_info$OFFSET, keyboard_repeat_info$LAYOUT.byteSize());
    }

    private static final GroupLayout surface_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surface_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static final GroupLayout surface_destroy$layout() {
        return surface_destroy$LAYOUT;
    }

    private static final long surface_destroy$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static final long surface_destroy$offset() {
        return surface_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static MemorySegment surface_destroy(MemorySegment struct) {
        return struct.asSlice(surface_destroy$OFFSET, surface_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static void surface_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surface_destroy$OFFSET, surface_destroy$LAYOUT.byteSize());
    }

    private static final AddressLayout grab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab *grab
     * }
     */
    public static final AddressLayout grab$layout() {
        return grab$LAYOUT;
    }

    private static final long grab$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab *grab
     * }
     */
    public static final long grab$offset() {
        return grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab *grab
     * }
     */
    public static MemorySegment grab(MemorySegment struct) {
        return struct.get(grab$LAYOUT, grab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab *grab
     * }
     */
    public static void grab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(grab$LAYOUT, grab$OFFSET, fieldValue);
    }

    private static final AddressLayout default_grab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("default_grab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab *default_grab
     * }
     */
    public static final AddressLayout default_grab$layout() {
        return default_grab$LAYOUT;
    }

    private static final long default_grab$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab *default_grab
     * }
     */
    public static final long default_grab$offset() {
        return default_grab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab *default_grab
     * }
     */
    public static MemorySegment default_grab(MemorySegment struct) {
        return struct.get(default_grab$LAYOUT, default_grab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat_keyboard_grab *default_grab
     * }
     */
    public static void default_grab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(default_grab$LAYOUT, default_grab$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus_change;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("focus_change")
        ).withName("$anon$215:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout focus_change$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("focus_change"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal focus_change
         * }
         */
        public static final GroupLayout focus_change$layout() {
            return focus_change$LAYOUT;
        }

        private static final long focus_change$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal focus_change
         * }
         */
        public static final long focus_change$offset() {
            return focus_change$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal focus_change
         * }
         */
        public static MemorySegment focus_change(MemorySegment struct) {
            return struct.asSlice(focus_change$OFFSET, focus_change$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal focus_change
         * }
         */
        public static void focus_change(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, focus_change$OFFSET, focus_change$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus_change;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus_change;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus_change;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal focus_change;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


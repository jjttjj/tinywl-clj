// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wl_seat_interface {
 *     void (*get_pointer)(struct wl_client *, struct wl_resource *, uint32_t);
 *     void (*get_keyboard)(struct wl_client *, struct wl_resource *, uint32_t);
 *     void (*get_touch)(struct wl_client *, struct wl_resource *, uint32_t);
 *     void (*release)(struct wl_client *, struct wl_resource *);
 * }
 * }
 */
public class wl_seat_interface {

    wl_seat_interface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("get_pointer"),
        C.C_POINTER.withName("get_keyboard"),
        C.C_POINTER.withName("get_touch"),
        C.C_POINTER.withName("release")
    ).withName("wl_seat_interface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void (*get_pointer)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static class get_pointer {

        get_pointer() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(get_pointer.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_pointer.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_pointer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_pointer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_pointer)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final AddressLayout get_pointer$layout() {
        return get_pointer$LAYOUT;
    }

    private static final long get_pointer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_pointer)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final long get_pointer$offset() {
        return get_pointer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_pointer)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static MemorySegment get_pointer(MemorySegment struct) {
        return struct.get(get_pointer$LAYOUT, get_pointer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_pointer)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static void get_pointer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_pointer$LAYOUT, get_pointer$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_keyboard)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static class get_keyboard {

        get_keyboard() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(get_keyboard.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_keyboard.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_keyboard$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_keyboard"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_keyboard)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final AddressLayout get_keyboard$layout() {
        return get_keyboard$LAYOUT;
    }

    private static final long get_keyboard$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_keyboard)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final long get_keyboard$offset() {
        return get_keyboard$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_keyboard)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static MemorySegment get_keyboard(MemorySegment struct) {
        return struct.get(get_keyboard$LAYOUT, get_keyboard$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_keyboard)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static void get_keyboard(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_keyboard$LAYOUT, get_keyboard$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_touch)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static class get_touch {

        get_touch() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER,
            C.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(get_touch.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_touch.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_touch$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_touch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_touch)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final AddressLayout get_touch$layout() {
        return get_touch$LAYOUT;
    }

    private static final long get_touch$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_touch)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static final long get_touch$offset() {
        return get_touch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_touch)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static MemorySegment get_touch(MemorySegment struct) {
        return struct.get(get_touch$LAYOUT, get_touch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_touch)(struct wl_client *, struct wl_resource *, uint32_t)
     * }
     */
    public static void get_touch(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_touch$LAYOUT, get_touch$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*release)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static class release {

        release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER,
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*release)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final AddressLayout release$layout() {
        return release$LAYOUT;
    }

    private static final long release$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*release)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static final long release$offset() {
        return release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*release)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static MemorySegment release(MemorySegment struct) {
        return struct.get(release$LAYOUT, release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*release)(struct wl_client *, struct wl_resource *)
     * }
     */
    public static void release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(release$LAYOUT, release$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_data_source {
 *     const struct wlr_data_source_impl *impl;
 *     struct wl_array mime_types;
 *     int32_t actions;
 *     bool accepted;
 *     enum wl_data_device_manager_dnd_action current_dnd_action;
 *     uint32_t compositor_action;
 *     struct {
 *         struct wl_signal destroy;
 *     } events;
 * }
 * }
 */
public class wlr_data_source {

    wlr_data_source() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("impl"),
        wl_array.layout().withName("mime_types"),
        C.C_INT.withName("actions"),
        C.C_BOOL.withName("accepted"),
        MemoryLayout.paddingLayout(3),
        C.C_INT.withName("current_dnd_action"),
        C.C_INT.withName("compositor_action"),
        wlr_data_source.events.layout().withName("events")
    ).withName("wlr_data_source");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout impl$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("impl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct wlr_data_source_impl *impl
     * }
     */
    public static final AddressLayout impl$layout() {
        return impl$LAYOUT;
    }

    private static final long impl$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct wlr_data_source_impl *impl
     * }
     */
    public static final long impl$offset() {
        return impl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct wlr_data_source_impl *impl
     * }
     */
    public static MemorySegment impl(MemorySegment struct) {
        return struct.get(impl$LAYOUT, impl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct wlr_data_source_impl *impl
     * }
     */
    public static void impl(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(impl$LAYOUT, impl$OFFSET, fieldValue);
    }

    private static final GroupLayout mime_types$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("mime_types"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_array mime_types
     * }
     */
    public static final GroupLayout mime_types$layout() {
        return mime_types$LAYOUT;
    }

    private static final long mime_types$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_array mime_types
     * }
     */
    public static final long mime_types$offset() {
        return mime_types$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_array mime_types
     * }
     */
    public static MemorySegment mime_types(MemorySegment struct) {
        return struct.asSlice(mime_types$OFFSET, mime_types$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_array mime_types
     * }
     */
    public static void mime_types(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mime_types$OFFSET, mime_types$LAYOUT.byteSize());
    }

    private static final OfInt actions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("actions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t actions
     * }
     */
    public static final OfInt actions$layout() {
        return actions$LAYOUT;
    }

    private static final long actions$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t actions
     * }
     */
    public static final long actions$offset() {
        return actions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t actions
     * }
     */
    public static int actions(MemorySegment struct) {
        return struct.get(actions$LAYOUT, actions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t actions
     * }
     */
    public static void actions(MemorySegment struct, int fieldValue) {
        struct.set(actions$LAYOUT, actions$OFFSET, fieldValue);
    }

    private static final OfBoolean accepted$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("accepted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool accepted
     * }
     */
    public static final OfBoolean accepted$layout() {
        return accepted$LAYOUT;
    }

    private static final long accepted$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool accepted
     * }
     */
    public static final long accepted$offset() {
        return accepted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool accepted
     * }
     */
    public static boolean accepted(MemorySegment struct) {
        return struct.get(accepted$LAYOUT, accepted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool accepted
     * }
     */
    public static void accepted(MemorySegment struct, boolean fieldValue) {
        struct.set(accepted$LAYOUT, accepted$OFFSET, fieldValue);
    }

    private static final OfInt current_dnd_action$LAYOUT = (OfInt)$LAYOUT.select(groupElement("current_dnd_action"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wl_data_device_manager_dnd_action current_dnd_action
     * }
     */
    public static final OfInt current_dnd_action$layout() {
        return current_dnd_action$LAYOUT;
    }

    private static final long current_dnd_action$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wl_data_device_manager_dnd_action current_dnd_action
     * }
     */
    public static final long current_dnd_action$offset() {
        return current_dnd_action$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wl_data_device_manager_dnd_action current_dnd_action
     * }
     */
    public static int current_dnd_action(MemorySegment struct) {
        return struct.get(current_dnd_action$LAYOUT, current_dnd_action$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wl_data_device_manager_dnd_action current_dnd_action
     * }
     */
    public static void current_dnd_action(MemorySegment struct, int fieldValue) {
        struct.set(current_dnd_action$LAYOUT, current_dnd_action$OFFSET, fieldValue);
    }

    private static final OfInt compositor_action$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compositor_action"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t compositor_action
     * }
     */
    public static final OfInt compositor_action$layout() {
        return compositor_action$LAYOUT;
    }

    private static final long compositor_action$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t compositor_action
     * }
     */
    public static final long compositor_action$offset() {
        return compositor_action$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t compositor_action
     * }
     */
    public static int compositor_action(MemorySegment struct) {
        return struct.get(compositor_action$LAYOUT, compositor_action$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t compositor_action
     * }
     */
    public static void compositor_action(MemorySegment struct, int fieldValue) {
        struct.set(compositor_action$LAYOUT, compositor_action$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("destroy")
        ).withName("$anon$77:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("destroy"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final GroupLayout destroy$layout() {
            return destroy$LAYOUT;
        }

        private static final long destroy$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final long destroy$offset() {
            return destroy$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static MemorySegment destroy(MemorySegment struct) {
            return struct.asSlice(destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


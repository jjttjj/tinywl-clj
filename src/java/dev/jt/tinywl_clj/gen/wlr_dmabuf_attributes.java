// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_dmabuf_attributes {
 *     int32_t width;
 *     int32_t height;
 *     uint32_t format;
 *     uint64_t modifier;
 *     int n_planes;
 *     uint32_t offset[4];
 *     uint32_t stride[4];
 *     int fd[4];
 * }
 * }
 */
public class wlr_dmabuf_attributes {

    wlr_dmabuf_attributes() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("width"),
        C.C_INT.withName("height"),
        C.C_INT.withName("format"),
        MemoryLayout.paddingLayout(4),
        C.C_LONG.withName("modifier"),
        C.C_INT.withName("n_planes"),
        MemoryLayout.sequenceLayout(4, C.C_INT).withName("offset"),
        MemoryLayout.sequenceLayout(4, C.C_INT).withName("stride"),
        MemoryLayout.sequenceLayout(4, C.C_INT).withName("fd"),
        MemoryLayout.paddingLayout(4)
    ).withName("wlr_dmabuf_attributes");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t format
     * }
     */
    public static final OfInt format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t format
     * }
     */
    public static int format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t format
     * }
     */
    public static void format(MemorySegment struct, int fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final OfLong modifier$LAYOUT = (OfLong)$LAYOUT.select(groupElement("modifier"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t modifier
     * }
     */
    public static final OfLong modifier$layout() {
        return modifier$LAYOUT;
    }

    private static final long modifier$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t modifier
     * }
     */
    public static final long modifier$offset() {
        return modifier$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t modifier
     * }
     */
    public static long modifier(MemorySegment struct) {
        return struct.get(modifier$LAYOUT, modifier$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t modifier
     * }
     */
    public static void modifier(MemorySegment struct, long fieldValue) {
        struct.set(modifier$LAYOUT, modifier$OFFSET, fieldValue);
    }

    private static final OfInt n_planes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_planes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int n_planes
     * }
     */
    public static final OfInt n_planes$layout() {
        return n_planes$LAYOUT;
    }

    private static final long n_planes$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int n_planes
     * }
     */
    public static final long n_planes$offset() {
        return n_planes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n_planes
     * }
     */
    public static int n_planes(MemorySegment struct) {
        return struct.get(n_planes$LAYOUT, n_planes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n_planes
     * }
     */
    public static void n_planes(MemorySegment struct, int fieldValue) {
        struct.set(n_planes$LAYOUT, n_planes$OFFSET, fieldValue);
    }

    private static final SequenceLayout offset$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t offset[4]
     * }
     */
    public static final SequenceLayout offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t offset[4]
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t offset[4]
     * }
     */
    public static MemorySegment offset(MemorySegment struct) {
        return struct.asSlice(offset$OFFSET, offset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t offset[4]
     * }
     */
    public static void offset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, offset$OFFSET, offset$LAYOUT.byteSize());
    }

    private static long[] offset$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t offset[4]
     * }
     */
    public static long[] offset$dimensions() {
        return offset$DIMS;
    }
    private static final VarHandle offset$ELEM_HANDLE = offset$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t offset[4]
     * }
     */
    public static int offset(MemorySegment struct, long index0) {
        return (int)offset$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t offset[4]
     * }
     */
    public static void offset(MemorySegment struct, long index0, int fieldValue) {
        offset$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout stride$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("stride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t stride[4]
     * }
     */
    public static final SequenceLayout stride$layout() {
        return stride$LAYOUT;
    }

    private static final long stride$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t stride[4]
     * }
     */
    public static final long stride$offset() {
        return stride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t stride[4]
     * }
     */
    public static MemorySegment stride(MemorySegment struct) {
        return struct.asSlice(stride$OFFSET, stride$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t stride[4]
     * }
     */
    public static void stride(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stride$OFFSET, stride$LAYOUT.byteSize());
    }

    private static long[] stride$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t stride[4]
     * }
     */
    public static long[] stride$dimensions() {
        return stride$DIMS;
    }
    private static final VarHandle stride$ELEM_HANDLE = stride$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t stride[4]
     * }
     */
    public static int stride(MemorySegment struct, long index0) {
        return (int)stride$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t stride[4]
     * }
     */
    public static void stride(MemorySegment struct, long index0, int fieldValue) {
        stride$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout fd$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fd[4]
     * }
     */
    public static final SequenceLayout fd$layout() {
        return fd$LAYOUT;
    }

    private static final long fd$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fd[4]
     * }
     */
    public static final long fd$offset() {
        return fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fd[4]
     * }
     */
    public static MemorySegment fd(MemorySegment struct) {
        return struct.asSlice(fd$OFFSET, fd$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fd[4]
     * }
     */
    public static void fd(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fd$OFFSET, fd$LAYOUT.byteSize());
    }

    private static long[] fd$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int fd[4]
     * }
     */
    public static long[] fd$dimensions() {
        return fd$DIMS;
    }
    private static final VarHandle fd$ELEM_HANDLE = fd$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int fd[4]
     * }
     */
    public static int fd(MemorySegment struct, long index0) {
        return (int)fd$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int fd[4]
     * }
     */
    public static void fd(MemorySegment struct, long index0, int fieldValue) {
        fd$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


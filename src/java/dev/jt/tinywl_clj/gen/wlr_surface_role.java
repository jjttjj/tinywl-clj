// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_surface_role {
 *     const char *name;
 *     bool no_object;
 *     void (*commit)(struct wlr_surface *);
 *     void (*unmap)(struct wlr_surface *);
 *     void (*destroy)(struct wlr_surface *);
 * }
 * }
 */
public class wlr_surface_role {

    wlr_surface_role() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("name"),
        C.C_BOOL.withName("no_object"),
        MemoryLayout.paddingLayout(7),
        C.C_POINTER.withName("commit"),
        C.C_POINTER.withName("unmap"),
        C.C_POINTER.withName("destroy")
    ).withName("wlr_surface_role");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfBoolean no_object$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("no_object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool no_object
     * }
     */
    public static final OfBoolean no_object$layout() {
        return no_object$LAYOUT;
    }

    private static final long no_object$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool no_object
     * }
     */
    public static final long no_object$offset() {
        return no_object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool no_object
     * }
     */
    public static boolean no_object(MemorySegment struct) {
        return struct.get(no_object$LAYOUT, no_object$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool no_object
     * }
     */
    public static void no_object(MemorySegment struct, boolean fieldValue) {
        struct.set(no_object$LAYOUT, no_object$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*commit)(struct wlr_surface *)
     * }
     */
    public static class commit {

        commit() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(commit.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(commit.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout commit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("commit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*commit)(struct wlr_surface *)
     * }
     */
    public static final AddressLayout commit$layout() {
        return commit$LAYOUT;
    }

    private static final long commit$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*commit)(struct wlr_surface *)
     * }
     */
    public static final long commit$offset() {
        return commit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*commit)(struct wlr_surface *)
     * }
     */
    public static MemorySegment commit(MemorySegment struct) {
        return struct.get(commit$LAYOUT, commit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*commit)(struct wlr_surface *)
     * }
     */
    public static void commit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(commit$LAYOUT, commit$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*unmap)(struct wlr_surface *)
     * }
     */
    public static class unmap {

        unmap() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(unmap.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(unmap.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout unmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*unmap)(struct wlr_surface *)
     * }
     */
    public static final AddressLayout unmap$layout() {
        return unmap$LAYOUT;
    }

    private static final long unmap$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*unmap)(struct wlr_surface *)
     * }
     */
    public static final long unmap$offset() {
        return unmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*unmap)(struct wlr_surface *)
     * }
     */
    public static MemorySegment unmap(MemorySegment struct) {
        return struct.get(unmap$LAYOUT, unmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*unmap)(struct wlr_surface *)
     * }
     */
    public static void unmap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unmap$LAYOUT, unmap$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*destroy)(struct wlr_surface *)
     * }
     */
    public static class destroy {

        destroy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            C.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = C.upcallHandle(destroy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(destroy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout destroy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wlr_surface *)
     * }
     */
    public static final AddressLayout destroy$layout() {
        return destroy$LAYOUT;
    }

    private static final long destroy$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wlr_surface *)
     * }
     */
    public static final long destroy$offset() {
        return destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wlr_surface *)
     * }
     */
    public static MemorySegment destroy(MemorySegment struct) {
        return struct.get(destroy$LAYOUT, destroy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*destroy)(struct wlr_surface *)
     * }
     */
    public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(destroy$LAYOUT, destroy$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_xdg_popup {
 *     struct wlr_xdg_surface *base;
 *     struct wl_list link;
 *     struct wl_resource *resource;
 *     bool sent_initial_configure;
 *     struct wlr_surface *parent;
 *     struct wlr_seat *seat;
 *     struct wlr_xdg_popup_configure scheduled;
 *     struct wlr_xdg_popup_state current;
 *     struct wlr_xdg_popup_state pending;
 *     struct {
 *         struct wl_signal reposition;
 *     } events;
 *     struct wl_list grab_link;
 * }
 * }
 */
public class wlr_xdg_popup {

    wlr_xdg_popup() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("base"),
        wl_list.layout().withName("link"),
        C.C_POINTER.withName("resource"),
        C.C_BOOL.withName("sent_initial_configure"),
        MemoryLayout.paddingLayout(7),
        C.C_POINTER.withName("parent"),
        C.C_POINTER.withName("seat"),
        wlr_xdg_popup_configure.layout().withName("scheduled"),
        wlr_xdg_popup_state.layout().withName("current"),
        wlr_xdg_popup_state.layout().withName("pending"),
        MemoryLayout.paddingLayout(4),
        wlr_xdg_popup.events.layout().withName("events"),
        wl_list.layout().withName("grab_link")
    ).withName("wlr_xdg_popup");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout base$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_xdg_surface *base
     * }
     */
    public static final AddressLayout base$layout() {
        return base$LAYOUT;
    }

    private static final long base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_xdg_surface *base
     * }
     */
    public static final long base$offset() {
        return base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_xdg_surface *base
     * }
     */
    public static MemorySegment base(MemorySegment struct) {
        return struct.get(base$LAYOUT, base$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_xdg_surface *base
     * }
     */
    public static void base(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(base$LAYOUT, base$OFFSET, fieldValue);
    }

    private static final GroupLayout link$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final GroupLayout link$layout() {
        return link$LAYOUT;
    }

    private static final long link$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final long link$offset() {
        return link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static MemorySegment link(MemorySegment struct) {
        return struct.asSlice(link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static void link(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, link$OFFSET, link$LAYOUT.byteSize());
    }

    private static final AddressLayout resource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("resource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static final AddressLayout resource$layout() {
        return resource$LAYOUT;
    }

    private static final long resource$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static final long resource$offset() {
        return resource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static MemorySegment resource(MemorySegment struct) {
        return struct.get(resource$LAYOUT, resource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static void resource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(resource$LAYOUT, resource$OFFSET, fieldValue);
    }

    private static final OfBoolean sent_initial_configure$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("sent_initial_configure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool sent_initial_configure
     * }
     */
    public static final OfBoolean sent_initial_configure$layout() {
        return sent_initial_configure$LAYOUT;
    }

    private static final long sent_initial_configure$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool sent_initial_configure
     * }
     */
    public static final long sent_initial_configure$offset() {
        return sent_initial_configure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool sent_initial_configure
     * }
     */
    public static boolean sent_initial_configure(MemorySegment struct) {
        return struct.get(sent_initial_configure$LAYOUT, sent_initial_configure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool sent_initial_configure
     * }
     */
    public static void sent_initial_configure(MemorySegment struct, boolean fieldValue) {
        struct.set(sent_initial_configure$LAYOUT, sent_initial_configure$OFFSET, fieldValue);
    }

    private static final AddressLayout parent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("parent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface *parent
     * }
     */
    public static final AddressLayout parent$layout() {
        return parent$LAYOUT;
    }

    private static final long parent$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface *parent
     * }
     */
    public static final long parent$offset() {
        return parent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface *parent
     * }
     */
    public static MemorySegment parent(MemorySegment struct) {
        return struct.get(parent$LAYOUT, parent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface *parent
     * }
     */
    public static void parent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(parent$LAYOUT, parent$OFFSET, fieldValue);
    }

    private static final AddressLayout seat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final AddressLayout seat$layout() {
        return seat$LAYOUT;
    }

    private static final long seat$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static final long seat$offset() {
        return seat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static MemorySegment seat(MemorySegment struct) {
        return struct.get(seat$LAYOUT, seat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_seat *seat
     * }
     */
    public static void seat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seat$LAYOUT, seat$OFFSET, fieldValue);
    }

    private static final GroupLayout scheduled$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("scheduled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_configure scheduled
     * }
     */
    public static final GroupLayout scheduled$layout() {
        return scheduled$LAYOUT;
    }

    private static final long scheduled$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_configure scheduled
     * }
     */
    public static final long scheduled$offset() {
        return scheduled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_configure scheduled
     * }
     */
    public static MemorySegment scheduled(MemorySegment struct) {
        return struct.asSlice(scheduled$OFFSET, scheduled$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_configure scheduled
     * }
     */
    public static void scheduled(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, scheduled$OFFSET, scheduled$LAYOUT.byteSize());
    }

    private static final GroupLayout current$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("current"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_state current
     * }
     */
    public static final GroupLayout current$layout() {
        return current$LAYOUT;
    }

    private static final long current$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_state current
     * }
     */
    public static final long current$offset() {
        return current$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_state current
     * }
     */
    public static MemorySegment current(MemorySegment struct) {
        return struct.asSlice(current$OFFSET, current$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_state current
     * }
     */
    public static void current(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, current$OFFSET, current$LAYOUT.byteSize());
    }

    private static final GroupLayout pending$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pending"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_state pending
     * }
     */
    public static final GroupLayout pending$layout() {
        return pending$LAYOUT;
    }

    private static final long pending$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_state pending
     * }
     */
    public static final long pending$offset() {
        return pending$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_state pending
     * }
     */
    public static MemorySegment pending(MemorySegment struct) {
        return struct.asSlice(pending$OFFSET, pending$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_xdg_popup_state pending
     * }
     */
    public static void pending(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pending$OFFSET, pending$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal reposition;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("reposition")
        ).withName("$anon$104:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout reposition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("reposition"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal reposition
         * }
         */
        public static final GroupLayout reposition$layout() {
            return reposition$LAYOUT;
        }

        private static final long reposition$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal reposition
         * }
         */
        public static final long reposition$offset() {
            return reposition$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal reposition
         * }
         */
        public static MemorySegment reposition(MemorySegment struct) {
            return struct.asSlice(reposition$OFFSET, reposition$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal reposition
         * }
         */
        public static void reposition(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, reposition$OFFSET, reposition$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal reposition;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal reposition;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal reposition;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal reposition;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final GroupLayout grab_link$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("grab_link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list grab_link
     * }
     */
    public static final GroupLayout grab_link$layout() {
        return grab_link$LAYOUT;
    }

    private static final long grab_link$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list grab_link
     * }
     */
    public static final long grab_link$offset() {
        return grab_link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list grab_link
     * }
     */
    public static MemorySegment grab_link(MemorySegment struct) {
        return struct.asSlice(grab_link$OFFSET, grab_link$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list grab_link
     * }
     */
    public static void grab_link(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, grab_link$OFFSET, grab_link$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


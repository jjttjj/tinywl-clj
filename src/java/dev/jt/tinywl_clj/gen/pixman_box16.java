// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct pixman_box16 {
 *     int16_t x1;
 *     int16_t y1;
 *     int16_t x2;
 *     int16_t y2;
 * }
 * }
 */
public class pixman_box16 {

    pixman_box16() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_SHORT.withName("x1"),
        C.C_SHORT.withName("y1"),
        C.C_SHORT.withName("x2"),
        C.C_SHORT.withName("y2")
    ).withName("pixman_box16");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort x1$LAYOUT = (OfShort)$LAYOUT.select(groupElement("x1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t x1
     * }
     */
    public static final OfShort x1$layout() {
        return x1$LAYOUT;
    }

    private static final long x1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t x1
     * }
     */
    public static final long x1$offset() {
        return x1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t x1
     * }
     */
    public static short x1(MemorySegment struct) {
        return struct.get(x1$LAYOUT, x1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t x1
     * }
     */
    public static void x1(MemorySegment struct, short fieldValue) {
        struct.set(x1$LAYOUT, x1$OFFSET, fieldValue);
    }

    private static final OfShort y1$LAYOUT = (OfShort)$LAYOUT.select(groupElement("y1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t y1
     * }
     */
    public static final OfShort y1$layout() {
        return y1$LAYOUT;
    }

    private static final long y1$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t y1
     * }
     */
    public static final long y1$offset() {
        return y1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t y1
     * }
     */
    public static short y1(MemorySegment struct) {
        return struct.get(y1$LAYOUT, y1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t y1
     * }
     */
    public static void y1(MemorySegment struct, short fieldValue) {
        struct.set(y1$LAYOUT, y1$OFFSET, fieldValue);
    }

    private static final OfShort x2$LAYOUT = (OfShort)$LAYOUT.select(groupElement("x2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t x2
     * }
     */
    public static final OfShort x2$layout() {
        return x2$LAYOUT;
    }

    private static final long x2$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t x2
     * }
     */
    public static final long x2$offset() {
        return x2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t x2
     * }
     */
    public static short x2(MemorySegment struct) {
        return struct.get(x2$LAYOUT, x2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t x2
     * }
     */
    public static void x2(MemorySegment struct, short fieldValue) {
        struct.set(x2$LAYOUT, x2$OFFSET, fieldValue);
    }

    private static final OfShort y2$LAYOUT = (OfShort)$LAYOUT.select(groupElement("y2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t y2
     * }
     */
    public static final OfShort y2$layout() {
        return y2$LAYOUT;
    }

    private static final long y2$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t y2
     * }
     */
    public static final long y2$offset() {
        return y2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t y2
     * }
     */
    public static short y2(MemorySegment struct) {
        return struct.get(y2$LAYOUT, y2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t y2
     * }
     */
    public static void y2(MemorySegment struct, short fieldValue) {
        struct.set(y2$LAYOUT, y2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


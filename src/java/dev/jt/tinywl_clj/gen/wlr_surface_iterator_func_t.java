// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * typedef void (*wlr_surface_iterator_func_t)(struct wlr_surface {
 *     struct wl_resource *resource;
 *     struct wlr_renderer *renderer;
 *     struct wlr_client_buffer *buffer;
 *     pixman_region32_t buffer_damage;
 *     pixman_region32_t external_damage;
 *     pixman_region32_t opaque_region;
 *     pixman_region32_t input_region;
 *     struct wlr_surface_state current;
 *     struct wlr_surface_state pending;
 *     struct wl_list cached;
 *     bool mapped;
 *     const struct wlr_surface_role *role;
 *     struct wl_resource *role_resource;
 *     struct {
 *         struct wl_signal client_commit;
 *         struct wl_signal precommit;
 *         struct wl_signal commit;
 *         struct wl_signal map;
 *         struct wl_signal unmap;
 *         struct wl_signal new_subsurface;
 *         struct wl_signal destroy;
 *     } events;
 *     struct wl_list current_outputs;
 *     struct wlr_addon_set addons;
 *     void *data;
 *     struct wl_listener renderer_destroy;
 *     struct wl_listener role_resource_destroy;
 *     struct {
 *         int32_t scale;
 *         enum wl_output_transform transform;
 *         int width;
 *         int height;
 *         int buffer_width;
 *         int buffer_height;
 *     } previous;
 *     bool unmap_commit;
 *     bool opaque;
 *     bool has_buffer;
 *     int32_t preferred_buffer_scale;
 *     bool preferred_buffer_transform_sent;
 *     enum wl_output_transform preferred_buffer_transform;
 * } *, int, int, void *)
 * }
 */
public class wlr_surface_iterator_func_t {

    wlr_surface_iterator_func_t() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        void apply(MemorySegment surface, int sx, int sy, MemorySegment data);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
        C.C_POINTER,
        C.C_INT,
        C.C_INT,
        C.C_POINTER
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = C.upcallHandle(wlr_surface_iterator_func_t.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(wlr_surface_iterator_func_t.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static void invoke(MemorySegment funcPtr,MemorySegment surface, int sx, int sy, MemorySegment data) {
        try {
             DOWN$MH.invokeExact(funcPtr, surface, sx, sy, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


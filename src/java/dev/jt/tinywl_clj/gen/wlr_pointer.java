// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_pointer {
 *     struct wlr_input_device base;
 *     const struct wlr_pointer_impl *impl;
 *     char *output_name;
 *     struct {
 *         struct wl_signal motion;
 *         struct wl_signal motion_absolute;
 *         struct wl_signal button;
 *         struct wl_signal axis;
 *         struct wl_signal frame;
 *         struct wl_signal swipe_begin;
 *         struct wl_signal swipe_update;
 *         struct wl_signal swipe_end;
 *         struct wl_signal pinch_begin;
 *         struct wl_signal pinch_update;
 *         struct wl_signal pinch_end;
 *         struct wl_signal hold_begin;
 *         struct wl_signal hold_end;
 *     } events;
 *     void *data;
 * }
 * }
 */
public class wlr_pointer {

    wlr_pointer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wlr_input_device.layout().withName("base"),
        C.C_POINTER.withName("impl"),
        C.C_POINTER.withName("output_name"),
        wlr_pointer.events.layout().withName("events"),
        C.C_POINTER.withName("data")
    ).withName("wlr_pointer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_input_device base
     * }
     */
    public static final GroupLayout base$layout() {
        return base$LAYOUT;
    }

    private static final long base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_input_device base
     * }
     */
    public static final long base$offset() {
        return base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_input_device base
     * }
     */
    public static MemorySegment base(MemorySegment struct) {
        return struct.asSlice(base$OFFSET, base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_input_device base
     * }
     */
    public static void base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, base$OFFSET, base$LAYOUT.byteSize());
    }

    private static final AddressLayout impl$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("impl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct wlr_pointer_impl *impl
     * }
     */
    public static final AddressLayout impl$layout() {
        return impl$LAYOUT;
    }

    private static final long impl$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct wlr_pointer_impl *impl
     * }
     */
    public static final long impl$offset() {
        return impl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct wlr_pointer_impl *impl
     * }
     */
    public static MemorySegment impl(MemorySegment struct) {
        return struct.get(impl$LAYOUT, impl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct wlr_pointer_impl *impl
     * }
     */
    public static void impl(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(impl$LAYOUT, impl$OFFSET, fieldValue);
    }

    private static final AddressLayout output_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("output_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *output_name
     * }
     */
    public static final AddressLayout output_name$layout() {
        return output_name$LAYOUT;
    }

    private static final long output_name$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *output_name
     * }
     */
    public static final long output_name$offset() {
        return output_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *output_name
     * }
     */
    public static MemorySegment output_name(MemorySegment struct) {
        return struct.get(output_name$LAYOUT, output_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *output_name
     * }
     */
    public static void output_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(output_name$LAYOUT, output_name$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal motion;
     *     struct wl_signal motion_absolute;
     *     struct wl_signal button;
     *     struct wl_signal axis;
     *     struct wl_signal frame;
     *     struct wl_signal swipe_begin;
     *     struct wl_signal swipe_update;
     *     struct wl_signal swipe_end;
     *     struct wl_signal pinch_begin;
     *     struct wl_signal pinch_update;
     *     struct wl_signal pinch_end;
     *     struct wl_signal hold_begin;
     *     struct wl_signal hold_end;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("motion"),
            wl_signal.layout().withName("motion_absolute"),
            wl_signal.layout().withName("button"),
            wl_signal.layout().withName("axis"),
            wl_signal.layout().withName("frame"),
            wl_signal.layout().withName("swipe_begin"),
            wl_signal.layout().withName("swipe_update"),
            wl_signal.layout().withName("swipe_end"),
            wl_signal.layout().withName("pinch_begin"),
            wl_signal.layout().withName("pinch_update"),
            wl_signal.layout().withName("pinch_end"),
            wl_signal.layout().withName("hold_begin"),
            wl_signal.layout().withName("hold_end")
        ).withName("$anon$26:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout motion$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("motion"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal motion
         * }
         */
        public static final GroupLayout motion$layout() {
            return motion$LAYOUT;
        }

        private static final long motion$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal motion
         * }
         */
        public static final long motion$offset() {
            return motion$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal motion
         * }
         */
        public static MemorySegment motion(MemorySegment struct) {
            return struct.asSlice(motion$OFFSET, motion$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal motion
         * }
         */
        public static void motion(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, motion$OFFSET, motion$LAYOUT.byteSize());
        }

        private static final GroupLayout motion_absolute$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("motion_absolute"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal motion_absolute
         * }
         */
        public static final GroupLayout motion_absolute$layout() {
            return motion_absolute$LAYOUT;
        }

        private static final long motion_absolute$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal motion_absolute
         * }
         */
        public static final long motion_absolute$offset() {
            return motion_absolute$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal motion_absolute
         * }
         */
        public static MemorySegment motion_absolute(MemorySegment struct) {
            return struct.asSlice(motion_absolute$OFFSET, motion_absolute$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal motion_absolute
         * }
         */
        public static void motion_absolute(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, motion_absolute$OFFSET, motion_absolute$LAYOUT.byteSize());
        }

        private static final GroupLayout button$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("button"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal button
         * }
         */
        public static final GroupLayout button$layout() {
            return button$LAYOUT;
        }

        private static final long button$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal button
         * }
         */
        public static final long button$offset() {
            return button$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal button
         * }
         */
        public static MemorySegment button(MemorySegment struct) {
            return struct.asSlice(button$OFFSET, button$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal button
         * }
         */
        public static void button(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, button$OFFSET, button$LAYOUT.byteSize());
        }

        private static final GroupLayout axis$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("axis"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal axis
         * }
         */
        public static final GroupLayout axis$layout() {
            return axis$LAYOUT;
        }

        private static final long axis$OFFSET = 48;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal axis
         * }
         */
        public static final long axis$offset() {
            return axis$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal axis
         * }
         */
        public static MemorySegment axis(MemorySegment struct) {
            return struct.asSlice(axis$OFFSET, axis$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal axis
         * }
         */
        public static void axis(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, axis$OFFSET, axis$LAYOUT.byteSize());
        }

        private static final GroupLayout frame$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("frame"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal frame
         * }
         */
        public static final GroupLayout frame$layout() {
            return frame$LAYOUT;
        }

        private static final long frame$OFFSET = 64;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal frame
         * }
         */
        public static final long frame$offset() {
            return frame$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal frame
         * }
         */
        public static MemorySegment frame(MemorySegment struct) {
            return struct.asSlice(frame$OFFSET, frame$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal frame
         * }
         */
        public static void frame(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, frame$OFFSET, frame$LAYOUT.byteSize());
        }

        private static final GroupLayout swipe_begin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("swipe_begin"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_begin
         * }
         */
        public static final GroupLayout swipe_begin$layout() {
            return swipe_begin$LAYOUT;
        }

        private static final long swipe_begin$OFFSET = 80;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_begin
         * }
         */
        public static final long swipe_begin$offset() {
            return swipe_begin$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_begin
         * }
         */
        public static MemorySegment swipe_begin(MemorySegment struct) {
            return struct.asSlice(swipe_begin$OFFSET, swipe_begin$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_begin
         * }
         */
        public static void swipe_begin(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, swipe_begin$OFFSET, swipe_begin$LAYOUT.byteSize());
        }

        private static final GroupLayout swipe_update$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("swipe_update"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_update
         * }
         */
        public static final GroupLayout swipe_update$layout() {
            return swipe_update$LAYOUT;
        }

        private static final long swipe_update$OFFSET = 96;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_update
         * }
         */
        public static final long swipe_update$offset() {
            return swipe_update$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_update
         * }
         */
        public static MemorySegment swipe_update(MemorySegment struct) {
            return struct.asSlice(swipe_update$OFFSET, swipe_update$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_update
         * }
         */
        public static void swipe_update(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, swipe_update$OFFSET, swipe_update$LAYOUT.byteSize());
        }

        private static final GroupLayout swipe_end$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("swipe_end"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_end
         * }
         */
        public static final GroupLayout swipe_end$layout() {
            return swipe_end$LAYOUT;
        }

        private static final long swipe_end$OFFSET = 112;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_end
         * }
         */
        public static final long swipe_end$offset() {
            return swipe_end$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_end
         * }
         */
        public static MemorySegment swipe_end(MemorySegment struct) {
            return struct.asSlice(swipe_end$OFFSET, swipe_end$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal swipe_end
         * }
         */
        public static void swipe_end(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, swipe_end$OFFSET, swipe_end$LAYOUT.byteSize());
        }

        private static final GroupLayout pinch_begin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pinch_begin"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_begin
         * }
         */
        public static final GroupLayout pinch_begin$layout() {
            return pinch_begin$LAYOUT;
        }

        private static final long pinch_begin$OFFSET = 128;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_begin
         * }
         */
        public static final long pinch_begin$offset() {
            return pinch_begin$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_begin
         * }
         */
        public static MemorySegment pinch_begin(MemorySegment struct) {
            return struct.asSlice(pinch_begin$OFFSET, pinch_begin$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_begin
         * }
         */
        public static void pinch_begin(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, pinch_begin$OFFSET, pinch_begin$LAYOUT.byteSize());
        }

        private static final GroupLayout pinch_update$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pinch_update"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_update
         * }
         */
        public static final GroupLayout pinch_update$layout() {
            return pinch_update$LAYOUT;
        }

        private static final long pinch_update$OFFSET = 144;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_update
         * }
         */
        public static final long pinch_update$offset() {
            return pinch_update$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_update
         * }
         */
        public static MemorySegment pinch_update(MemorySegment struct) {
            return struct.asSlice(pinch_update$OFFSET, pinch_update$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_update
         * }
         */
        public static void pinch_update(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, pinch_update$OFFSET, pinch_update$LAYOUT.byteSize());
        }

        private static final GroupLayout pinch_end$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pinch_end"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_end
         * }
         */
        public static final GroupLayout pinch_end$layout() {
            return pinch_end$LAYOUT;
        }

        private static final long pinch_end$OFFSET = 160;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_end
         * }
         */
        public static final long pinch_end$offset() {
            return pinch_end$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_end
         * }
         */
        public static MemorySegment pinch_end(MemorySegment struct) {
            return struct.asSlice(pinch_end$OFFSET, pinch_end$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal pinch_end
         * }
         */
        public static void pinch_end(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, pinch_end$OFFSET, pinch_end$LAYOUT.byteSize());
        }

        private static final GroupLayout hold_begin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("hold_begin"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal hold_begin
         * }
         */
        public static final GroupLayout hold_begin$layout() {
            return hold_begin$LAYOUT;
        }

        private static final long hold_begin$OFFSET = 176;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal hold_begin
         * }
         */
        public static final long hold_begin$offset() {
            return hold_begin$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal hold_begin
         * }
         */
        public static MemorySegment hold_begin(MemorySegment struct) {
            return struct.asSlice(hold_begin$OFFSET, hold_begin$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal hold_begin
         * }
         */
        public static void hold_begin(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, hold_begin$OFFSET, hold_begin$LAYOUT.byteSize());
        }

        private static final GroupLayout hold_end$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("hold_end"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal hold_end
         * }
         */
        public static final GroupLayout hold_end$layout() {
            return hold_end$LAYOUT;
        }

        private static final long hold_end$OFFSET = 192;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal hold_end
         * }
         */
        public static final long hold_end$offset() {
            return hold_end$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal hold_end
         * }
         */
        public static MemorySegment hold_end(MemorySegment struct) {
            return struct.asSlice(hold_end$OFFSET, hold_end$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal hold_end
         * }
         */
        public static void hold_end(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, hold_end$OFFSET, hold_end$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal motion;
     *     struct wl_signal motion_absolute;
     *     struct wl_signal button;
     *     struct wl_signal axis;
     *     struct wl_signal frame;
     *     struct wl_signal swipe_begin;
     *     struct wl_signal swipe_update;
     *     struct wl_signal swipe_end;
     *     struct wl_signal pinch_begin;
     *     struct wl_signal pinch_update;
     *     struct wl_signal pinch_end;
     *     struct wl_signal hold_begin;
     *     struct wl_signal hold_end;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal motion;
     *     struct wl_signal motion_absolute;
     *     struct wl_signal button;
     *     struct wl_signal axis;
     *     struct wl_signal frame;
     *     struct wl_signal swipe_begin;
     *     struct wl_signal swipe_update;
     *     struct wl_signal swipe_end;
     *     struct wl_signal pinch_begin;
     *     struct wl_signal pinch_update;
     *     struct wl_signal pinch_end;
     *     struct wl_signal hold_begin;
     *     struct wl_signal hold_end;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal motion;
     *     struct wl_signal motion_absolute;
     *     struct wl_signal button;
     *     struct wl_signal axis;
     *     struct wl_signal frame;
     *     struct wl_signal swipe_begin;
     *     struct wl_signal swipe_update;
     *     struct wl_signal swipe_end;
     *     struct wl_signal pinch_begin;
     *     struct wl_signal pinch_update;
     *     struct wl_signal pinch_end;
     *     struct wl_signal hold_begin;
     *     struct wl_signal hold_end;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal motion;
     *     struct wl_signal motion_absolute;
     *     struct wl_signal button;
     *     struct wl_signal axis;
     *     struct wl_signal frame;
     *     struct wl_signal swipe_begin;
     *     struct wl_signal swipe_update;
     *     struct wl_signal swipe_end;
     *     struct wl_signal pinch_begin;
     *     struct wl_signal pinch_update;
     *     struct wl_signal pinch_end;
     *     struct wl_signal hold_begin;
     *     struct wl_signal hold_end;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


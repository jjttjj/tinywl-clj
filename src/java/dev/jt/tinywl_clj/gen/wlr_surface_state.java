// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_surface_state {
 *     uint32_t committed;
 *     uint32_t seq;
 *     struct wlr_buffer *buffer;
 *     int32_t dx;
 *     int32_t dy;
 *     pixman_region32_t surface_damage;
 *     pixman_region32_t buffer_damage;
 *     pixman_region32_t opaque;
 *     pixman_region32_t input;
 *     enum wl_output_transform transform;
 *     int32_t scale;
 *     struct wl_list frame_callback_list;
 *     int width;
 *     int height;
 *     int buffer_width;
 *     int buffer_height;
 *     struct wl_list subsurfaces_below;
 *     struct wl_list subsurfaces_above;
 *     struct {
 *         bool has_src;
 *         bool has_dst;
 *         struct wlr_fbox src;
 *         int dst_width;
 *         int dst_height;
 *     } viewport;
 *     size_t cached_state_locks;
 *     struct wl_list cached_state_link;
 * }
 * }
 */
public class wlr_surface_state {

    wlr_surface_state() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_INT.withName("committed"),
        C.C_INT.withName("seq"),
        C.C_POINTER.withName("buffer"),
        C.C_INT.withName("dx"),
        C.C_INT.withName("dy"),
        pixman_region32.layout().withName("surface_damage"),
        pixman_region32.layout().withName("buffer_damage"),
        pixman_region32.layout().withName("opaque"),
        pixman_region32.layout().withName("input"),
        C.C_INT.withName("transform"),
        C.C_INT.withName("scale"),
        wl_list.layout().withName("frame_callback_list"),
        C.C_INT.withName("width"),
        C.C_INT.withName("height"),
        C.C_INT.withName("buffer_width"),
        C.C_INT.withName("buffer_height"),
        wl_list.layout().withName("subsurfaces_below"),
        wl_list.layout().withName("subsurfaces_above"),
        wlr_surface_state.viewport.layout().withName("viewport"),
        C.C_LONG.withName("cached_state_locks"),
        wl_list.layout().withName("cached_state_link")
    ).withName("wlr_surface_state");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt committed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("committed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t committed
     * }
     */
    public static final OfInt committed$layout() {
        return committed$LAYOUT;
    }

    private static final long committed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t committed
     * }
     */
    public static final long committed$offset() {
        return committed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t committed
     * }
     */
    public static int committed(MemorySegment struct) {
        return struct.get(committed$LAYOUT, committed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t committed
     * }
     */
    public static void committed(MemorySegment struct, int fieldValue) {
        struct.set(committed$LAYOUT, committed$OFFSET, fieldValue);
    }

    private static final OfInt seq$LAYOUT = (OfInt)$LAYOUT.select(groupElement("seq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t seq
     * }
     */
    public static final OfInt seq$layout() {
        return seq$LAYOUT;
    }

    private static final long seq$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t seq
     * }
     */
    public static final long seq$offset() {
        return seq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t seq
     * }
     */
    public static int seq(MemorySegment struct) {
        return struct.get(seq$LAYOUT, seq$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t seq
     * }
     */
    public static void seq(MemorySegment struct, int fieldValue) {
        struct.set(seq$LAYOUT, seq$OFFSET, fieldValue);
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_buffer *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_buffer *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_buffer *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_buffer *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final OfInt dx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t dx
     * }
     */
    public static final OfInt dx$layout() {
        return dx$LAYOUT;
    }

    private static final long dx$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t dx
     * }
     */
    public static final long dx$offset() {
        return dx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t dx
     * }
     */
    public static int dx(MemorySegment struct) {
        return struct.get(dx$LAYOUT, dx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t dx
     * }
     */
    public static void dx(MemorySegment struct, int fieldValue) {
        struct.set(dx$LAYOUT, dx$OFFSET, fieldValue);
    }

    private static final OfInt dy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t dy
     * }
     */
    public static final OfInt dy$layout() {
        return dy$LAYOUT;
    }

    private static final long dy$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t dy
     * }
     */
    public static final long dy$offset() {
        return dy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t dy
     * }
     */
    public static int dy(MemorySegment struct) {
        return struct.get(dy$LAYOUT, dy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t dy
     * }
     */
    public static void dy(MemorySegment struct, int fieldValue) {
        struct.set(dy$LAYOUT, dy$OFFSET, fieldValue);
    }

    private static final GroupLayout surface_damage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surface_damage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t surface_damage
     * }
     */
    public static final GroupLayout surface_damage$layout() {
        return surface_damage$LAYOUT;
    }

    private static final long surface_damage$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t surface_damage
     * }
     */
    public static final long surface_damage$offset() {
        return surface_damage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t surface_damage
     * }
     */
    public static MemorySegment surface_damage(MemorySegment struct) {
        return struct.asSlice(surface_damage$OFFSET, surface_damage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t surface_damage
     * }
     */
    public static void surface_damage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surface_damage$OFFSET, surface_damage$LAYOUT.byteSize());
    }

    private static final GroupLayout buffer_damage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("buffer_damage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t buffer_damage
     * }
     */
    public static final GroupLayout buffer_damage$layout() {
        return buffer_damage$LAYOUT;
    }

    private static final long buffer_damage$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t buffer_damage
     * }
     */
    public static final long buffer_damage$offset() {
        return buffer_damage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t buffer_damage
     * }
     */
    public static MemorySegment buffer_damage(MemorySegment struct) {
        return struct.asSlice(buffer_damage$OFFSET, buffer_damage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t buffer_damage
     * }
     */
    public static void buffer_damage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, buffer_damage$OFFSET, buffer_damage$LAYOUT.byteSize());
    }

    private static final GroupLayout opaque$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("opaque"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t opaque
     * }
     */
    public static final GroupLayout opaque$layout() {
        return opaque$LAYOUT;
    }

    private static final long opaque$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t opaque
     * }
     */
    public static final long opaque$offset() {
        return opaque$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t opaque
     * }
     */
    public static MemorySegment opaque(MemorySegment struct) {
        return struct.asSlice(opaque$OFFSET, opaque$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t opaque
     * }
     */
    public static void opaque(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, opaque$OFFSET, opaque$LAYOUT.byteSize());
    }

    private static final GroupLayout input$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("input"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pixman_region32_t input
     * }
     */
    public static final GroupLayout input$layout() {
        return input$LAYOUT;
    }

    private static final long input$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pixman_region32_t input
     * }
     */
    public static final long input$offset() {
        return input$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pixman_region32_t input
     * }
     */
    public static MemorySegment input(MemorySegment struct) {
        return struct.asSlice(input$OFFSET, input$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pixman_region32_t input
     * }
     */
    public static void input(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, input$OFFSET, input$LAYOUT.byteSize());
    }

    private static final OfInt transform$LAYOUT = (OfInt)$LAYOUT.select(groupElement("transform"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static final OfInt transform$layout() {
        return transform$LAYOUT;
    }

    private static final long transform$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static final long transform$offset() {
        return transform$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static int transform(MemorySegment struct) {
        return struct.get(transform$LAYOUT, transform$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wl_output_transform transform
     * }
     */
    public static void transform(MemorySegment struct, int fieldValue) {
        struct.set(transform$LAYOUT, transform$OFFSET, fieldValue);
    }

    private static final OfInt scale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t scale
     * }
     */
    public static final OfInt scale$layout() {
        return scale$LAYOUT;
    }

    private static final long scale$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t scale
     * }
     */
    public static final long scale$offset() {
        return scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t scale
     * }
     */
    public static int scale(MemorySegment struct) {
        return struct.get(scale$LAYOUT, scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t scale
     * }
     */
    public static void scale(MemorySegment struct, int fieldValue) {
        struct.set(scale$LAYOUT, scale$OFFSET, fieldValue);
    }

    private static final GroupLayout frame_callback_list$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("frame_callback_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list frame_callback_list
     * }
     */
    public static final GroupLayout frame_callback_list$layout() {
        return frame_callback_list$LAYOUT;
    }

    private static final long frame_callback_list$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list frame_callback_list
     * }
     */
    public static final long frame_callback_list$offset() {
        return frame_callback_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list frame_callback_list
     * }
     */
    public static MemorySegment frame_callback_list(MemorySegment struct) {
        return struct.asSlice(frame_callback_list$OFFSET, frame_callback_list$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list frame_callback_list
     * }
     */
    public static void frame_callback_list(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, frame_callback_list$OFFSET, frame_callback_list$LAYOUT.byteSize());
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt buffer_width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("buffer_width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int buffer_width
     * }
     */
    public static final OfInt buffer_width$layout() {
        return buffer_width$LAYOUT;
    }

    private static final long buffer_width$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int buffer_width
     * }
     */
    public static final long buffer_width$offset() {
        return buffer_width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int buffer_width
     * }
     */
    public static int buffer_width(MemorySegment struct) {
        return struct.get(buffer_width$LAYOUT, buffer_width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int buffer_width
     * }
     */
    public static void buffer_width(MemorySegment struct, int fieldValue) {
        struct.set(buffer_width$LAYOUT, buffer_width$OFFSET, fieldValue);
    }

    private static final OfInt buffer_height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("buffer_height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int buffer_height
     * }
     */
    public static final OfInt buffer_height$layout() {
        return buffer_height$LAYOUT;
    }

    private static final long buffer_height$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int buffer_height
     * }
     */
    public static final long buffer_height$offset() {
        return buffer_height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int buffer_height
     * }
     */
    public static int buffer_height(MemorySegment struct) {
        return struct.get(buffer_height$LAYOUT, buffer_height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int buffer_height
     * }
     */
    public static void buffer_height(MemorySegment struct, int fieldValue) {
        struct.set(buffer_height$LAYOUT, buffer_height$OFFSET, fieldValue);
    }

    private static final GroupLayout subsurfaces_below$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("subsurfaces_below"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list subsurfaces_below
     * }
     */
    public static final GroupLayout subsurfaces_below$layout() {
        return subsurfaces_below$LAYOUT;
    }

    private static final long subsurfaces_below$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list subsurfaces_below
     * }
     */
    public static final long subsurfaces_below$offset() {
        return subsurfaces_below$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list subsurfaces_below
     * }
     */
    public static MemorySegment subsurfaces_below(MemorySegment struct) {
        return struct.asSlice(subsurfaces_below$OFFSET, subsurfaces_below$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list subsurfaces_below
     * }
     */
    public static void subsurfaces_below(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, subsurfaces_below$OFFSET, subsurfaces_below$LAYOUT.byteSize());
    }

    private static final GroupLayout subsurfaces_above$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("subsurfaces_above"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list subsurfaces_above
     * }
     */
    public static final GroupLayout subsurfaces_above$layout() {
        return subsurfaces_above$LAYOUT;
    }

    private static final long subsurfaces_above$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list subsurfaces_above
     * }
     */
    public static final long subsurfaces_above$offset() {
        return subsurfaces_above$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list subsurfaces_above
     * }
     */
    public static MemorySegment subsurfaces_above(MemorySegment struct) {
        return struct.asSlice(subsurfaces_above$OFFSET, subsurfaces_above$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list subsurfaces_above
     * }
     */
    public static void subsurfaces_above(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, subsurfaces_above$OFFSET, subsurfaces_above$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     bool has_src;
     *     bool has_dst;
     *     struct wlr_fbox src;
     *     int dst_width;
     *     int dst_height;
     * }
     * }
     */
    public static class viewport {

        viewport() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            C.C_BOOL.withName("has_src"),
            C.C_BOOL.withName("has_dst"),
            MemoryLayout.paddingLayout(6),
            wlr_fbox.layout().withName("src"),
            C.C_INT.withName("dst_width"),
            C.C_INT.withName("dst_height")
        ).withName("$anon$61:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfBoolean has_src$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("has_src"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * bool has_src
         * }
         */
        public static final OfBoolean has_src$layout() {
            return has_src$LAYOUT;
        }

        private static final long has_src$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * bool has_src
         * }
         */
        public static final long has_src$offset() {
            return has_src$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * bool has_src
         * }
         */
        public static boolean has_src(MemorySegment struct) {
            return struct.get(has_src$LAYOUT, has_src$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * bool has_src
         * }
         */
        public static void has_src(MemorySegment struct, boolean fieldValue) {
            struct.set(has_src$LAYOUT, has_src$OFFSET, fieldValue);
        }

        private static final OfBoolean has_dst$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("has_dst"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * bool has_dst
         * }
         */
        public static final OfBoolean has_dst$layout() {
            return has_dst$LAYOUT;
        }

        private static final long has_dst$OFFSET = 1;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * bool has_dst
         * }
         */
        public static final long has_dst$offset() {
            return has_dst$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * bool has_dst
         * }
         */
        public static boolean has_dst(MemorySegment struct) {
            return struct.get(has_dst$LAYOUT, has_dst$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * bool has_dst
         * }
         */
        public static void has_dst(MemorySegment struct, boolean fieldValue) {
            struct.set(has_dst$LAYOUT, has_dst$OFFSET, fieldValue);
        }

        private static final GroupLayout src$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("src"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wlr_fbox src
         * }
         */
        public static final GroupLayout src$layout() {
            return src$LAYOUT;
        }

        private static final long src$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wlr_fbox src
         * }
         */
        public static final long src$offset() {
            return src$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wlr_fbox src
         * }
         */
        public static MemorySegment src(MemorySegment struct) {
            return struct.asSlice(src$OFFSET, src$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wlr_fbox src
         * }
         */
        public static void src(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, src$OFFSET, src$LAYOUT.byteSize());
        }

        private static final OfInt dst_width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dst_width"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int dst_width
         * }
         */
        public static final OfInt dst_width$layout() {
            return dst_width$LAYOUT;
        }

        private static final long dst_width$OFFSET = 40;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int dst_width
         * }
         */
        public static final long dst_width$offset() {
            return dst_width$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int dst_width
         * }
         */
        public static int dst_width(MemorySegment struct) {
            return struct.get(dst_width$LAYOUT, dst_width$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int dst_width
         * }
         */
        public static void dst_width(MemorySegment struct, int fieldValue) {
            struct.set(dst_width$LAYOUT, dst_width$OFFSET, fieldValue);
        }

        private static final OfInt dst_height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dst_height"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int dst_height
         * }
         */
        public static final OfInt dst_height$layout() {
            return dst_height$LAYOUT;
        }

        private static final long dst_height$OFFSET = 44;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int dst_height
         * }
         */
        public static final long dst_height$offset() {
            return dst_height$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int dst_height
         * }
         */
        public static int dst_height(MemorySegment struct) {
            return struct.get(dst_height$LAYOUT, dst_height$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int dst_height
         * }
         */
        public static void dst_height(MemorySegment struct, int fieldValue) {
            struct.set(dst_height$LAYOUT, dst_height$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout viewport$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("viewport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     bool has_src;
     *     bool has_dst;
     *     struct wlr_fbox src;
     *     int dst_width;
     *     int dst_height;
     * } viewport
     * }
     */
    public static final GroupLayout viewport$layout() {
        return viewport$LAYOUT;
    }

    private static final long viewport$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     bool has_src;
     *     bool has_dst;
     *     struct wlr_fbox src;
     *     int dst_width;
     *     int dst_height;
     * } viewport
     * }
     */
    public static final long viewport$offset() {
        return viewport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     bool has_src;
     *     bool has_dst;
     *     struct wlr_fbox src;
     *     int dst_width;
     *     int dst_height;
     * } viewport
     * }
     */
    public static MemorySegment viewport(MemorySegment struct) {
        return struct.asSlice(viewport$OFFSET, viewport$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     bool has_src;
     *     bool has_dst;
     *     struct wlr_fbox src;
     *     int dst_width;
     *     int dst_height;
     * } viewport
     * }
     */
    public static void viewport(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, viewport$OFFSET, viewport$LAYOUT.byteSize());
    }

    private static final OfLong cached_state_locks$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cached_state_locks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t cached_state_locks
     * }
     */
    public static final OfLong cached_state_locks$layout() {
        return cached_state_locks$LAYOUT;
    }

    private static final long cached_state_locks$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t cached_state_locks
     * }
     */
    public static final long cached_state_locks$offset() {
        return cached_state_locks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t cached_state_locks
     * }
     */
    public static long cached_state_locks(MemorySegment struct) {
        return struct.get(cached_state_locks$LAYOUT, cached_state_locks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t cached_state_locks
     * }
     */
    public static void cached_state_locks(MemorySegment struct, long fieldValue) {
        struct.set(cached_state_locks$LAYOUT, cached_state_locks$OFFSET, fieldValue);
    }

    private static final GroupLayout cached_state_link$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cached_state_link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list cached_state_link
     * }
     */
    public static final GroupLayout cached_state_link$layout() {
        return cached_state_link$LAYOUT;
    }

    private static final long cached_state_link$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list cached_state_link
     * }
     */
    public static final long cached_state_link$offset() {
        return cached_state_link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list cached_state_link
     * }
     */
    public static MemorySegment cached_state_link(MemorySegment struct) {
        return struct.asSlice(cached_state_link$OFFSET, cached_state_link$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list cached_state_link
     * }
     */
    public static void cached_state_link(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cached_state_link$OFFSET, cached_state_link$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


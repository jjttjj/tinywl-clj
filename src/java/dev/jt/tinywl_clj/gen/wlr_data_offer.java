// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_data_offer {
 *     struct wl_resource *resource;
 *     struct wlr_data_source *source;
 *     enum wlr_data_offer_type type;
 *     struct wl_list link;
 *     uint32_t actions;
 *     enum wl_data_device_manager_dnd_action preferred_action;
 *     bool in_ask;
 *     struct wl_listener source_destroy;
 * }
 * }
 */
public class wlr_data_offer {

    wlr_data_offer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("resource"),
        C.C_POINTER.withName("source"),
        C.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        wl_list.layout().withName("link"),
        C.C_INT.withName("actions"),
        C.C_INT.withName("preferred_action"),
        C.C_BOOL.withName("in_ask"),
        MemoryLayout.paddingLayout(7),
        wl_listener.layout().withName("source_destroy")
    ).withName("wlr_data_offer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout resource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("resource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static final AddressLayout resource$layout() {
        return resource$LAYOUT;
    }

    private static final long resource$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static final long resource$offset() {
        return resource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static MemorySegment resource(MemorySegment struct) {
        return struct.get(resource$LAYOUT, resource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static void resource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(resource$LAYOUT, resource$OFFSET, fieldValue);
    }

    private static final AddressLayout source$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_data_source *source
     * }
     */
    public static final AddressLayout source$layout() {
        return source$LAYOUT;
    }

    private static final long source$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_data_source *source
     * }
     */
    public static final long source$offset() {
        return source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_data_source *source
     * }
     */
    public static MemorySegment source(MemorySegment struct) {
        return struct.get(source$LAYOUT, source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_data_source *source
     * }
     */
    public static void source(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(source$LAYOUT, source$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wlr_data_offer_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wlr_data_offer_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wlr_data_offer_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wlr_data_offer_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final GroupLayout link$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final GroupLayout link$layout() {
        return link$LAYOUT;
    }

    private static final long link$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static final long link$offset() {
        return link$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static MemorySegment link(MemorySegment struct) {
        return struct.asSlice(link$OFFSET, link$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_list link
     * }
     */
    public static void link(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, link$OFFSET, link$LAYOUT.byteSize());
    }

    private static final OfInt actions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("actions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t actions
     * }
     */
    public static final OfInt actions$layout() {
        return actions$LAYOUT;
    }

    private static final long actions$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t actions
     * }
     */
    public static final long actions$offset() {
        return actions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t actions
     * }
     */
    public static int actions(MemorySegment struct) {
        return struct.get(actions$LAYOUT, actions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t actions
     * }
     */
    public static void actions(MemorySegment struct, int fieldValue) {
        struct.set(actions$LAYOUT, actions$OFFSET, fieldValue);
    }

    private static final OfInt preferred_action$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferred_action"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum wl_data_device_manager_dnd_action preferred_action
     * }
     */
    public static final OfInt preferred_action$layout() {
        return preferred_action$LAYOUT;
    }

    private static final long preferred_action$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum wl_data_device_manager_dnd_action preferred_action
     * }
     */
    public static final long preferred_action$offset() {
        return preferred_action$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum wl_data_device_manager_dnd_action preferred_action
     * }
     */
    public static int preferred_action(MemorySegment struct) {
        return struct.get(preferred_action$LAYOUT, preferred_action$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum wl_data_device_manager_dnd_action preferred_action
     * }
     */
    public static void preferred_action(MemorySegment struct, int fieldValue) {
        struct.set(preferred_action$LAYOUT, preferred_action$OFFSET, fieldValue);
    }

    private static final OfBoolean in_ask$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("in_ask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool in_ask
     * }
     */
    public static final OfBoolean in_ask$layout() {
        return in_ask$LAYOUT;
    }

    private static final long in_ask$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool in_ask
     * }
     */
    public static final long in_ask$offset() {
        return in_ask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool in_ask
     * }
     */
    public static boolean in_ask(MemorySegment struct) {
        return struct.get(in_ask$LAYOUT, in_ask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool in_ask
     * }
     */
    public static void in_ask(MemorySegment struct, boolean fieldValue) {
        struct.set(in_ask$LAYOUT, in_ask$OFFSET, fieldValue);
    }

    private static final GroupLayout source_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("source_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static final GroupLayout source_destroy$layout() {
        return source_destroy$LAYOUT;
    }

    private static final long source_destroy$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static final long source_destroy$offset() {
        return source_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static MemorySegment source_destroy(MemorySegment struct) {
        return struct.asSlice(source_destroy$OFFSET, source_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener source_destroy
     * }
     */
    public static void source_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, source_destroy$OFFSET, source_destroy$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


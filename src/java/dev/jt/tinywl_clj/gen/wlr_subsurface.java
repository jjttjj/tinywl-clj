// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_subsurface {
 *     struct wl_resource *resource;
 *     struct wlr_surface *surface;
 *     struct wlr_surface *parent;
 *     struct wlr_subsurface_parent_state current;
 *     struct wlr_subsurface_parent_state pending;
 *     uint32_t cached_seq;
 *     bool has_cache;
 *     bool synchronized;
 *     bool reordered;
 *     bool added;
 *     struct wl_listener surface_client_commit;
 *     struct wl_listener parent_destroy;
 *     struct {
 *         struct wl_signal destroy;
 *     } events;
 *     void *data;
 * }
 * }
 */
public class wlr_subsurface {

    wlr_subsurface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("resource"),
        C.C_POINTER.withName("surface"),
        C.C_POINTER.withName("parent"),
        wlr_subsurface_parent_state.layout().withName("current"),
        wlr_subsurface_parent_state.layout().withName("pending"),
        C.C_INT.withName("cached_seq"),
        C.C_BOOL.withName("has_cache"),
        C.C_BOOL.withName("synchronized"),
        C.C_BOOL.withName("reordered"),
        C.C_BOOL.withName("added"),
        wl_listener.layout().withName("surface_client_commit"),
        wl_listener.layout().withName("parent_destroy"),
        wlr_subsurface.events.layout().withName("events"),
        C.C_POINTER.withName("data")
    ).withName("wlr_subsurface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout resource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("resource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static final AddressLayout resource$layout() {
        return resource$LAYOUT;
    }

    private static final long resource$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static final long resource$offset() {
        return resource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static MemorySegment resource(MemorySegment struct) {
        return struct.get(resource$LAYOUT, resource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_resource *resource
     * }
     */
    public static void resource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(resource$LAYOUT, resource$OFFSET, fieldValue);
    }

    private static final AddressLayout surface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("surface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static final AddressLayout surface$layout() {
        return surface$LAYOUT;
    }

    private static final long surface$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static final long surface$offset() {
        return surface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static MemorySegment surface(MemorySegment struct) {
        return struct.get(surface$LAYOUT, surface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static void surface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(surface$LAYOUT, surface$OFFSET, fieldValue);
    }

    private static final AddressLayout parent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("parent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface *parent
     * }
     */
    public static final AddressLayout parent$layout() {
        return parent$LAYOUT;
    }

    private static final long parent$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface *parent
     * }
     */
    public static final long parent$offset() {
        return parent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface *parent
     * }
     */
    public static MemorySegment parent(MemorySegment struct) {
        return struct.get(parent$LAYOUT, parent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface *parent
     * }
     */
    public static void parent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(parent$LAYOUT, parent$OFFSET, fieldValue);
    }

    private static final GroupLayout current$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("current"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_subsurface_parent_state current
     * }
     */
    public static final GroupLayout current$layout() {
        return current$LAYOUT;
    }

    private static final long current$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_subsurface_parent_state current
     * }
     */
    public static final long current$offset() {
        return current$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_subsurface_parent_state current
     * }
     */
    public static MemorySegment current(MemorySegment struct) {
        return struct.asSlice(current$OFFSET, current$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_subsurface_parent_state current
     * }
     */
    public static void current(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, current$OFFSET, current$LAYOUT.byteSize());
    }

    private static final GroupLayout pending$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pending"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_subsurface_parent_state pending
     * }
     */
    public static final GroupLayout pending$layout() {
        return pending$LAYOUT;
    }

    private static final long pending$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_subsurface_parent_state pending
     * }
     */
    public static final long pending$offset() {
        return pending$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_subsurface_parent_state pending
     * }
     */
    public static MemorySegment pending(MemorySegment struct) {
        return struct.asSlice(pending$OFFSET, pending$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_subsurface_parent_state pending
     * }
     */
    public static void pending(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pending$OFFSET, pending$LAYOUT.byteSize());
    }

    private static final OfInt cached_seq$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cached_seq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t cached_seq
     * }
     */
    public static final OfInt cached_seq$layout() {
        return cached_seq$LAYOUT;
    }

    private static final long cached_seq$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t cached_seq
     * }
     */
    public static final long cached_seq$offset() {
        return cached_seq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t cached_seq
     * }
     */
    public static int cached_seq(MemorySegment struct) {
        return struct.get(cached_seq$LAYOUT, cached_seq$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t cached_seq
     * }
     */
    public static void cached_seq(MemorySegment struct, int fieldValue) {
        struct.set(cached_seq$LAYOUT, cached_seq$OFFSET, fieldValue);
    }

    private static final OfBoolean has_cache$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("has_cache"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool has_cache
     * }
     */
    public static final OfBoolean has_cache$layout() {
        return has_cache$LAYOUT;
    }

    private static final long has_cache$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool has_cache
     * }
     */
    public static final long has_cache$offset() {
        return has_cache$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool has_cache
     * }
     */
    public static boolean has_cache(MemorySegment struct) {
        return struct.get(has_cache$LAYOUT, has_cache$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool has_cache
     * }
     */
    public static void has_cache(MemorySegment struct, boolean fieldValue) {
        struct.set(has_cache$LAYOUT, has_cache$OFFSET, fieldValue);
    }

    private static final OfBoolean synchronized_$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("synchronized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool synchronized
     * }
     */
    public static final OfBoolean synchronized_$layout() {
        return synchronized_$LAYOUT;
    }

    private static final long synchronized_$OFFSET = 77;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool synchronized
     * }
     */
    public static final long synchronized_$offset() {
        return synchronized_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool synchronized
     * }
     */
    public static boolean synchronized_(MemorySegment struct) {
        return struct.get(synchronized_$LAYOUT, synchronized_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool synchronized
     * }
     */
    public static void synchronized_(MemorySegment struct, boolean fieldValue) {
        struct.set(synchronized_$LAYOUT, synchronized_$OFFSET, fieldValue);
    }

    private static final OfBoolean reordered$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("reordered"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool reordered
     * }
     */
    public static final OfBoolean reordered$layout() {
        return reordered$LAYOUT;
    }

    private static final long reordered$OFFSET = 78;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool reordered
     * }
     */
    public static final long reordered$offset() {
        return reordered$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool reordered
     * }
     */
    public static boolean reordered(MemorySegment struct) {
        return struct.get(reordered$LAYOUT, reordered$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool reordered
     * }
     */
    public static void reordered(MemorySegment struct, boolean fieldValue) {
        struct.set(reordered$LAYOUT, reordered$OFFSET, fieldValue);
    }

    private static final OfBoolean added$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("added"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool added
     * }
     */
    public static final OfBoolean added$layout() {
        return added$LAYOUT;
    }

    private static final long added$OFFSET = 79;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool added
     * }
     */
    public static final long added$offset() {
        return added$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool added
     * }
     */
    public static boolean added(MemorySegment struct) {
        return struct.get(added$LAYOUT, added$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool added
     * }
     */
    public static void added(MemorySegment struct, boolean fieldValue) {
        struct.set(added$LAYOUT, added$OFFSET, fieldValue);
    }

    private static final GroupLayout surface_client_commit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surface_client_commit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener surface_client_commit
     * }
     */
    public static final GroupLayout surface_client_commit$layout() {
        return surface_client_commit$LAYOUT;
    }

    private static final long surface_client_commit$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener surface_client_commit
     * }
     */
    public static final long surface_client_commit$offset() {
        return surface_client_commit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_client_commit
     * }
     */
    public static MemorySegment surface_client_commit(MemorySegment struct) {
        return struct.asSlice(surface_client_commit$OFFSET, surface_client_commit$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_client_commit
     * }
     */
    public static void surface_client_commit(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surface_client_commit$OFFSET, surface_client_commit$LAYOUT.byteSize());
    }

    private static final GroupLayout parent_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener parent_destroy
     * }
     */
    public static final GroupLayout parent_destroy$layout() {
        return parent_destroy$LAYOUT;
    }

    private static final long parent_destroy$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener parent_destroy
     * }
     */
    public static final long parent_destroy$offset() {
        return parent_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener parent_destroy
     * }
     */
    public static MemorySegment parent_destroy(MemorySegment struct) {
        return struct.asSlice(parent_destroy$OFFSET, parent_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener parent_destroy
     * }
     */
    public static void parent_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_destroy$OFFSET, parent_destroy$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * }
     * }
     */
    public static class events {

        events() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wl_signal.layout().withName("destroy")
        ).withName("$anon$45:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("destroy"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final GroupLayout destroy$layout() {
            return destroy$LAYOUT;
        }

        private static final long destroy$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static final long destroy$offset() {
            return destroy$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static MemorySegment destroy(MemorySegment struct) {
            return struct.asSlice(destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct wl_signal destroy
         * }
         */
        public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, destroy$OFFSET, destroy$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct wl_signal destroy;
     * } events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


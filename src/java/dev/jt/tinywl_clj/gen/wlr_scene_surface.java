// Generated by jextract

package dev.jt.tinywl_clj.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wlr_scene_surface {
 *     struct wlr_scene_buffer *buffer;
 *     struct wlr_surface *surface;
 *     struct wlr_box clip;
 *     struct wlr_addon addon;
 *     struct wl_listener outputs_update;
 *     struct wl_listener output_enter;
 *     struct wl_listener output_leave;
 *     struct wl_listener output_sample;
 *     struct wl_listener frame_done;
 *     struct wl_listener surface_destroy;
 *     struct wl_listener surface_commit;
 * }
 * }
 */
public class wlr_scene_surface {

    wlr_scene_surface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        C.C_POINTER.withName("buffer"),
        C.C_POINTER.withName("surface"),
        wlr_box.layout().withName("clip"),
        wlr_addon.layout().withName("addon"),
        wl_listener.layout().withName("outputs_update"),
        wl_listener.layout().withName("output_enter"),
        wl_listener.layout().withName("output_leave"),
        wl_listener.layout().withName("output_sample"),
        wl_listener.layout().withName("frame_done"),
        wl_listener.layout().withName("surface_destroy"),
        wl_listener.layout().withName("surface_commit")
    ).withName("wlr_scene_surface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_scene_buffer *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_scene_buffer *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_scene_buffer *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_scene_buffer *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final AddressLayout surface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("surface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static final AddressLayout surface$layout() {
        return surface$LAYOUT;
    }

    private static final long surface$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static final long surface$offset() {
        return surface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static MemorySegment surface(MemorySegment struct) {
        return struct.get(surface$LAYOUT, surface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_surface *surface
     * }
     */
    public static void surface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(surface$LAYOUT, surface$OFFSET, fieldValue);
    }

    private static final GroupLayout clip$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("clip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_box clip
     * }
     */
    public static final GroupLayout clip$layout() {
        return clip$LAYOUT;
    }

    private static final long clip$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_box clip
     * }
     */
    public static final long clip$offset() {
        return clip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_box clip
     * }
     */
    public static MemorySegment clip(MemorySegment struct) {
        return struct.asSlice(clip$OFFSET, clip$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_box clip
     * }
     */
    public static void clip(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, clip$OFFSET, clip$LAYOUT.byteSize());
    }

    private static final GroupLayout addon$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("addon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wlr_addon addon
     * }
     */
    public static final GroupLayout addon$layout() {
        return addon$LAYOUT;
    }

    private static final long addon$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wlr_addon addon
     * }
     */
    public static final long addon$offset() {
        return addon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wlr_addon addon
     * }
     */
    public static MemorySegment addon(MemorySegment struct) {
        return struct.asSlice(addon$OFFSET, addon$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wlr_addon addon
     * }
     */
    public static void addon(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, addon$OFFSET, addon$LAYOUT.byteSize());
    }

    private static final GroupLayout outputs_update$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("outputs_update"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener outputs_update
     * }
     */
    public static final GroupLayout outputs_update$layout() {
        return outputs_update$LAYOUT;
    }

    private static final long outputs_update$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener outputs_update
     * }
     */
    public static final long outputs_update$offset() {
        return outputs_update$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener outputs_update
     * }
     */
    public static MemorySegment outputs_update(MemorySegment struct) {
        return struct.asSlice(outputs_update$OFFSET, outputs_update$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener outputs_update
     * }
     */
    public static void outputs_update(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, outputs_update$OFFSET, outputs_update$LAYOUT.byteSize());
    }

    private static final GroupLayout output_enter$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("output_enter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener output_enter
     * }
     */
    public static final GroupLayout output_enter$layout() {
        return output_enter$LAYOUT;
    }

    private static final long output_enter$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener output_enter
     * }
     */
    public static final long output_enter$offset() {
        return output_enter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener output_enter
     * }
     */
    public static MemorySegment output_enter(MemorySegment struct) {
        return struct.asSlice(output_enter$OFFSET, output_enter$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener output_enter
     * }
     */
    public static void output_enter(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, output_enter$OFFSET, output_enter$LAYOUT.byteSize());
    }

    private static final GroupLayout output_leave$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("output_leave"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener output_leave
     * }
     */
    public static final GroupLayout output_leave$layout() {
        return output_leave$LAYOUT;
    }

    private static final long output_leave$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener output_leave
     * }
     */
    public static final long output_leave$offset() {
        return output_leave$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener output_leave
     * }
     */
    public static MemorySegment output_leave(MemorySegment struct) {
        return struct.asSlice(output_leave$OFFSET, output_leave$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener output_leave
     * }
     */
    public static void output_leave(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, output_leave$OFFSET, output_leave$LAYOUT.byteSize());
    }

    private static final GroupLayout output_sample$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("output_sample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener output_sample
     * }
     */
    public static final GroupLayout output_sample$layout() {
        return output_sample$LAYOUT;
    }

    private static final long output_sample$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener output_sample
     * }
     */
    public static final long output_sample$offset() {
        return output_sample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener output_sample
     * }
     */
    public static MemorySegment output_sample(MemorySegment struct) {
        return struct.asSlice(output_sample$OFFSET, output_sample$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener output_sample
     * }
     */
    public static void output_sample(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, output_sample$OFFSET, output_sample$LAYOUT.byteSize());
    }

    private static final GroupLayout frame_done$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("frame_done"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener frame_done
     * }
     */
    public static final GroupLayout frame_done$layout() {
        return frame_done$LAYOUT;
    }

    private static final long frame_done$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener frame_done
     * }
     */
    public static final long frame_done$offset() {
        return frame_done$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener frame_done
     * }
     */
    public static MemorySegment frame_done(MemorySegment struct) {
        return struct.asSlice(frame_done$OFFSET, frame_done$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener frame_done
     * }
     */
    public static void frame_done(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, frame_done$OFFSET, frame_done$LAYOUT.byteSize());
    }

    private static final GroupLayout surface_destroy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surface_destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static final GroupLayout surface_destroy$layout() {
        return surface_destroy$LAYOUT;
    }

    private static final long surface_destroy$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static final long surface_destroy$offset() {
        return surface_destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static MemorySegment surface_destroy(MemorySegment struct) {
        return struct.asSlice(surface_destroy$OFFSET, surface_destroy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_destroy
     * }
     */
    public static void surface_destroy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surface_destroy$OFFSET, surface_destroy$LAYOUT.byteSize());
    }

    private static final GroupLayout surface_commit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surface_commit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct wl_listener surface_commit
     * }
     */
    public static final GroupLayout surface_commit$layout() {
        return surface_commit$LAYOUT;
    }

    private static final long surface_commit$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct wl_listener surface_commit
     * }
     */
    public static final long surface_commit$offset() {
        return surface_commit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_commit
     * }
     */
    public static MemorySegment surface_commit(MemorySegment struct) {
        return struct.asSlice(surface_commit$OFFSET, surface_commit$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct wl_listener surface_commit
     * }
     */
    public static void surface_commit(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surface_commit$OFFSET, surface_commit$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

